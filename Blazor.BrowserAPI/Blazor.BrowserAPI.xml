<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blazor.BrowserAPI</name>
    </assembly>
    <members>
        <member name="T:BrowserAPI.Implementation.Clipboard">
            <summary>
            The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Clipboard.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Clipboard.Write(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.writeText(text);</para>
            <para>The Clipboard interface's writeText() property writes the specified text string to the system clipboard. Text may be read back using either read() or readText().</para>
            </summary>
            <param name="text">The string to be written to the clipboard.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Clipboard.Read(System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.readText();</para>
            <para>The Clipboard interface's readText() method returns a Promise which resolves with a copy of the textual contents of the system clipboard.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.Console">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Assert(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Assert(System.Boolean,System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Clear(System.Threading.CancellationToken)">
            <summary>
            The <i>console.clear()</i> method clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Count(System.Threading.CancellationToken)">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Count(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label.
            If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.CountReset(System.Threading.CancellationToken)">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.Implementation.Console.Count(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.CountReset(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.Implementation.Console.Count(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0.
            If omitted, <i>countReset()</i> resets the default counter to 0.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Debug(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Debug(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Dir(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>The method <i>console.dir()</i> displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Dirxml(System.Object,System.Threading.CancellationToken)">
            <summary>
            The <i>console.dirxml()</i> method displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Error(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Error(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Group(System.Threading.CancellationToken)">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Group(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.GroupCollapsed(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.Implementation.Console.Group(System.Threading.CancellationToken)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)"/> to back out to the parent group.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.GroupCollapsed(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.Implementation.Console.Group(System.String,System.Threading.CancellationToken)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)"/> to back out to the parent group.</para>
            </summary>
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)">
            <summary>
            The <i>console.groupEnd()</i> method exits the current inline group in the Web console.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Info(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Info(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Log(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Log(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Table(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Table(System.Object,System.String[],System.Threading.CancellationToken)">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Time(System.Threading.CancellationToken)">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.Console.TimeEnd(System.Threading.CancellationToken)"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Time(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.Console.TimeEnd(System.String,System.Threading.CancellationToken)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">
            A string representing the name to give the new timer.
            This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeEnd(System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeEnd(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">
            A string representing the name of the timer to stop.
            Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeLog(System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeLog(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeLog(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Trace(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Trace(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="objects">
            Zero or more objects to be output to console along with the trace.
            These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.Implementation.Console.Log(System.Object[],System.Threading.CancellationToken)"/> method.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Warn(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Warn(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ConsoleInProcess">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Assert(System.Boolean,System.String)">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Assert(System.Boolean,System.Object[])">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Clear">
            <summary>
            The <i>console.clear()</i> method clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Count">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Count(System.String)">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label. If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.CountReset">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Count"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.CountReset(System.String)">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Count(System.String)"/>.
            </summary>
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0. If omitted, <i>countReset()</i> resets the default counter to 0.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Debug(System.String)">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Debug(System.Object[])">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Dir(System.Object)">
            <summary>
            <para>The method <i>console.dir()</i> displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Dirxml(System.Object)">
            <summary>
            The <i>console.dirxml()</i> method displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Error(System.String)">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Error(System.Object[])">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Group">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd"/> is called.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Group(System.String)">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd"/> is called.
            </summary>
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.GroupCollapsed">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Group"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd"/> to back out to the parent group.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.GroupCollapsed(System.String)">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Group(System.String)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd"/> to back out to the parent group.</para>
            </summary>
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd">
            <summary>
            The <i>console.groupEnd()</i> method exits the current inline group in the Web console.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Info(System.String)">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Info(System.Object[])">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Log(System.String)">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Log(System.Object[])">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Table(System.Object)">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Table(System.Object,System.String[])">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Time">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Time(System.String)">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd(System.String)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">A string representing the name to give the new timer. This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console. If omitted, the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd(System.String)">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">A string representing the name of the timer to stop. Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended. If omitted, the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeLog">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeLog(System.String)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeLog(System.String,System.Object[])">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Trace(System.String)">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Trace(System.Object[])">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="objects">Zero or more objects to be output to console along with the trace. These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Log(System.Object[])"/> method.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Warn(System.String)">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Warn(System.Object[])">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.Implementation.CookieStorage">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorage.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.GetAllCookies(System.Threading.CancellationToken)">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorage.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.GetLength(System.Threading.CancellationToken)">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.GetCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.RemoveCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.CookieStorageInProcess">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorageInProcess.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.GetCookie(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.RemoveCookie(System.String)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.Dialog">
            <summary>
            <para>The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.Dialog.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.#ctor(System.Threading.Tasks.Task{Microsoft.JSInterop.IJSObjectReference})">
            <summary>
            <para>The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.Dialog.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.DisposeAsync">
            <summary>
            Releases the JS instance for this dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Dialog.Open">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.GetOpen(System.Threading.CancellationToken)">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.SetOpen(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
            <param name="value">Sets the dialog state:<br/>true = open<br/>false = close</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Dialog.ReturnValue">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.GetReturnValue(System.Threading.CancellationToken)">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.SetReturnValue(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
            <param name="returnValue">A string representing the updated value of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.Show(System.Threading.CancellationToken)">
            <summary>
            The <i>show()</i> method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.ShowModal(System.Threading.CancellationToken)">
            <summary>
            The <i>showModal()</i> method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.Close(System.Threading.CancellationToken)">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt;.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.Close(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.Implementation.Dialog.ReturnValue"/> of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.DialogBase">
            <summary>
            Base class for <see cref="T:BrowserAPI.Implementation.Dialog"/> and <see cref="T:BrowserAPI.Implementation.DialogInProcess"/>.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.DialogBase.OnCancel">
            <summary>
            The <i>cancel</i> event fires on a &lt;dialog&gt; when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.DialogBase.OnClose">
            <summary>
            The <i>close</i> event is fired on an HTMLDialogElement object when the &lt;dialog&gt; it represents has been closed.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.DialogFactory">
            <summary>
            <para>This class can take a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and creates a <see cref="T:BrowserAPI.IDialog"/> or <see cref="T:BrowserAPI.IDialogInProcess"/> object with it.</para>
            <para>
            This factory <b>does not dispose</b> the created onjects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/>/<see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a dialog-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogFactory.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>This class can take a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and creates a <see cref="T:BrowserAPI.IDialog"/> or <see cref="T:BrowserAPI.IDialogInProcess"/> object with it.</para>
            <para>
            This factory <b>does not dispose</b> the created onjects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/>/<see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a dialog-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogFactory.Create(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialog"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogFactory.CreateInProcess(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialogInProcess"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.DialogInProcess">
            <summary>
            <para>The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DialogInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DialogInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Dispose">
            <summary>
            Releases the JS instance for this dialog.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.DialogInProcess.Open">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.DialogInProcess.ReturnValue">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Show">
            <summary>
            The <i>show()</i> method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.ShowModal">
            <summary>
            The <i>showModal()</i> method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Close">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt;.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Close(System.String)">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.Implementation.DialogInProcess.ReturnValue"/> of the dialog.</param>
        </member>
        <member name="T:BrowserAPI.Implementation.Download">
            <summary>
            Save data as a file download on the filesystem.
            <para>For file upload use the <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile">InputFile</see> component.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            Save data as a file download on the filesystem.
            <para>For file upload use the <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile">InputFile</see> component.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">UTF8 encoded content of the file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Raw data that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,Microsoft.JSInterop.DotNetStreamReference,System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Data stream that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLElement">
            <summary>
            <para>The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElement.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.#ctor(System.Threading.Tasks.Task{Microsoft.JSInterop.IJSObjectReference})">
            <summary>
            <para>The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElement.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.DisposeAsync">
            <summary>
            Releases the JS instance for this HTML element.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.InnerText">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetInnerText(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetInnerText(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OuterText">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.Implementation.HTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOuterText(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.Implementation.HTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetOuterText(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.Implementation.HTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetStyle(System.Threading.CancellationToken)">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetStyle(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetWidth">
            <summary>
            <para>The <i>HTMLElement.offsetWidth</i> read-only property returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetWidth(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetWidth</i> read-only property returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetHeight">
            <summary>
            <para>The <i>HTMLElement.offsetHeight</i> read-only property returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetHeight(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetHeight</i> read-only property returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetLeft">
            <summary>
            <para>The <i>HTMLElement.offsetLeft</i> read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetLeft(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetLeft</i> read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetTop">
            <summary>
            The <i>HTMLElement.offsetTop</i> read-only property returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetTop(System.Threading.CancellationToken)">
            <summary>
            The <i>HTMLElement.offsetTop</i> read-only property returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetParent">
            <summary>
            <para>The <i>HTMLElement.offsetParent</i> read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetParent(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetParent</i> read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetHasFocus(System.Threading.CancellationToken)">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Click(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.click()</i> method simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Focus(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>HTMLElement.focus()</i> method sets focus on the specified element, if it can be focused.
            The focused element is the element that will receive keyboard and similar events by default.
            </para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Blur(System.Threading.CancellationToken)">
            <summary>
            The <i>HTMLElement.blur()</i> method removes keyboard focus from the current element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ShowPopover(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>showPopover()</i> method of the HTMLElement interface shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HidePopover(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>hidePopover()</i> method of the HTMLElement interface hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.TogglePopover(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.TogglePopover(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.InnerHTML">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetInnerHTML(System.Threading.CancellationToken)">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetInnerHTML(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OuterHTML">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOuterHTML(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetOuterHTML(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Attributes">
            <summary>
            The <i>Element.attributes</i> property returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAttributes(System.Threading.CancellationToken)">
            <summary>
            The <i>Element.attributes</i> property returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ChildElementCount">
            <summary>
            The <i>Element.childElementCount</i> read-only property returns the number of child elements of this element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetChildElementCount(System.Threading.CancellationToken)">
            <summary>
            The <i>Element.childElementCount</i> read-only property returns the number of child elements of this element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Children">
            <summary>
            <para>The read-only <i>children</i> property returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetChildren(System.Threading.CancellationToken)">
            <summary>
            <para>The read-only <i>children</i> property returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClassName">
            <summary>
            The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClassName(System.Threading.CancellationToken)">
            <summary>
            The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.
            </summary>
            <param name="cancellationToken"></param>
            <returns>A string variable representing the class or space-separated classes of the current element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetClassName(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.
            </summary>
            <param name="value">A string variable representing the class or space-separated classes of the current element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClassList">
            <summary>
            <para>The <i>Element.classList</i> is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClassList(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.classList</i> is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientWidth">
            <summary>
            <para>
            The <i>Element.clientWidth</i> property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientWidth(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>Element.clientWidth</i> property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientHeight">
            <summary>
            <para>
            The <i>Element.clientHeight</i> read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientHeight(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>Element.clientHeight</i> read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientLeft(System.Threading.CancellationToken)">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientTop(System.Threading.CancellationToken)">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollWidth">
            <summary>
            <para>The <i>Element.scrollWidth</i> read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollWidth(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollWidth</i> read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollHeight">
            <summary>
            <para>The <i>Element.scrollHeight</i> read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollHeight(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollHeight</i> read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollLeft">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollLeft(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetScrollLeft(System.Int32,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollTop">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollTop(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetScrollTop(System.Int32,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetBoundingClientRect(System.Threading.CancellationToken)">
            <summary>
            The <i>Element.getBoundingClientRect()</i> method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientRects(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>getClientRects()</i> method of the Element interface returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HasAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Element.hasAttribute()</i> method returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="name">A string representing the name of the attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HasAttributes(System.Threading.CancellationToken)">
            <summary>
            The <i>hasAttributes()</i> method of the Element interface returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>setPointerCapture()</i> method of the Element interface is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReleasePointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>releasePointerCapture()</i> method of the Element interface releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.Implementation.HTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HasPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            The <i>hasPointerCapture()</i> method of the Element interface checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Scroll(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The <i>scroll()</i> method of the Element interface scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ScrollBy(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The <i>scrollBy()</i> method of the Element interface scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ScrollIntoView(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            The Element interface's <i>scrollIntoView()</i> method scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLElementBase">
            <summary>
            Base class for <see cref="T:BrowserAPI.Implementation.HTMLElement"/> and <see cref="T:BrowserAPI.Implementation.HTMLElementInProcess"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementBase.RequestFullscreen(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.requestFullscreen()</i> method issues an asynchronous request to make the element be displayed in fullscreen mode.</para>
            <para>
            It's not guaranteed that the element will be put into full screen mode.
            If permission to enter full screen mode is granted, the returned Promise will resolve and the element will receive a fullscreenchange event to let it know that it's now in full screen mode.
            If permission is denied, the promise is rejected and the element receives a fullscreenerror event instead.
            If the element has been detached from the original document, then the document receives these events instead.
            </para>
            </summary>
            <param name="navigationUI">
            Controls whether or not to show navigation UI while the element is in fullscreen mode.
            The default value is "auto", which indicates that the browser should decide what to do.<br />
            - "hide": The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.<br />
            - "show": The browser will present page navigation controls and possibly other user interface;
                      the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface..<br />
            - "auto": The browser will choose which of the above settings to apply. This is the default value.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitionstart">
            <summary>
            <para>The <i>transitionstart</i> event is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitionend">
            <summary>
            <para>
            The <i>transitionend</i> event is fired when a CSS transition has completed.
            In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
            </para>
            <para>
            The <i>transitionend</i> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state.
            If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired.
            If the transitioncancel event is fired, the transitionend event will not fire.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitionrun">
            <summary>
            <para>The <i>transitionrun</i> event is fired when a CSS transition is first created, i.e. before any transition-delay has begun.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitioncancel">
            <summary>
            <para>The <i>transitioncancel</i> event is fired when a CSS transition is canceled.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationstart">
            <summary>
            <para>
            The <i>animationstart</i> event is fired when a CSS Animation has started.
            If there is an animation-delay, this event will fire once the delay period has expired.
            A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationend">
            <summary>
            <para>
            The <i>animationend</i> event is fired when a CSS Animation has completed.
            If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationiteration">
            <summary>
            <para>
            The <i>animationiteration</i> event is fired when an iteration of a CSS Animation ends, and another one begins.
            This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationcancel">
            <summary>
            <para>
            The <i>animationcancel</i> event is fired when a CSS Animation unexpectedly aborts.
            In other words, any time it stops running without sending an animationend event.
            This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS.
            Therefore, either directly or because any of its containing nodes are hidden.
            </para>
            <para>An event handler for this event can be added by setting the onanimationcancel property, or using addEventListener().</para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLElementFactory">
            <summary>
            <para>This class can take a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and creates a <see cref="T:BrowserAPI.IHTMLElement"/> or <see cref="T:BrowserAPI.IHTMLElementInProcess"/> object with it.</para>
            <para>
            This factory <b>does not dispose</b> the created onjects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/>/<see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementFactory.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>This class can take a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and creates a <see cref="T:BrowserAPI.IHTMLElement"/> or <see cref="T:BrowserAPI.IHTMLElementInProcess"/> object with it.</para>
            <para>
            This factory <b>does not dispose</b> the created onjects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/>/<see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementFactory.Create(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElement"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementFactory.CreateInProcess(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElementInProcess"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLElementInProcess">
            <summary>
            <para>The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Dispose">
            <summary>
            Releases the JS instance for this HTML element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.InnerText">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OuterText">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.Implementation.HTMLElementInProcess.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetWidth">
            <summary>
            <para>The <i>HTMLElement.offsetWidth</i> read-only property returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetHeight">
            <summary>
            <para>The <i>HTMLElement.offsetHeight</i> read-only property returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetLeft">
            <summary>
            <para>The <i>HTMLElement.offsetLeft</i> read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetTop">
            <summary>
            The <i>HTMLElement.offsetTop</i> read-only property returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetParent">
            <summary>
            <para>The <i>HTMLElement.offsetParent</i> read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Click">
            <summary>
            <para>The <i>HTMLElement.click()</i> method simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Focus(System.Boolean)">
            <summary>
            <para>
            The <i>HTMLElement.focus()</i> method sets focus on the specified element, if it can be focused.
            The focused element is the element that will receive keyboard and similar events by default.
            </para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Blur">
            <summary>
            The <i>HTMLElement.blur()</i> method removes keyboard focus from the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ShowPopover">
            <summary>
            <para>The <i>showPopover()</i> method of the HTMLElement interface shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HidePopover">
            <summary>
            <para>The <i>hidePopover()</i> method of the HTMLElement interface hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.TogglePopover">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.TogglePopover(System.Boolean)">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.InnerHTML">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OuterHTML">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Attributes">
            <summary>
            The <i>Element.attributes</i> property returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ChildElementCount">
            <summary>
            The <i>Element.childElementCount</i> read-only property returns the number of child elements of this element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Children">
            <summary>
            <para>The read-only <i>children</i> property returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClassName">
            <summary>
            <para>The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.</para>
            <para>Returns A string variable representing the class or space-separated classes of the current element.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClassList">
            <summary>
            <para>The <i>Element.classList</i> is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientWidth">
            <summary>
            <para>
            The <i>Element.clientWidth</i> property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientHeight">
            <summary>
            <para>
            The <i>Element.clientHeight</i> read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollWidth">
            <summary>
            <para>The <i>Element.scrollWidth</i> read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollHeight">
            <summary>
            <para>The <i>Element.scrollHeight</i> read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollLeft">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollTop">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetBoundingClientRect">
            <summary>
            The <i>Element.getBoundingClientRect()</i> method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetClientRects">
            <summary>
            <para>The <i>getClientRects()</i> method of the Element interface returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HasAttribute(System.String)">
            <summary>
            The <i>Element.hasAttribute()</i> method returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="name">A string representing the name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HasAttributes">
            <summary>
            The <i>hasAttributes()</i> method of the Element interface returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.SetPointerCapture(System.Int64)">
            <summary>
            <para>
            The <i>setPointerCapture()</i> method of the Element interface is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReleasePointerCapture(System.Int64)">
            <summary>
            <para>The <i>releasePointerCapture()</i> method of the Element interface releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.SetPointerCapture(System.Int64)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HasPointerCapture(System.Int64)">
            <summary>
            The <i>hasPointerCapture()</i> method of the Element interface checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Scroll(System.Int32,System.Int32)">
            <summary>
            The <i>scroll()</i> method of the Element interface scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ScrollBy(System.Int32,System.Int32)">
            <summary>
            The <i>scrollBy()</i> method of the Element interface scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ScrollIntoView(System.String,System.String,System.String)">
            <summary>
            The Element interface's <i>scrollIntoView()</i> method scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
        </member>
        <member name="T:BrowserAPI.Implementation.Language">
            <summary>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.</para>
            <para>The document.documentElement.lang attribute sets the language of the content in the HTML page.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.</para>
            <para>The document.documentElement.lang attribute sets the language of the content in the HTML page.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.Language.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.GetBrowserLanguage(System.Threading.CancellationToken)">
            <summary>
            <para>navigator.language</para>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Language.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>Returns the content of the "lang" attribute on the html tag.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.GetHtmlLanguage(System.Threading.CancellationToken)">
            <summary>
            <para>document.documentElement.lang</para>
            <para>Returns the content of the "lang" attribute on the html tag.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.SetHtmlLanguage(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>document.documentElement.lang</para>
            <para>Sets the content of the "lang" attribute on the html tag.</para>
            </summary>
            <param name="language">language abbreviation: e.g. "en", "fr", "es", "de"</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.LanguageInProcess">
            <summary>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.</para>
            <para>The document.documentElement.lang attribute sets the language of the content in the HTML page.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LanguageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.</para>
            <para>The document.documentElement.lang attribute sets the language of the content in the HTML page.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LanguageInProcess.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LanguageInProcess.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>The content of the "lang" attribute on the html tag.</para>
            <para>language abbreviation: e.g. "en", "fr", "es", "de"</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.LocalStorage">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LocalStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.GetLength(System.Threading.CancellationToken)">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.LocalStorageInProcess">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LocalStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerContainer">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
            <param name="moduleManager"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
            <param name="moduleManager"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.<br />
            If service worker is not supported, null is returned.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.DelayUntilReady(System.Threading.CancellationToken)">
            <summary>
            Provides a way of delaying code execution until a service worker is active.
            It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker.
            Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistration()</i> method of the ServiceWorkerContainer interface gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL.
            The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistrations()</i> method of the ServiceWorkerContainer interface gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array.
            The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerContainer.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.GetController(System.Threading.CancellationToken)">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.StartMessages(System.Threading.CancellationToken)">
            <summary>
            The <i>startMessages()</i> method of the ServiceWorkerContainer interface explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()).
            This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerContainerBase">
            <summary>
            Base class for <see cref="T:BrowserAPI.Implementation.ServiceWorkerContainer"/> and <see cref="T:BrowserAPI.Implementation.ServiceWorkerContainerInProcess"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerBase.Register(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns>true, if service worker is supported, otherwise false</returns>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerContainerBase.OnControllerChange">
            <summary>
            Occurs when the document's associated <i>ServiceWorkerRegistration</i> acquires a new active worker.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerContainerBase.OnMessage">
            <summary>
            <para>The message event is used in a page controlled by a service worker to receive messages from the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/message_event">MessageEvent</see> as json.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerContainerInProcess">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
            <param name="moduleManager"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
            <param name="moduleManager"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.<br />
            If service worker is not supported, null is returned.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.DelayUntilReady(System.Threading.CancellationToken)">
            <summary>
            Provides a way of delaying code execution until a service worker is active. It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker. Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistration()</i> method of the ServiceWorkerContainer interface gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL. The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistrations()</i> method of the ServiceWorkerContainer interface gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array. The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active). This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.StartMessages">
            <summary>
            The <i>startMessages()</i> method of the ServiceWorkerContainer interface explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()). This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerRegistration">
            <summary>
            <para>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistration.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistration.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.DisposeAsync">
            <summary>
            Releases the JS instance for this service worker registration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Active">
            <summary>
            The <i>active</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetActive(System.Threading.CancellationToken)">
            <summary>
            The <i>active</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Installing">
            <summary>
            The <i>installing</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetInstalling(System.Threading.CancellationToken)">
            <summary>
            The <i>installing</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Waiting">
            <summary>
            The <i>waiting</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetWaiting(System.Threading.CancellationToken)">
            <summary>
            The <i>waiting</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Scope">
            <summary>
            The <i>scope</i> read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetScope(System.Threading.CancellationToken)">
            <summary>
            The <i>scope</i> read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.UpdateViaCache">
            <summary>
            <para>The <i>updateViaCache</i> read-only property of the ServiceWorkerRegistration interface updates the cache using the mode specified in the call to ServiceWorkerContainer.register. Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.</para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetUpdateViaCache(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>updateViaCache</i> read-only property of the ServiceWorkerRegistration interface updates the cache using the mode specified in the call to ServiceWorkerContainer.register. Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.</para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.Update(System.Threading.CancellationToken)">
            <summary>
            The <i>update()</i> method of the ServiceWorkerRegistration interface attempts to update the service worker.
            It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker.
            The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerRegistrationBase">
            <summary>
            Base class for <see cref="T:BrowserAPI.Implementation.ServiceWorkerRegistration"/> and <see cref="T:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationBase.Unregister(System.Threading.CancellationToken)">
            <summary>
            The <i>unregister()</i> method of the ServiceWorkerRegistration interface unregisters the service worker registration and returns a Promise.
            The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register() with the same scope.)
            The service worker will finish any ongoing operations before it is unregistered.
            </summary>
            <param name="cancellationToken"></param>
            <returns>false if no registration was found, otherwise true (irrespective of whether unregistration happened or not)</returns>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerRegistrationBase.OnUpdateFound">
            <summary>
            The <i>updatefound</i> event of the ServiceWorkerRegistration interface is fired any time the <i>ServiceWorkerRegistration.installing</i> property acquires a new service worker.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess">
            <summary>
            <para>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Dispose">
            <summary>
            Releases the JS instance for this service worker registration.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Active">
            <summary>
            The <i>active</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Installing">
            <summary>
            The <i>installing</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Waiting">
            <summary>
            The <i>waiting</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Scope">
            <summary>
            The <i>scope</i> read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.UpdateViaCache">
            <summary>
            <para>The <i>updateViaCache</i> read-only property of the ServiceWorkerRegistration interface updates the cache using the mode specified in the call to ServiceWorkerContainer.register. Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.</para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Update(System.Threading.CancellationToken)">
            <summary>
            The <i>update()</i> method of the ServiceWorkerRegistration interface attempts to update the service worker. It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker. The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorker">
            <summary>
            <para>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorker.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorker.DisposeAsync"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.DisposeAsync">
            <summary>
            Releases the JS instance for this service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorker.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.GetScriptUrl(System.Threading.CancellationToken)">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorker.State">
            <summary>
            The state read-only property of the <i>ServiceWorker</i> interface returns a string representing the current state of the service worker.
            It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.GetState(System.Threading.CancellationToken)">
            <summary>
            The state read-only property of the <i>ServiceWorker</i> interface returns a string representing the current state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.PostMessage(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>postMessage()</i> method of the ServiceWorker interface sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerBase">
            <summary>
            Base class for <see cref="T:BrowserAPI.Implementation.ServiceWorker"/> and <see cref="T:BrowserAPI.Implementation.ServiceWorkerInProcess"/>.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerBase.OnStateChange">
            <summary>
            <para>The <i>statechange</i> event fires anytime the ServiceWorker.state changes.</para>
            <para>Parameter is the new state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerBase.OnError">
            <summary>
            <para>The <i>error</i> event fires whenever an error occurs in the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerInProcess">
            <summary>
            <para>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerInProcess.Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerInProcess.Dispose">
            <summary>
            Releases the JS instance for this service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerInProcess.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerInProcess.State">
            <summary>
            The state read-only property of the <i>ServiceWorker</i> interface returns a string representing the current state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerInProcess.PostMessage(System.Object)">
            <summary>
            <para>
            The <i>postMessage()</i> method of the ServiceWorker interface sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.Implementation.SessionStorage">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.SessionStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.GetLength(System.Threading.CancellationToken)">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.SessionStorageInProcess">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.SessionStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ModuleManager">
            <summary>
            Implementation of <see cref="T:BrowserAPI.IModuleManager"/>.
            </summary>
            <param name="jsRuntime"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Implementation of <see cref="T:BrowserAPI.IModuleManager"/>.
            </summary>
            <param name="jsRuntime"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.Dispose">
            <summary>
            <para>Disposes the module synchronously if possible, otherwise asynchronously as fire and forget.</para>
            <para>If the download is running and not finished, the download will be aborted.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.DisposeAsync">
            <summary>
            <para>Disposes the module synchronously if possible, otherwise asynchronously.</para>
            <para>If the download is running and not finished, the download will be aborted.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.LoadModule">
            <summary>
            Implementation of <see cref="M:BrowserAPI.IModuleManager.LoadModule"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.DOMRect">
            <summary>
            <para>A DOMRect describes the size and position of a rectangle.</para>
            <para>
            The type of box represented by the DOMRect is specified by the method or property that returned it.
            For example, Range.getBoundingClientRect() specifies the rectangle that bounds the content of the range using such objects.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.X">
            <summary>
            The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Y">
            <summary>
            The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Width">
            <summary>
            The width of the DOMRect.
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Height">
            <summary>
            The height of the DOMRect.
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Top">
            <summary>
            Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Bottom">
            <summary>
            Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Left">
            <summary>
            Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Right">
            <summary>
            Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative).
            </summary>
        </member>
        <member name="T:BrowserAPI.IModuleManager">
            <summary>
            <para>
            The ModuleManager is responsible for the access of the JS-module at "_content/Blazor.BrowserAPI/BrowserAPI.js".<br />
            The necessary module is lazy loaded the first time when it is needed,
            but it also contains a method to start the module download manually.
            </para>
            <para>However, when *InProcess*-classes are used, the module must be loaded beforehand, otherwise an Exception is thrown.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IModuleManager.LoadModule">
            <summary>
            Starts the download of the JS module. Returns a Task that represents the download of the module. If this tasks finishes, the download finishes.
            </summary>
            <returns>A Task that represents the download of the module. If this tasks finishes, the download finishes.</returns>
        </member>
        <member name="T:BrowserAPI.AddBrowserAPIExtension">
            <summary>
            Contains the extension method <see cref="M:BrowserAPI.AddBrowserAPIExtension.AddBrowserAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/>
            </summary>
        </member>
        <member name="M:BrowserAPI.AddBrowserAPIExtension.AddBrowserAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            <para>
            Registers all services available in this library.<br />
            All services includes every BrowserAPI service and <see cref="T:BrowserAPI.IModuleManager"/>.
            </para>
            <para>All services will be registered as scoped.</para>
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.TrySyncExtensions">
            <summary>
            <para>Extensions for <see cref="T:Microsoft.JSInterop.IJSRuntime"/> and <see cref="T:Microsoft.JSInterop.IJSObjectReference"/>.</para>
            <para>This class contains <i>TrySync</i>-methods, which will use <see cref="M:Microsoft.JSInterop.IJSInProcessRuntime.Invoke``1(System.String,System.Object[])"/> if possible, otherwise <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeVoidTrySync(Microsoft.JSInterop.IJSRuntime,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <param name="jsRuntime">Represents an instance of a JavaScript runtime to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeTrySync``1(Microsoft.JSInterop.IJSRuntime,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <typeparam name="TValue">The JSON-serializable return type.</typeparam>
            <param name="jsRuntime">Represents an instance of a JavaScript runtime to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name="TValue"/> obtained by JSON-deserializing the return value.</returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeVoidTrySync(Microsoft.JSInterop.IJSObjectReference,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <param name="module">Represents an instance of a JavaScript module to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeTrySync``1(Microsoft.JSInterop.IJSObjectReference,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <typeparam name="TResult">The JSON-serializable return type.</typeparam>
            <param name="module">Represents an instance of a JavaScript module to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name="TResult"/> obtained by JSON-deserializing the return value.</returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.DisposeTrySync(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            Invokes Dispose if possible, otherwise DisposeAsync.
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IClipboard">
            <summary>
            The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.
            </summary>
        </member>
        <member name="M:BrowserAPI.IClipboard.Write(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.writeText(text);</para>
            <para>The Clipboard interface's writeText() property writes the specified text string to the system clipboard. Text may be read back using either read() or readText().</para>
            </summary>
            <param name="text">The string to be written to the clipboard.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IClipboard.Read(System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.readText();</para>
            <para>The Clipboard interface's readText() method returns a Promise which resolves with a copy of the textual contents of the system clipboard.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IConsole">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsole.Assert(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Assert(System.Boolean,System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Clear(System.Threading.CancellationToken)">
            <summary>
            The <i>console.clear()</i> method clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Count(System.Threading.CancellationToken)">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Count(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label.
            If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.CountReset(System.Threading.CancellationToken)">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.IConsole.Count(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.CountReset(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.IConsole.Count(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0.
            If omitted, <i>countReset()</i> resets the default counter to 0.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Debug(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Debug(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Dir(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>The method <i>console.dir()</i> displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Dirxml(System.Object,System.Threading.CancellationToken)">
            <summary>
            The <i>console.dirxml()</i> method displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Error(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Error(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Group(System.Threading.CancellationToken)">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Group(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.GroupCollapsed(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.IConsole.Group(System.Threading.CancellationToken)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)"/> to back out to the parent group.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.GroupCollapsed(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.IConsole.Group(System.String,System.Threading.CancellationToken)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)"/> to back out to the parent group.</para>
            </summary>
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)">
            <summary>
            The <i>console.groupEnd()</i> method exits the current inline group in the Web console.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Info(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Info(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Log(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Log(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Table(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Table(System.Object,System.String[],System.Threading.CancellationToken)">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Time(System.Threading.CancellationToken)">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsole.TimeEnd(System.Threading.CancellationToken)"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Time(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsole.TimeEnd(System.String,System.Threading.CancellationToken)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">
            A string representing the name to give the new timer.
            This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeEnd(System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeEnd(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">
            A string representing the name of the timer to stop.
            Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeLog(System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeLog(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeLog(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Trace(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Trace(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="objects">
            Zero or more objects to be output to console along with the trace.
            These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.IConsole.Log(System.Object[],System.Threading.CancellationToken)"/> method.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Warn(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Warn(System.Object[],System.Threading.CancellationToken)">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IConsoleInProcess">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox). The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Assert(System.Boolean,System.String)">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Assert(System.Boolean,System.Object[])">
            <summary>
            The <i>console.assert()</i> method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Clear">
            <summary>
            The <i>console.clear()</i> method clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Count">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Count(System.String)">
            <summary>
            The <i>console.count()</i> method logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label. If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.CountReset">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.IConsoleInProcess.Count"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.CountReset(System.String)">
            <summary>
            The <i>console.countReset()</i> method resets counter used with <see cref="M:BrowserAPI.IConsoleInProcess.Count(System.String)"/>.
            </summary>
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0. If omitted, <i>countReset()</i> resets the default counter to 0.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Debug(System.String)">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Debug(System.Object[])">
            <summary>
            The <i>console.debug()</i> method outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Dir(System.Object)">
            <summary>
            <para>The method <i>console.dir()</i> displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Dirxml(System.Object)">
            <summary>
            The <i>console.dirxml()</i> method displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Error(System.String)">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Error(System.Object[])">
            <summary>
            The <i>console.error()</i> method outputs an error message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Group">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.IConsoleInProcess.GroupEnd"/> is called.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Group(System.String)">
            <summary>
            The <i>console.group()</i> method creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.IConsoleInProcess.GroupEnd"/> is called.
            </summary>
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.GroupCollapsed">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.IConsoleInProcess.Group"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.IConsoleInProcess.GroupEnd"/> to back out to the parent group.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.GroupCollapsed(System.String)">
            <summary>
            <para>
            The <i>console.groupCollapsed()</i> method creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.IConsoleInProcess.Group(System.String)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.IConsoleInProcess.GroupEnd"/> to back out to the parent group.</para>
            </summary>
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.GroupEnd">
            <summary>
            The <i>console.groupEnd()</i> method exits the current inline group in the Web console.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Info(System.String)">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Info(System.Object[])">
            <summary>
            The <i>console.info()</i> method outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Log(System.String)">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Log(System.Object[])">
            <summary>
            The <i>console.log()</i> method outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Table(System.Object)">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Table(System.Object,System.String[])">
            <summary>
            <para>The <i>console.table()</i> method displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Time">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsoleInProcess.TimeEnd"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Time(System.String)">
            <summary>
            The <i>console.time()</i> method starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsoleInProcess.TimeEnd(System.String)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">A string representing the name to give the new timer. This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console. If omitted, the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeEnd">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeEnd(System.String)">
            <summary>
            The <i>console.timeEnd()</i> stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">A string representing the name of the timer to stop. Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended. If omitted, the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeLog">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeLog(System.String)">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeLog(System.String,System.Object[])">
            <summary>
            The <i>console.timeLog()</i> method logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Trace(System.String)">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Trace(System.Object[])">
            <summary>
            The <i>console.trace()</i> method outputs a stack trace to the Web console.
            </summary>
            <param name="objects">Zero or more objects to be output to console along with the trace. These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.IConsoleInProcess.Log(System.Object[])"/> method.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Warn(System.String)">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Warn(System.Object[])">
            <summary>
            The <i>console.warn()</i> method outputs a warning message to the Web console.
            </summary>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.ICookieStorage">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
        </member>
        <member name="P:BrowserAPI.ICookieStorage.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.GetAllCookies(System.Threading.CancellationToken)">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ICookieStorage.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.GetLength(System.Threading.CancellationToken)">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.GetCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.RemoveCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ICookieStorageInProcess">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
        </member>
        <member name="P:BrowserAPI.ICookieStorageInProcess.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.ICookieStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.GetCookie(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.RemoveCookie(System.String)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.IDialog">
            <summary>
            <para>The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</para>
            </summary>
            <summary>
            Base class for <see cref="!:Dialog"/> and <see cref="!:DialogInProcess"/>.
            </summary>
        </member>
        <member name="P:BrowserAPI.IDialog.Open">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialog.GetOpen(System.Threading.CancellationToken)">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.SetOpen(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
            <param name="value">Sets the dialog state:<br/>true = open<br/>false = close</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IDialog.ReturnValue">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialog.GetReturnValue(System.Threading.CancellationToken)">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.SetReturnValue(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
            <param name="returnValue">A string representing the updated value of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.Show(System.Threading.CancellationToken)">
            <summary>
            The <i>show()</i> method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.ShowModal(System.Threading.CancellationToken)">
            <summary>
            The <i>showModal()</i> method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.Close(System.Threading.CancellationToken)">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt;.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.Close(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.IDialog.ReturnValue"/> of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IDialog.OnCancel">
            <summary>
            The <i>cancel</i> event fires on a &lt;dialog&gt; when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.
            </summary>
        </member>
        <member name="E:BrowserAPI.IDialog.OnClose">
            <summary>
            The <i>close</i> event is fired on an HTMLDialogElement object when the &lt;dialog&gt; it represents has been closed.
            </summary>
        </member>
        <member name="T:BrowserAPI.IDialogInProcess">
            <summary>
            Base class for <see cref="!:Dialog"/> and <see cref="!:DialogInProcess"/>.
            </summary>
            <summary>
            <para>The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IDialogInProcess.OnCancel">
            <summary>
            The <i>cancel</i> event fires on a &lt;dialog&gt; when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.
            </summary>
        </member>
        <member name="E:BrowserAPI.IDialogInProcess.OnClose">
            <summary>
            The <i>close</i> event is fired on an HTMLDialogElement object when the &lt;dialog&gt; it represents has been closed.
            </summary>
        </member>
        <member name="P:BrowserAPI.IDialogInProcess.Open">
            <summary>
            The <i>open</i> property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="P:BrowserAPI.IDialogInProcess.ReturnValue">
            <summary>
            The <i>returnValue</i> property of the HTMLDialogElement interface gets or sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.Show">
            <summary>
            The <i>show()</i> method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.ShowModal">
            <summary>
            The <i>showModal()</i> method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.Close">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt;.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.Close(System.String)">
            <summary>
            The <i>close()</i> method of the HTMLDialogElement interface closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.IDialogInProcess.ReturnValue"/> of the dialog.</param>
        </member>
        <member name="T:BrowserAPI.IDialogFactory">
            <summary>
            <para>This class can take a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and creates a <see cref="T:BrowserAPI.IDialog"/> or <see cref="T:BrowserAPI.IDialogInProcess"/> object with it.</para>
            <para>
            This factory <b>does not dispose</b> the created onjects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/>/<see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a dialog-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogFactory.Create(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialog"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="M:BrowserAPI.IDialogFactory.CreateInProcess(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialogInProcess"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="T:BrowserAPI.IDownload">
            <summary>
            Save data as a file download on the filesystem.
            <para>For file upload use the <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile">InputFile</see> component.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IDownload.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">UTF8 encoded content of the file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDownload.DownloadAsFile(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Raw data that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDownload.DownloadAsFile(System.String,Microsoft.JSInterop.DotNetStreamReference,System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Data stream that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IHTMLElement">
            <summary>
            <para>The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</para>
            </summary>
            <summary>
            Base class for <see cref="!:HTMLElement"/> and <see cref="!:HTMLElementInProcess"/>.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.InnerText">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetInnerText(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetInnerText(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OuterText">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.IHTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOuterText(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.IHTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetOuterText(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.IHTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetStyle(System.Threading.CancellationToken)">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetStyle(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetWidth">
            <summary>
            <para>The <i>HTMLElement.offsetWidth</i> read-only property returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetWidth(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetWidth</i> read-only property returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetHeight">
            <summary>
            <para>The <i>HTMLElement.offsetHeight</i> read-only property returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetHeight(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetHeight</i> read-only property returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetLeft">
            <summary>
            <para>The <i>HTMLElement.offsetLeft</i> read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetLeft(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetLeft</i> read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetTop">
            <summary>
            The <i>HTMLElement.offsetTop</i> read-only property returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetTop(System.Threading.CancellationToken)">
            <summary>
            The <i>HTMLElement.offsetTop</i> read-only property returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetParent">
            <summary>
            <para>The <i>HTMLElement.offsetParent</i> read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetParent(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.offsetParent</i> read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetHasFocus(System.Threading.CancellationToken)">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Click(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>HTMLElement.click()</i> method simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Focus(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>HTMLElement.focus()</i> method sets focus on the specified element, if it can be focused.
            The focused element is the element that will receive keyboard and similar events by default.
            </para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Blur(System.Threading.CancellationToken)">
            <summary>
            The <i>HTMLElement.blur()</i> method removes keyboard focus from the current element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ShowPopover(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>showPopover()</i> method of the HTMLElement interface shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HidePopover(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>hidePopover()</i> method of the HTMLElement interface hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.TogglePopover(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.TogglePopover(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.InnerHTML">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetInnerHTML(System.Threading.CancellationToken)">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetInnerHTML(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OuterHTML">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOuterHTML(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetOuterHTML(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Attributes">
            <summary>
            The <i>Element.attributes</i> property returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAttributes(System.Threading.CancellationToken)">
            <summary>
            The <i>Element.attributes</i> property returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ChildElementCount">
            <summary>
            The <i>Element.childElementCount</i> read-only property returns the number of child elements of this element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetChildElementCount(System.Threading.CancellationToken)">
            <summary>
            The <i>Element.childElementCount</i> read-only property returns the number of child elements of this element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Children">
            <summary>
            <para>The read-only <i>children</i> property returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetChildren(System.Threading.CancellationToken)">
            <summary>
            <para>The read-only <i>children</i> property returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClassName">
            <summary>
            The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClassName(System.Threading.CancellationToken)">
            <summary>
            The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.
            </summary>
            <param name="cancellationToken"></param>
            <returns>A string variable representing the class or space-separated classes of the current element.</returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetClassName(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.
            </summary>
            <param name="value">A string variable representing the class or space-separated classes of the current element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClassList">
            <summary>
            <para>The <i>Element.classList</i> is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClassList(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.classList</i> is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientWidth">
            <summary>
            <para>
            The <i>Element.clientWidth</i> property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientWidth(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>Element.clientWidth</i> property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientHeight">
            <summary>
            <para>
            The <i>Element.clientHeight</i> read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientHeight(System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>Element.clientHeight</i> read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientLeft(System.Threading.CancellationToken)">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientTop(System.Threading.CancellationToken)">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollWidth">
            <summary>
            <para>The <i>Element.scrollWidth</i> read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollWidth(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollWidth</i> read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollHeight">
            <summary>
            <para>The <i>Element.scrollHeight</i> read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollHeight(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollHeight</i> read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollLeft">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollLeft(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetScrollLeft(System.Int32,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollTop">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollTop(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetScrollTop(System.Int32,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetBoundingClientRect(System.Threading.CancellationToken)">
            <summary>
            The <i>Element.getBoundingClientRect()</i> method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientRects(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>getClientRects()</i> method of the Element interface returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HasAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Element.hasAttribute()</i> method returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="name">A string representing the name of the attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HasAttributes(System.Threading.CancellationToken)">
            <summary>
            The <i>hasAttributes()</i> method of the Element interface returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>setPointerCapture()</i> method of the Element interface is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReleasePointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>releasePointerCapture()</i> method of the Element interface releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.IHTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HasPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            The <i>hasPointerCapture()</i> method of the Element interface checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Scroll(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The <i>scroll()</i> method of the Element interface scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ScrollBy(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            The <i>scrollBy()</i> method of the Element interface scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ScrollIntoView(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            The Element interface's <i>scrollIntoView()</i> method scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RequestFullscreen(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.requestFullscreen()</i> method issues an asynchronous request to make the element be displayed in fullscreen mode.</para>
            <para>
            It's not guaranteed that the element will be put into full screen mode.
            If permission to enter full screen mode is granted, the returned Promise will resolve and the element will receive a fullscreenchange event to let it know that it's now in full screen mode.
            If permission is denied, the promise is rejected and the element receives a fullscreenerror event instead.
            If the element has been detached from the original document, then the document receives these events instead.
            </para>
            </summary>
            <param name="navigationUI">
            Controls whether or not to show navigation UI while the element is in fullscreen mode.
            The default value is "auto", which indicates that the browser should decide what to do.<br />
            - "hide": The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.<br />
            - "show": The browser will present page navigation controls and possibly other user interface;
                      the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface..<br />
            - "auto": The browser will choose which of the above settings to apply. This is the default value.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitionstart">
            <summary>
            <para>The <i>transitionstart</i> event is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitionend">
            <summary>
            <para>
            The <i>transitionend</i> event is fired when a CSS transition has completed.
            In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
            </para>
            <para>
            The <i>transitionend</i> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state.
            If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired.
            If the transitioncancel event is fired, the transitionend event will not fire.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitionrun">
            <summary>
            <para>The <i>transitionrun</i> event is fired when a CSS transition is first created, i.e. before any transition-delay has begun.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitioncancel">
            <summary>
            <para>The <i>transitioncancel</i> event is fired when a CSS transition is canceled.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationstart">
            <summary>
            <para>
            The <i>animationstart</i> event is fired when a CSS Animation has started.
            If there is an animation-delay, this event will fire once the delay period has expired.
            A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationend">
            <summary>
            <para>
            The <i>animationend</i> event is fired when a CSS Animation has completed.
            If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationiteration">
            <summary>
            <para>
            The <i>animationiteration</i> event is fired when an iteration of a CSS Animation ends, and another one begins.
            This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationcancel">
            <summary>
            <para>
            The <i>animationcancel</i> event is fired when a CSS Animation unexpectedly aborts.
            In other words, any time it stops running without sending an animationend event.
            This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS.
            Therefore, either directly or because any of its containing nodes are hidden.
            </para>
            <para>An event handler for this event can be added by setting the onanimationcancel property, or using addEventListener().</para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IHTMLElementInProcess">
            <summary>
            Base class for <see cref="!:HTMLElement"/> and <see cref="!:HTMLElementInProcess"/>.
            </summary>
            <summary>
            <para>The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.</para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RequestFullscreen(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>Element.requestFullscreen()</i> method issues an asynchronous request to make the element be displayed in fullscreen mode.</para>
            <para>
            It's not guaranteed that the element will be put into full screen mode.
            If permission to enter full screen mode is granted, the returned Promise will resolve and the element will receive a fullscreenchange event to let it know that it's now in full screen mode.
            If permission is denied, the promise is rejected and the element receives a fullscreenerror event instead.
            If the element has been detached from the original document, then the document receives these events instead.
            </para>
            </summary>
            <param name="navigationUI">
            Controls whether or not to show navigation UI while the element is in fullscreen mode.
            The default value is "auto", which indicates that the browser should decide what to do.<br />
            - "hide": The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.<br />
            - "show": The browser will present page navigation controls and possibly other user interface;
                      the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface..<br />
            - "auto": The browser will choose which of the above settings to apply. This is the default value.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitionstart">
            <summary>
            <para>The <i>transitionstart</i> event is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitionend">
            <summary>
            <para>
            The <i>transitionend</i> event is fired when a CSS transition has completed.
            In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
            </para>
            <para>
            The <i>transitionend</i> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state.
            If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired.
            If the transitioncancel event is fired, the transitionend event will not fire.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitionrun">
            <summary>
            <para>The <i>transitionrun</i> event is fired when a CSS transition is first created, i.e. before any transition-delay has begun.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitioncancel">
            <summary>
            <para>The <i>transitioncancel</i> event is fired when a CSS transition is canceled.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationstart">
            <summary>
            <para>
            The <i>animationstart</i> event is fired when a CSS Animation has started.
            If there is an animation-delay, this event will fire once the delay period has expired.
            A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationend">
            <summary>
            <para>
            The <i>animationend</i> event is fired when a CSS Animation has completed.
            If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationiteration">
            <summary>
            <para>
            The <i>animationiteration</i> event is fired when an iteration of a CSS Animation ends, and another one begins.
            This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationcancel">
            <summary>
            <para>
            The <i>animationcancel</i> event is fired when a CSS Animation unexpectedly aborts.
            In other words, any time it stops running without sending an animationend event.
            This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS.
            Therefore, either directly or because any of its containing nodes are hidden.
            </para>
            <para>An event handler for this event can be added by setting the onanimationcancel property, or using addEventListener().</para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.InnerText">
            <summary>
            <para>The <i>innerText</i> property of the HTMLElement interface represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OuterText">
            <summary>
            <para>
            The <i>outerText</i> property of the HTMLElement interface returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.IHTMLElementInProcess.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>The <i>cssText</i> property of the CSSStyleDeclaration interface returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetWidth">
            <summary>
            <para>The <i>HTMLElement.offsetWidth</i> read-only property returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetHeight">
            <summary>
            <para>The <i>HTMLElement.offsetHeight</i> read-only property returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetLeft">
            <summary>
            <para>The <i>HTMLElement.offsetLeft</i> read-only property returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetTop">
            <summary>
            The <i>HTMLElement.offsetTop</i> read-only property returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetParent">
            <summary>
            <para>The <i>HTMLElement.offsetParent</i> read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Click">
            <summary>
            <para>The <i>HTMLElement.click()</i> method simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Focus(System.Boolean)">
            <summary>
            <para>
            The <i>HTMLElement.focus()</i> method sets focus on the specified element, if it can be focused.
            The focused element is the element that will receive keyboard and similar events by default.
            </para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Blur">
            <summary>
            The <i>HTMLElement.blur()</i> method removes keyboard focus from the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ShowPopover">
            <summary>
            <para>The <i>showPopover()</i> method of the HTMLElement interface shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HidePopover">
            <summary>
            <para>The <i>hidePopover()</i> method of the HTMLElement interface hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.TogglePopover">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.TogglePopover(System.Boolean)">
            <summary>
            <para>The <i>togglePopover()</i> method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.InnerHTML">
            <summary>
            <para>The Element property <i>innerHTML</i> gets or sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OuterHTML">
            <summary>
            <para>
            The <i>outerHTML</i> attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Attributes">
            <summary>
            The <i>Element.attributes</i> property returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ChildElementCount">
            <summary>
            The <i>Element.childElementCount</i> read-only property returns the number of child elements of this element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Children">
            <summary>
            <para>The read-only <i>children</i> property returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClassName">
            <summary>
            <para>The <i>className</i> property of the Element interface gets and sets the value of the class attribute of the specified element.</para>
            <para>Returns A string variable representing the class or space-separated classes of the current element.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClassList">
            <summary>
            <para>The <i>Element.classList</i> is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientWidth">
            <summary>
            <para>
            The <i>Element.clientWidth</i> property is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientHeight">
            <summary>
            <para>
            The <i>Element.clientHeight</i> read-only property is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollWidth">
            <summary>
            <para>The <i>Element.scrollWidth</i> read-only property is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollHeight">
            <summary>
            <para>The <i>Element.scrollHeight</i> read-only property is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollLeft">
            <summary>
            <para>The <i>Element.scrollLeft</i> property gets or sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollTop">
            <summary>
            <para>The <i>Element.scrollTop</i> property gets or sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetBoundingClientRect">
            <summary>
            The <i>Element.getBoundingClientRect()</i> method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetClientRects">
            <summary>
            <para>The <i>getClientRects()</i> method of the Element interface returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HasAttribute(System.String)">
            <summary>
            The <i>Element.hasAttribute()</i> method returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="name">A string representing the name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HasAttributes">
            <summary>
            The <i>hasAttributes()</i> method of the Element interface returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.SetPointerCapture(System.Int64)">
            <summary>
            <para>
            The <i>setPointerCapture()</i> method of the Element interface is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReleasePointerCapture(System.Int64)">
            <summary>
            <para>The <i>releasePointerCapture()</i> method of the Element interface releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.IHTMLElementInProcess.SetPointerCapture(System.Int64)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HasPointerCapture(System.Int64)">
            <summary>
            The <i>hasPointerCapture()</i> method of the Element interface checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Scroll(System.Int32,System.Int32)">
            <summary>
            The <i>scroll()</i> method of the Element interface scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ScrollBy(System.Int32,System.Int32)">
            <summary>
            The <i>scrollBy()</i> method of the Element interface scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ScrollIntoView(System.String,System.String,System.String)">
            <summary>
            The Element interface's <i>scrollIntoView()</i> method scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
        </member>
        <member name="T:BrowserAPI.IHTMLElementFactory">
            <summary>
            <para>This class can take a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and creates a <see cref="T:BrowserAPI.IHTMLElement"/> or <see cref="T:BrowserAPI.IHTMLElementInProcess"/> object with it.</para>
            <para>
            This factory <b>does not dispose</b> the created onjects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/>/<see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementFactory.Create(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElement"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementFactory.CreateInProcess(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElementInProcess"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="T:BrowserAPI.ILanguage">
            <summary>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.</para>
            <para>The document.documentElement.lang attribute sets the language of the content in the HTML page.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.ILanguage.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ILanguage.GetBrowserLanguage(System.Threading.CancellationToken)">
            <summary>
            <para>navigator.language</para>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ILanguage.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>Returns the content of the "lang" attribute on the html tag.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ILanguage.GetHtmlLanguage(System.Threading.CancellationToken)">
            <summary>
            <para>document.documentElement.lang</para>
            <para>Returns the content of the "lang" attribute on the html tag.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILanguage.SetHtmlLanguage(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>document.documentElement.lang</para>
            <para>Sets the content of the "lang" attribute on the html tag.</para>
            </summary>
            <param name="language">language abbreviation: e.g. "en", "fr", "es", "de"</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ILanguageInProcess">
            <summary>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.</para>
            <para>The document.documentElement.lang attribute sets the language of the content in the HTML page.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.ILanguageInProcess.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.ILanguageInProcess.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>The content of the "lang" attribute on the html tag.</para>
            <para>language abbreviation: e.g. "en", "fr", "es", "de"</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.ILocalStorage">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILocalStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.GetLength(System.Threading.CancellationToken)">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ILocalStorageInProcess">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILocalStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerContainer">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
            <param name="moduleManager"></param>
            <summary>
            Base class for <see cref="!:ServiceWorkerContainer"/> and <see cref="!:ServiceWorkerContainerInProcess"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.<br />
            If service worker is not supported, null is returned.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.DelayUntilReady(System.Threading.CancellationToken)">
            <summary>
            Provides a way of delaying code execution until a service worker is active.
            It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker.
            Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistration()</i> method of the ServiceWorkerContainer interface gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL.
            The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistrations()</i> method of the ServiceWorkerContainer interface gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array.
            The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerContainer.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.GetController(System.Threading.CancellationToken)">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.StartMessages(System.Threading.CancellationToken)">
            <summary>
            The <i>startMessages()</i> method of the ServiceWorkerContainer interface explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()).
            This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.Register(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns>true, if service worker is supported, otherwise false</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainer.OnControllerChange">
            <summary>
            Occurs when the document's associated <i>ServiceWorkerRegistration</i> acquires a new active worker.
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainer.OnMessage">
            <summary>
            <para>The message event is used in a page controlled by a service worker to receive messages from the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/message_event">MessageEvent</see> as json.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerContainerInProcess">
            <summary>
            Base class for <see cref="!:ServiceWorkerContainer"/> and <see cref="!:ServiceWorkerContainerInProcess"/>.
            </summary>
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
            <param name="moduleManager"></param>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.Register(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns>true, if service worker is supported, otherwise false</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainerInProcess.OnControllerChange">
            <summary>
            Occurs when the document's associated <i>ServiceWorkerRegistration</i> acquires a new active worker.
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainerInProcess.OnMessage">
            <summary>
            <para>The message event is used in a page controlled by a service worker to receive messages from the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/message_event">MessageEvent</see> as json.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.<br />
            If service worker is not supported, null is returned.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.DelayUntilReady(System.Threading.CancellationToken)">
            <summary>
            Provides a way of delaying code execution until a service worker is active. It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker. Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistration()</i> method of the ServiceWorkerContainer interface gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL. The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            The <i>getRegistrations()</i> method of the ServiceWorkerContainer interface gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array. The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerContainerInProcess.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active). This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.StartMessages">
            <summary>
            The <i>startMessages()</i> method of the ServiceWorkerContainer interface explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()). This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerRegistration">
            <summary>
            <para>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</para>
            </summary>
            <summary>
            Base class for <see cref="!:ServiceWorkerRegistration"/> and <see cref="!:ServiceWorkerRegistrationInProcess"/>.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Active">
            <summary>
            The <i>active</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetActive(System.Threading.CancellationToken)">
            <summary>
            The <i>active</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Installing">
            <summary>
            The <i>installing</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetInstalling(System.Threading.CancellationToken)">
            <summary>
            The <i>installing</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Waiting">
            <summary>
            The <i>waiting</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetWaiting(System.Threading.CancellationToken)">
            <summary>
            The <i>waiting</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Scope">
            <summary>
            The <i>scope</i> read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetScope(System.Threading.CancellationToken)">
            <summary>
            The <i>scope</i> read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.UpdateViaCache">
            <summary>
            <para>The <i>updateViaCache</i> read-only property of the ServiceWorkerRegistration interface updates the cache using the mode specified in the call to ServiceWorkerContainer.register. Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.</para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetUpdateViaCache(System.Threading.CancellationToken)">
            <summary>
            <para>The <i>updateViaCache</i> read-only property of the ServiceWorkerRegistration interface updates the cache using the mode specified in the call to ServiceWorkerContainer.register. Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.</para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.Update(System.Threading.CancellationToken)">
            <summary>
            The <i>update()</i> method of the ServiceWorkerRegistration interface attempts to update the service worker.
            It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker.
            The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.Unregister(System.Threading.CancellationToken)">
            <summary>
            The <i>unregister()</i> method of the ServiceWorkerRegistration interface unregisters the service worker registration and returns a Promise.
            The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register() with the same scope.)
            The service worker will finish any ongoing operations before it is unregistered.
            </summary>
            <param name="cancellationToken"></param>
            <returns>false if no registration was found, otherwise true (irrespective of whether unregistration happened or not)</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerRegistration.OnUpdateFound">
            <summary>
            The <i>updatefound</i> event of the ServiceWorkerRegistration interface is fired any time the <i>ServiceWorkerRegistration.installing</i> property acquires a new service worker.
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerRegistrationInProcess">
            <summary>
            Base class for <see cref="!:ServiceWorkerRegistration"/> and <see cref="!:ServiceWorkerRegistrationInProcess"/>.
            </summary>
            <summary>
            <para>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistrationInProcess.Unregister(System.Threading.CancellationToken)">
            <summary>
            The <i>unregister()</i> method of the ServiceWorkerRegistration interface unregisters the service worker registration and returns a Promise.
            The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register() with the same scope.)
            The service worker will finish any ongoing operations before it is unregistered.
            </summary>
            <param name="cancellationToken"></param>
            <returns>false if no registration was found, otherwise true (irrespective of whether unregistration happened or not)</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerRegistrationInProcess.OnUpdateFound">
            <summary>
            The <i>updatefound</i> event of the ServiceWorkerRegistration interface is fired any time the <i>ServiceWorkerRegistration.installing</i> property acquires a new service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Active">
            <summary>
            The <i>active</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Installing">
            <summary>
            The <i>installing</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Waiting">
            <summary>
            The <i>waiting</i> property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Scope">
            <summary>
            The <i>scope</i> read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.UpdateViaCache">
            <summary>
            <para>The <i>updateViaCache</i> read-only property of the ServiceWorkerRegistration interface updates the cache using the mode specified in the call to ServiceWorkerContainer.register. Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.</para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistrationInProcess.Update(System.Threading.CancellationToken)">
            <summary>
            The <i>update()</i> method of the ServiceWorkerRegistration interface attempts to update the service worker. It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker. The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IServiceWorker">
            <summary>
            <para>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</para>
            </summary>
            <summary>
            Base class for <see cref="!:ServiceWorker"/> and <see cref="!:ServiceWorkerInProcess"/>.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorker.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorker.GetScriptUrl(System.Threading.CancellationToken)">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorker.State">
            <summary>
            The state read-only property of the <i>ServiceWorker</i> interface returns a string representing the current state of the service worker.
            It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorker.GetState(System.Threading.CancellationToken)">
            <summary>
            The state read-only property of the <i>ServiceWorker</i> interface returns a string representing the current state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorker.PostMessage(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>
            The <i>postMessage()</i> method of the ServiceWorker interface sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorker.OnStateChange">
            <summary>
            <para>The <i>statechange</i> event fires anytime the ServiceWorker.state changes.</para>
            <para>Parameter is the new state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorker.OnError">
            <summary>
            <para>The <i>error</i> event fires whenever an error occurs in the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerInProcess">
            <summary>
            Base class for <see cref="!:ServiceWorker"/> and <see cref="!:ServiceWorkerInProcess"/>.
            </summary>
            <summary>
            <para>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </para>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerInProcess.OnStateChange">
            <summary>
            <para>The <i>statechange</i> event fires anytime the ServiceWorker.state changes.</para>
            <para>Parameter is the new state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerInProcess.OnError">
            <summary>
            <para>The <i>error</i> event fires whenever an error occurs in the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerInProcess.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration. The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerInProcess.State">
            <summary>
            The state read-only property of the <i>ServiceWorker</i> interface returns a string representing the current state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerInProcess.PostMessage(System.Object)">
            <summary>
            <para>
            The <i>postMessage()</i> method of the ServiceWorker interface sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.ISessionStorage">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISessionStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.GetLength(System.Threading.CancellationToken)">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ISessionStorageInProcess">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISessionStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
        </member>
        <member name="T:CircleDIAttributes.IBrowserAPIModule">
            <summary>
            <para>
            CircleDI service providers can import this module to register all services available in this library.<br />
            All services includes every BrowserAPI service and <see cref="T:BrowserAPI.IModuleManager"/>.
            </para>
            <para>All services will be registered as scoped, CreationTiming.Constructor, GetAccess.Property and default Name (name of the implementation class).</para>
            </summary>
        </member>
        <member name="T:CircleDIAttributes.ScopedAttribute`2">
            <summary>
            <para>The register attribute from CircleDI to register a scoped service to a CircleDI service provider.</para>
            <para>This attributes members are omitted, because only the attribute class and the type parameters are used here.</para>
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TImplementation">Type of the implementation.</typeparam>
        </member>
        <member name="T:Jab.IBrowserAPIModule">
            <summary>
            <para>
            Jab service providers can import this module to register all services available in this library.<br />
            All services includes every BrowserAPI service and <see cref="T:BrowserAPI.IModuleManager"/>.
            </para>
            <para>All services will be registered as scoped.</para>
            </summary>
        </member>
        <member name="T:Jab.ServiceProviderModuleAttribute">
            <summary>
            The attribute from Jab to mark an interface as module.
            </summary>
        </member>
        <member name="T:Jab.ScopedAttribute`2">
            <summary>
            <para>The register attribute from Jab to register a scoped service to a Jab service provider.</para>
            <para>This attributes members are omitted, because only the attribute class and the type parameters are used here.</para>
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TImpl">Type of the implementation.</typeparam>
        </member>
        <member name="T:AutoInterfaceAttributes.AutoInterfaceAttribute">
            <summary>
            Generates an interface for the decorated class/struct.
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Name">
            <summary>
            <para>The name of the generated interface.</para>
            <para>Default is "I{ClassName}"</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Modifier">
            <summary>
            <para>The modifier(s) for the interface.</para>
            <para>Deault is "public"</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Namespace">
            <summary>
            <para>The namespace declaration for the interface.</para>
            <para>If empty string, no namespace directive will be used (global namespace).<br />
            Default (if not present) it will be mapped to the same namespace as the namespace of the class/struct.</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Inheritance">
            <summary>
            <para>interface inheritance: Name(s) of interfaces this interface will inherit.</para>
            <para>Default is Array.Empty</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Nested">
            <summary>
            <para>
            The Classes, structs or interfaces containing the generated interface.<br />
            e.g. ["public sealed partial class Example"] will wrap the interface with that expression.
            </para>
            <para>Default is Array.Empty</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.StaticMembers">
            <summary>
            <para>If enabled, static members get accepted and are generating "static abstract" members.</para>
            <para>Default is false</para>
            </summary>
        </member>
        <member name="T:AutoInterfaceAttributes.IgnoreAutoInterfaceAttribute">
            <summary>
            The decorated member will be Ignored by the generator.
            </summary>
        </member>
    </members>
</doc>
