<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blazor.BrowserAPI</name>
    </assembly>
    <members>
        <member name="T:BrowserAPI.Implementation.Clipboard">
            <summary>
            The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Clipboard.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Clipboard.Write(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.writeText(text);</para>
            <para>Writes the specified text string to the system clipboard. Text may be read back using either read() or readText().</para>
            </summary>
            <param name="text">The string to be written to the clipboard.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Clipboard.Read(System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.readText();</para>
            <para>Returns a Promise which resolves with a copy of the textual contents of the system clipboard.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.Console">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox).
            The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox).
            The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Assert(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Assert(System.Boolean,System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Assert(System.Boolean,System.String,System.Threading.CancellationToken)" />
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Clear(System.Threading.CancellationToken)">
            <summary>
            Clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Count(System.Threading.CancellationToken)">
            <summary>
            Logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Count(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Count(System.Threading.CancellationToken)" />
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label. If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.CountReset(System.Threading.CancellationToken)">
            <summary>
            Resets counter used with <see cref="M:BrowserAPI.Implementation.Console.Count(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.CountReset(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.CountReset(System.Threading.CancellationToken)" />
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0.
            If omitted, <i>countReset()</i> resets the default counter to 0.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Debug(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Debug(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Debug(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Dir(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Dirxml(System.Object,System.Threading.CancellationToken)">
            <summary>
            Displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Error(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Error(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Error(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Group(System.Threading.CancellationToken)">
            <summary>
            Creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Group(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Group(System.Threading.CancellationToken)" />
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.GroupCollapsed(System.Threading.CancellationToken)">
            <summary>
            <para>
            Creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.Implementation.Console.Group(System.Threading.CancellationToken)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)"/> to back out to the parent group.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.GroupCollapsed(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.GroupCollapsed(System.Threading.CancellationToken)" />
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.GroupEnd(System.Threading.CancellationToken)">
            <summary>
            Exits the current inline group in the Web console.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Info(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Info(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Info(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Log(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Log(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Log(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Table(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Table(System.Object,System.String[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Table(System.Object,System.Threading.CancellationToken)" />
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Time(System.Threading.CancellationToken)">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.Console.TimeEnd(System.Threading.CancellationToken)"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Time(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.Console.TimeEnd(System.String,System.Threading.CancellationToken)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">
            A string representing the name to give the new timer.
            This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeEnd(System.Threading.CancellationToken)">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeEnd(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">
            A string representing the name of the timer to stop.
            Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeLog(System.Threading.CancellationToken)">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeLog(System.String,System.Threading.CancellationToken)">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.Console.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.TimeLog(System.String,System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.TimeLog(System.String,System.Threading.CancellationToken)" />
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Trace(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Trace(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Trace(System.String,System.Threading.CancellationToken)" />
            <param name="objects">
            Zero or more objects to be output to console along with the trace.
            These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.Implementation.Console.Log(System.Object[],System.Threading.CancellationToken)"/> method.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Warn(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Console.Warn(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Console.Warn(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ConsoleInProcess">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox).
            The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox).
            The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Assert(System.Boolean,System.String)">
            <summary>
            Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Assert(System.Boolean,System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Assert(System.Boolean,System.String)" />
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Clear">
            <summary>
            Clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Count">
            <summary>
            Logs the number of times that this particular call to count() has been called.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Count(System.String)">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Count" />
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label. If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.CountReset">
            <summary>
            Resets counter used with <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Count"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.CountReset(System.String)">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.CountReset" />
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0. If omitted, <i>countReset()</i> resets the default counter to 0.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Debug(System.String)">
            <summary>
            Outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Debug(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Debug(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Dir(System.Object)">
            <summary>
            <para>Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Dirxml(System.Object)">
            <summary>
            Displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Error(System.String)">
            <summary>
            Outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Error(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Error(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Group">
            <summary>
            Creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd"/> is called.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Group(System.String)">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Group" />
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.GroupCollapsed">
            <summary>
            <para>
            Creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Group"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd"/> to back out to the parent group.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.GroupCollapsed(System.String)">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.GroupCollapsed" />
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.GroupEnd">
            <summary>
            Exits the current inline group in the Web console.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Info(System.String)">
            <summary>
            Outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Info(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Info(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Log(System.String)">
            <summary>
            Outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Log(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Log(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Table(System.Object)">
            <summary>
            <para>Displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Table(System.Object,System.String[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Table(System.Object)" />
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Time">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Time(System.String)">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd(System.String)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">
            A string representing the name to give the new timer.
            This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console.
            If omitted, the label "default" is used.
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeEnd(System.String)">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">
            A string representing the name of the timer to stop.
            Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended.
            If omitted, the label "default" is used.
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeLog">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeLog(System.String)">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.TimeLog(System.String,System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.TimeLog(System.String)" />
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Trace(System.String)">
            <summary>
            Outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Trace(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Trace(System.String)" />
            <param name="objects">
            Zero or more objects to be output to console along with the trace.
            These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.Implementation.ConsoleInProcess.Log(System.Object[])"/> method.
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Warn(System.String)">
            <summary>
            Outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.ConsoleInProcess.Warn(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.Implementation.ConsoleInProcess.Warn(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.Implementation.CookieStorage">
            <summary>
            <para>The Document property cookie lets you read and write cookies associated with the document.</para>
            </summary>
            <remarks>
            Note: The CookieStorage interface is more sophisticated than the actual browser cookie interface.<br />
            It is structured similar to the <see cref="T:BrowserAPI.ILocalStorage">LocalStorage</see>/<see cref="T:BrowserAPI.ISessionStorage">SessionStorage</see> interface.
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>The Document property cookie lets you read and write cookies associated with the document.</para>
            </summary>
            <remarks>
            Note: The CookieStorage interface is more sophisticated than the actual browser cookie interface.<br />
            It is structured similar to the <see cref="T:BrowserAPI.ILocalStorage">LocalStorage</see>/<see cref="T:BrowserAPI.ISessionStorage">SessionStorage</see> interface.
            </remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorage.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.GetAllCookies(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.CookieStorage.AllCookies" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorage.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.CookieStorage.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.GetCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.RemoveCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.CookieStorageInProcess">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
            <remarks>
            Note: The CookieStorage interface is more sophisticated than the actual browser cookie interface.<br />
            It is structured similar to the <see cref="T:BrowserAPI.ILocalStorageInProcess">LocalStorage</see>/<see cref="T:BrowserAPI.ISessionStorageInProcess">SessionStorage</see> interface.
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
            <remarks>
            Note: The CookieStorage interface is more sophisticated than the actual browser cookie interface.<br />
            It is structured similar to the <see cref="T:BrowserAPI.ILocalStorageInProcess">LocalStorage</see>/<see cref="T:BrowserAPI.ISessionStorageInProcess">SessionStorage</see> interface.
            </remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorageInProcess.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.CookieStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.GetCookie(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.RemoveCookie(System.String)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.CookieStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.Dialog">
            <summary>
            The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.Dialog.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.#ctor(System.Threading.Tasks.Task{Microsoft.JSInterop.IJSObjectReference})">
            <summary>
            The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.Dialog.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.DisposeAsync">
            <summary>
            Releases the JS instance for this dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Dialog.Open">
            <summary>
            Reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.GetOpen(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Dialog.Open" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.SetOpen(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Dialog.Open" />
            <param name="value">Sets the dialog state:<br/>true = open<br/>false = close</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Dialog.ReturnValue">
            <summary>
            Gets/Sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.GetReturnValue(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Dialog.ReturnValue" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.SetReturnValue(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Dialog.ReturnValue" />
            <param name="returnValue">A string representing the updated value of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.Show(System.Threading.CancellationToken)">
            <summary>
            Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.ShowModal(System.Threading.CancellationToken)">
            <summary>
            Displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element.
            Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.Close(System.Threading.CancellationToken)">
            <summary>
            Closes the &lt;dialog&gt;.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Dialog.Close(System.String,System.Threading.CancellationToken)">
            <summary>
            Closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.Implementation.Dialog.ReturnValue"/> of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.DialogBase.OnCancel">
            <summary>
            Fires on a &lt;dialog&gt; when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.DialogBase.OnClose">
            <summary>
            Is fired on an HTMLDialogElement object when the &lt;dialog&gt; it represents has been closed.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.DialogInProcess">
            <summary>
            The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DialogInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DialogInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Dispose">
            <summary>
            Releases the JS instance for this dialog.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.DialogInProcess.Open">
            <summary>
            Reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.DialogInProcess.ReturnValue">
            <summary>
            Gets/Sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Show">
            <summary>
            Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.ShowModal">
            <summary>
            Displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element.
            Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Close">
            <summary>
            Closes the &lt;dialog&gt;.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DialogInProcess.Close(System.String)">
            <summary>
            Closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.Implementation.DialogInProcess.ReturnValue"/> of the dialog.</param>
        </member>
        <member name="T:BrowserAPI.Implementation.ElementFactory">
            <summary>
            <para>An instance of this class takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and exposes an interface to interact with it.</para>
            <para>
            This factory <b>does not dispose</b> the created objects, they must disposed manually.
            So do not forget to call <see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactory.CreateDialog(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialog"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactory.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>An instance of this class takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and exposes an interface to interact with it.</para>
            <para>
            This factory <b>does not dispose</b> the created objects, they must disposed manually.
            So do not forget to call <see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactory.CreateHTMLElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElement"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactory.CreateHTMLMediaElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> and returns a <see cref="T:BrowserAPI.IHTMLMediaElement"/> interface to interact with the given element.
            </summary>
            <param name="htmlMediaElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> html tag.</param>
            <returns>An object that can be used to interact with the given <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> element.</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ElementFactoryInProcess">
            <summary>
            <para>An instance of this class takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and exposes an interface to interact with it.</para>
            <para>
            This factory <b>does not dispose</b> the created objects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactoryInProcess.CreateDialog(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialogInProcess"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactoryInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>An instance of this class takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and exposes an interface to interact with it.</para>
            <para>
            This factory <b>does not dispose</b> the created objects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactoryInProcess.CreateHTMLElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElementInProcess"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ElementFactoryInProcess.CreateHTMLMediaElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> and returns a <see cref="T:BrowserAPI.IHTMLMediaElementInProcess"/> interface to interact with the given element.
            </summary>
            <param name="htmlMediaElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> html tag.</param>
            <returns>An object that can be used to interact with the given <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> element.</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.Download">
            <summary>
            Save data as a file download on the filesystem.
            <para>For file upload use the <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile">InputFile</see> component.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            Save data as a file download on the filesystem.
            <para>For file upload use the <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile">InputFile</see> component.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">UTF8 encoded content of the file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)" />
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Raw data that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,Microsoft.JSInterop.DotNetStreamReference,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Download.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)" />
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Data stream that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.DirectoryHandle">
            <summary>
            <para>The <i>FileSystemDirectoryHandle</i> interface of the File System API provides a handle to a file system directory.</para>
            <para>
            The interface can be accessed via the following methods:<br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker">window.showDirectoryPicker()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/getDirectory">StorageManager.getDirectory()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle">DataTransferItem.getAsFileSystemHandle()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle">FileSystemDirectoryHandle.getDirectoryHandle()</see>
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DirectoryHandle.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandle.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>FileSystemDirectoryHandle</i> interface of the File System API provides a handle to a file system directory.</para>
            <para>
            The interface can be accessed via the following methods:<br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker">window.showDirectoryPicker()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/getDirectory">StorageManager.getDirectory()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle">DataTransferItem.getAsFileSystemHandle()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle">FileSystemDirectoryHandle.getDirectoryHandle()</see>
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DirectoryHandle.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandle.DisposeAsync">
            <summary>
            Releases the JS instance for this directory handle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.DirectoryHandle.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandle.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.DirectoryHandle.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandle.IsSameEntry(BrowserAPI.IDirectoryHandle,System.Threading.CancellationToken)">
            <summary>
            Compares two directory handles to see if the associated entries match.
            </summary>
            <param name="other">The DirectoryHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandle.GetDirectoryHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemDirectoryHandle for a subdirectory with the specified name within the directory handle on which the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the subdirectory you wish to retrieve.</param>
            <param name="create">A boolean value, which defaults to false. When set to true if the directory is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandle.GetFileHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemFileHandle for a file with the specified name, within the directory the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the file you wish to retrieve.</param>
            <param name="create">A Boolean. Default false. When set to true if the file is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandle.Values(System.Threading.CancellationToken)">
            <summary>
            Returns all entries (files, directories) located in this directory.
            </summary>
            <remarks>
            <para>
            This method uses the <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/values">values()</see> Asynchronous iterator method to create these lists.
            Since returning each entry one by one would be unnecessary slow, all entries are iterated and returned at once.
            </para>
            <para>Do not forget to call <i>DispseAsync()</i> on each single item in fileList and directoryList when you done with it.</para>
            </remarks>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.DirectoryHandleBase.Kind">
            <summary>
            Returns the type of entry.
            This is 'file' if the associated entry is a file or 'directory'.
            It is used to distinguish files from directories when iterating over the contents of a directory.
            </summary>
            <remarks>
            Note: This API does not have a common <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle">FileSystemHandle</see> type, so this property always returns "directory".
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandleBase.RemoveEntry(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Attempts to asynchronously remove an entry if the directory handle contains a file or directory called the name specified.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the entry you wish to remove.</param>
            <param name="recursive">A boolean value, which defaults to false. When set to true entries will be removed recursively.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.DirectoryHandleInProcess">
            <summary>
            <para>The <i>FileSystemDirectoryHandle</i> interface of the File System API provides a handle to a file system directory.</para>
            <para>
            The interface can be accessed via the following methods:<br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker">window.showDirectoryPicker()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/getDirectory">StorageManager.getDirectory()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle">DataTransferItem.getAsFileSystemHandle()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle">FileSystemDirectoryHandle.getDirectoryHandle()</see>
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DirectoryHandleInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandleInProcess.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>FileSystemDirectoryHandle</i> interface of the File System API provides a handle to a file system directory.</para>
            <para>
            The interface can be accessed via the following methods:<br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker">window.showDirectoryPicker()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/getDirectory">StorageManager.getDirectory()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle">DataTransferItem.getAsFileSystemHandle()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle">FileSystemDirectoryHandle.getDirectoryHandle()</see>
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.DirectoryHandleInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandleInProcess.Dispose">
            <summary>
            Releases the JS instance for this directory handle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.DirectoryHandleInProcess.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandleInProcess.IsSameEntry(BrowserAPI.IDirectoryHandleInProcess,System.Threading.CancellationToken)">
            <summary>
            Compares two directory handles to see if the associated entries match.
            </summary>
            <param name="other">The DirectoryHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandleInProcess.GetDirectoryHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemDirectoryHandle for a subdirectory with the specified name within the directory handle on which the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the subdirectory you wish to retrieve.</param>
            <param name="create">A boolean value, which defaults to false. When set to true if the directory is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandleInProcess.GetFileHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemFileHandle for a file with the specified name, within the directory the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the file you wish to retrieve.</param>
            <param name="create">A Boolean. Default false. When set to true if the file is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.DirectoryHandleInProcess.Values(System.Threading.CancellationToken)">
            <summary>
            Returns all entries (files, directories) located in this directory.
            </summary>
            <remarks>
            <para>
            This method uses the <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/values">values()</see> Asynchronous iterator method to create these lists.
            Since returning each entry one by one would be unnecessary slow, all entries are iterated and returned at once.
            </para>
            <para>Do not forget to call <i>Dispse()</i> on each single item in fileList and directoryList when you done with it.</para>
            </remarks>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.FileHandle">
            <summary>
            <para>The <i>FileSystemFileHandle</i> interface of the File System API represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.</para>
            <para>
            Note that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open.
            The queryPermission method of the FileSystemHandle interface can be used to verify permission state before accessing a file.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.FileHandle.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandle.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>FileSystemFileHandle</i> interface of the File System API represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.</para>
            <para>
            Note that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open.
            The queryPermission method of the FileSystemHandle interface can be used to verify permission state before accessing a file.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.FileHandle.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandle.DisposeAsync">
            <summary>
            Releases the JS instance for this file handle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.FileHandle.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandle.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.FileHandle.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandle.IsSameEntry(BrowserAPI.IFileHandle,System.Threading.CancellationToken)">
            <summary>
            Compares two file handles to see if the associated entries match.
            </summary>
            <param name="other">The FileHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandle.GetFile(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Promise which resolves to a File object representing the state on disk of the entry represented by the handle.</para>
            <para>If the file on disk changes or is removed after this method is called, the returned File object will likely be no longer readable.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandle.CreateWritable(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a FileSystemWritableFileStream that can be used to write to a file. The method returns a Promise which resolves to this created stream.</para>
            <para>
            Any changes made through the stream won't be reflected in the file represented by the file handle until the stream has been closed.
            This is typically implemented by writing data to a temporary file, and only replacing the file represented by file handle with the temporary file when the writable file stream is closed.
            </para>
            </summary>
            <param name="keepExistingData">A Boolean. Default false. When set to true if the file exists, the existing file is first copied to the temporary file. Otherwise the temporary file starts out empty.</param>
            <param name="mode">
            A string specifying the locking mode for the writable file stream.
            The default value is "siloed". Possible values are:<br />
            - "exclusive": Only one FileSystemWritableFileStream writer can be opened. Attempting to open subsequent writers before the first writer is closed results in a NoModificationAllowedError exception being thrown.<br />
            - "siloed": Multiple FileSystemWritableFileStream writers can be opened at the same time, each with its own swap file, for example when using the same app in multiple tabs. The last writer opened has its data written, as the data gets flushed when each writer is closed.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.FileHandleBase.Kind">
            <summary>
            Returns the type of entry.
            This is 'file' if the associated entry is a file or 'directory'.
            It is used to distinguish files from directories when iterating over the contents of a directory.
            </summary>
            <remarks>
            Note: This API does not have a common <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle">FileSystemHandle</see> type, so this property always returns "file".
            </remarks>
        </member>
        <member name="T:BrowserAPI.Implementation.FileHandleInProcess">
            <summary>
            <para>The <i>FileSystemFileHandle</i> interface of the File System API represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.</para>
            <para>
            Note that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open.
            The queryPermission method of the FileSystemHandle interface can be used to verify permission state before accessing a file.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.FileHandleInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandleInProcess.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>FileSystemFileHandle</i> interface of the File System API represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.</para>
            <para>
            Note that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open.
            The queryPermission method of the FileSystemHandle interface can be used to verify permission state before accessing a file.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.FileHandleInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandleInProcess.Dispose">
            <summary>
            Releases the JS instance for this file handle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.FileHandleInProcess.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandleInProcess.IsSameEntry(BrowserAPI.IFileHandleInProcess,System.Threading.CancellationToken)">
            <summary>
            Compares two file handles to see if the associated entries match.
            </summary>
            <param name="other">The FileHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandleInProcess.GetFile(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Promise which resolves to a File object representing the state on disk of the entry represented by the handle.</para>
            <para>If the file on disk changes or is removed after this method is called, the returned File object will likely be no longer readable.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileHandleInProcess.CreateWritable(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a FileSystemWritableFileStream that can be used to write to a file. The method returns a Promise which resolves to this created stream.</para>
            <para>
            Any changes made through the stream won't be reflected in the file represented by the file handle until the stream has been closed.
            This is typically implemented by writing data to a temporary file, and only replacing the file represented by file handle with the temporary file when the writable file stream is closed.
            </para>
            </summary>
            <param name="keepExistingData">A Boolean. Default false. When set to true if the file exists, the existing file is first copied to the temporary file. Otherwise the temporary file starts out empty.</param>
            <param name="mode">
            A string specifying the locking mode for the writable file stream.
            The default value is "siloed". Possible values are:<br />
            - "exclusive": Only one FileSystemWritableFileStream writer can be opened. Attempting to open subsequent writers before the first writer is closed results in a NoModificationAllowedError exception being thrown.<br />
            - "siloed": Multiple FileSystemWritableFileStream writers can be opened at the same time, each with its own swap file, for example when using the same app in multiple tabs. The last writer opened has its data written, as the data gets flushed when each writer is closed.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.FileSystem">
            <summary>
            <para>
            The <i>File System API</i>
            — with extensions provided via the <see href="https://wicg.github.io/file-system-access/">File System Access API</see> to access files on the device file system —
            allows read, write and file management capabilities.
            </para>
            <para>
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API,
            the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API</see>,
            and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystem.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>
            The <i>File System API</i>
            — with extensions provided via the <see href="https://wicg.github.io/file-system-access/">File System Access API</see> to access files on the device file system —
            allows read, write and file management capabilities.
            </para>
            <para>
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API,
            the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API</see>,
            and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystem.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file and returns a handle for the file.
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to false, so a single fileHandle is returned.
            When multiple files should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystem.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file or multiple files and returns a handle for the file(s).
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to true, so a multiple fileHandles can be returned.
            When only a single file should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystem.ShowSaveFilePicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to save a file. Either by selecting an existing file, or entering a name for a new file.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="suggestedName">A String. The suggested file name.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystem.ShowDirectoryPicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Threading.CancellationToken)">
            <summary>
            Displays a directory picker which allows the user to select a directory.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="mode">A string that defaults to "read" for read-only access or "readwrite" for read and write access to the directory.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystem.StorageManagerGetDirectory(System.Threading.CancellationToken)">
            <summary>
            Is used to obtain a reference to a FileSystemDirectoryHandle object allowing access to a directory and its contents, stored in the origin private file system (OPFS).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemBase.StorageManagerEstimate(System.Threading.CancellationToken)">
            <summary>
            <para>Asks the Storage Manager for how much storage the current origin takes up (usage), and how much space is available (quota).</para>
            <para>This method operates asynchronously, so it returns a Promise which resolves once the information is available. The promise's fulfillment handler is called with an object containing the usage and quota data.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemBase.StorageManagerPersist(System.Threading.CancellationToken)">
            <summary>
            Requests permission to use persistent storage, and returns a Promise that resolves to true if permission is granted and bucket mode is persistent, and false otherwise.
            The browser may or may not honor the request, depending on browser-specific rules.
            (For more details, see the guide to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria#does_browser-stored_data_persist">Storage quotas and eviction criteria</see>.)
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemBase.StorageManagerPersisted(System.Threading.CancellationToken)">
            <summary>
            Returns a Promise that resolves to true if your site's storage bucket is persistent.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.FileSystemInProcess">
            <summary>
            <para>
            The <i>File System API</i>
            — with extensions provided via the <see href="https://wicg.github.io/file-system-access/">File System Access API</see> to access files on the device file system —
            allows read, write and file management capabilities.
            </para>
            <para>
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API,
            the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API</see>,
            and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>
            The <i>File System API</i>
            — with extensions provided via the <see href="https://wicg.github.io/file-system-access/">File System Access API</see> to access files on the device file system —
            allows read, write and file management capabilities.
            </para>
            <para>
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API,
            the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API</see>,
            and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemInProcess.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file and returns a handle for the file.
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to false, so a single fileHandle is returned.
            When multiple files should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemInProcess.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file or multiple files and returns a handle for the file(s).
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to true, so a multiple fileHandles can be returned.
            When only a single file should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemInProcess.ShowSaveFilePicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to save a file. Either by selecting an existing file, or entering a name for a new file.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="suggestedName">A String. The suggested file name.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemInProcess.ShowDirectoryPicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Threading.CancellationToken)">
            <summary>
            Displays a directory picker which allows the user to select a directory.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="mode">A string that defaults to "read" for read-only access or "readwrite" for read and write access to the directory.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileSystemInProcess.StorageManagerGetDirectory(System.Threading.CancellationToken)">
            <summary>
            Is used to obtain a reference to a FileSystemDirectoryHandle object allowing access to a directory and its contents, stored in the origin private file system (OPFS).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.File">
            <summary>
            <para>The <i>File</i> interface provides information about files and allows JavaScript in a web page to access their content.</para>
            <para>File objects are generally retrieved from a FileList object returned as a result of a user selecting files using the &lt;input&gt; element, or from a drag and drop operation's DataTransfer object.</para>
            <para>
            A File object is a specific kind of Blob, and can be used in any context that a Blob can.In particular, the following APIs accept both Blobs and File objects:<br />
            - FileReader<br />
            - URL.createObjectURL()<br />
            - Window.createImageBitmap() and WorkerGlobalScope.createImageBitmap()<br />
            - the body option to fetch()<br />
            - XMLHttpRequest.send()
            </para>
            <para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications">Using files from web applications</see> for more information and examples.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.File.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.File.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>File</i> interface provides information about files and allows JavaScript in a web page to access their content.</para>
            <para>File objects are generally retrieved from a FileList object returned as a result of a user selecting files using the &lt;input&gt; element, or from a drag and drop operation's DataTransfer object.</para>
            <para>
            A File object is a specific kind of Blob, and can be used in any context that a Blob can.In particular, the following APIs accept both Blobs and File objects:<br />
            - FileReader<br />
            - URL.createObjectURL()<br />
            - Window.createImageBitmap() and WorkerGlobalScope.createImageBitmap()<br />
            - the body option to fetch()<br />
            - XMLHttpRequest.send()
            </para>
            <para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications">Using files from web applications</see> for more information and examples.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.File.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.File.DisposeAsync">
            <summary>
            Releases the JS instance for this file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.File.Name">
            <summary>
            Returns the name of the file referenced by the File object.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.File.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.File.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.File.Size">
            <summary>
            The size, in bytes, of the data contained in the Blob object.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.File.GetSize(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.File.Size" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.File.Type">
            <summary>
            A string indicating the MIME type of the data contained in the Blob. If the type is unknown, this string is empty.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.File.GetType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.File.Type" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.File.LastModified">
            <summary>
            Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.File.GetLastModified(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.File.LastModified" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.File.WebkitRelativePath">
            <summary>
            Returns the path the URL of the File is relative to.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.File.GetWebkitRelativePath(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.File.WebkitRelativePath" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.FileBase.Text(System.Threading.CancellationToken)">
            <summary>
            Returns a promise that resolves with a string containing the entire contents of the Blob interpreted as UTF-8 text.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.FileInProcess">
            <summary>
            <para>The <i>File</i> interface provides information about files and allows JavaScript in a web page to access their content.</para>
            <para>File objects are generally retrieved from a FileList object returned as a result of a user selecting files using the &lt;input&gt; element, or from a drag and drop operation's DataTransfer object.</para>
            <para>
            A File object is a specific kind of Blob, and can be used in any context that a Blob can.In particular, the following APIs accept both Blobs and File objects:<br />
            - FileReader<br />
            - URL.createObjectURL()<br />
            - Window.createImageBitmap() and WorkerGlobalScope.createImageBitmap()<br />
            - the body option to fetch()<br />
            - XMLHttpRequest.send()
            </para>
            <para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications">Using files from web applications</see> for more information and examples.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.FileInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.FileInProcess.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>File</i> interface provides information about files and allows JavaScript in a web page to access their content.</para>
            <para>File objects are generally retrieved from a FileList object returned as a result of a user selecting files using the &lt;input&gt; element, or from a drag and drop operation's DataTransfer object.</para>
            <para>
            A File object is a specific kind of Blob, and can be used in any context that a Blob can.In particular, the following APIs accept both Blobs and File objects:<br />
            - FileReader<br />
            - URL.createObjectURL()<br />
            - Window.createImageBitmap() and WorkerGlobalScope.createImageBitmap()<br />
            - the body option to fetch()<br />
            - XMLHttpRequest.send()
            </para>
            <para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications">Using files from web applications</see> for more information and examples.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.FileInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.FileInProcess.Dispose">
            <summary>
            Releases the JS instance for this file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.FileInProcess.Name">
            <summary>
            Returns the name of the file referenced by the File object.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.FileInProcess.Size">
            <summary>
            The size, in bytes, of the data contained in the Blob object.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.FileInProcess.Type">
            <summary>
            A string indicating the MIME type of the data contained in the Blob. If the type is unknown, this string is empty.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.FileInProcess.LastModified">
            <summary>
            Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.FileInProcess.WebkitRelativePath">
            <summary>
            Returns the path the URL of the File is relative to.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.WritableFileStream">
            <summary>
            The <i>FileSystemWritableFileStream</i> interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
            The interface is accessed through the FileSystemFileHandle.createWritable() method.
            </summary>
            <remarks>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.WritableFileStream.DisposeAsync"/> when you are done with it.</para>
            <para>Disposing does <b>not</b> call <see cref="M:BrowserAPI.IWritableFileStream.Close(System.Threading.CancellationToken)"/>. Before disposing this stream should be closed.</para>
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStream.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            The <i>FileSystemWritableFileStream</i> interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
            The interface is accessed through the FileSystemFileHandle.createWritable() method.
            </summary>
            <remarks>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.WritableFileStream.DisposeAsync"/> when you are done with it.</para>
            <para>Disposing does <b>not</b> call <see cref="M:BrowserAPI.IWritableFileStream.Close(System.Threading.CancellationToken)"/>. Before disposing this stream should be closed.</para>
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStream.DisposeAsync">
            <summary>
            Releases the JS instance for this writableFileStream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.WritableFileStream.Locked">
            <summary>
            A boolean indicating whether the WritableStream is locked to a writer.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStream.GetLocked(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.WritableFileStream.Locked" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamBase.Write(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Writes content into the file the method is called on, at the current file cursor offset.</para>
            <para>
            No changes are written to the actual file on disk until the stream has been closed.
            Changes are typically written to a temporary file instead.
            This method can also be used to seek to a byte point within the stream and truncate to modify the total bytes the file contains.
            </para>
            </summary>
            <param name="data">The file data to write</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamBase.Write(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.WritableFileStreamBase.Write(System.String,System.Threading.CancellationToken)" />
            <param name="data">The file data to write</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamBase.Seek(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates the current file cursor offset to the position (in bytes) specified.
            </summary>
            <param name="position">A number specifying the byte position from the beginning of the file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamBase.Truncate(System.Int32,System.Threading.CancellationToken)">
            <summary>
            <para>Resizes the file associated with the stream to be the specified size in bytes.</para>
            <para>If the size specified is larger than the current file size the file is padded with 0x00 bytes.</para>
            <para>
            The file cursor is also updated when truncate() is called.
            If the offset is smaller than the size, it remains unchanged.
            If the offset is larger than size, the offset is set to that size.
            This ensures that subsequent writes do not error.
            </para>
            <para>No changes are written to the actual file on disk until the stream has been closed. Changes are typically written to a temporary file instead.</para>
            </summary>
            <param name="size">A number specifying the number of bytes to resize the stream to.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamBase.Abort(System.Object,System.Threading.CancellationToken)">
            <summary>
            Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be immediately moved to an error state, with any queued writes discarded.
            </summary>
            <param name="reason">A string providing a human-readable reason for the abort.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamBase.Close(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the associated stream. All chunks written before this method is called are sent before the returned promise is fulfilled.</para>
            <para>This is equivalent to getting a WritableStreamDefaultWriter with getWriter(), calling close() on it.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.WritableFileStreamInProcess">
            <summary>
            The <i>FileSystemWritableFileStream</i> interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
            The interface is accessed through the FileSystemFileHandle.createWritable() method.
            </summary>
            <remarks>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.WritableFileStreamInProcess.Dispose"/> when you are done with it.</para>
            <para>Disposing does <b>not</b> call <see cref="M:BrowserAPI.IWritableFileStreamInProcess.Close(System.Threading.CancellationToken)"/>. Before disposing this stream should be closed.</para>
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamInProcess.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            The <i>FileSystemWritableFileStream</i> interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
            The interface is accessed through the FileSystemFileHandle.createWritable() method.
            </summary>
            <remarks>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.WritableFileStreamInProcess.Dispose"/> when you are done with it.</para>
            <para>Disposing does <b>not</b> call <see cref="M:BrowserAPI.IWritableFileStreamInProcess.Close(System.Threading.CancellationToken)"/>. Before disposing this stream should be closed.</para>
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.WritableFileStreamInProcess.Dispose">
            <summary>
            Releases the JS instance for this writableFileStream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.WritableFileStreamInProcess.Locked">
            <summary>
            A boolean indicating whether the WritableStream is locked to a writer.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.GamepadAPI">
            <summary>
            The <i>Gamepad API</i> is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way.
            It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected,
            and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadAPI.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>Gamepad API</i> is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way.
            It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected,
            and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadAPI.Dispose">
            <summary>
            Releases the <see cref="T:BrowserAPI.Implementation.GamepadAPI.EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadAPI.GetGamepads(System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of <see cref="T:BrowserAPI.IGamepad"/> objects, one for each connected gamepad.</para>
            <para>Elements in the array may be <i>null</i> if a gamepad disconnects during a session, so that the remaining gamepads retain the same index.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.Implementation.GamepadAPI.OnGamepadConnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the connected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.GamepadAPI.OnGamepadDisconnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been disconnected.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the disconnected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.GamepadAPIInProcess">
            <summary>
            The <i>Gamepad API</i> is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way.
            It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected,
            and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadAPIInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>Gamepad API</i> is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way.
            It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected,
            and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadAPIInProcess.Dispose">
            <summary>
            Releases the <see cref="T:BrowserAPI.Implementation.GamepadAPIInProcess.EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadAPIInProcess.GetGamepads">
            <summary>
            <para>Returns an array of <see cref="T:BrowserAPI.IGamepadInProcess"/> objects, one for each connected gamepad.</para>
            <para>Elements in the array may be <i>null</i> if a gamepad disconnects during a session, so that the remaining gamepads retain the same index.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.Implementation.GamepadAPIInProcess.OnGamepadConnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the connected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.GamepadAPIInProcess.OnGamepadDisconnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been disconnected.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the disconnected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.Gamepad">
            <summary>
            <para>The <i>Gamepad</i> interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.</para>
            <para>
            A Gamepad object can be returned in one of two ways:
            via the gamepad property of the <see cref="E:BrowserAPI.IGamepadAPI.OnGamepadConnected">gamepadconnected</see> and <see cref="E:BrowserAPI.IGamepadAPI.OnGamepadDisconnected">gamepaddisconnected</see> events,
            or by grabbing any position in the array returned by the <see cref="M:BrowserAPI.IGamepadAPI.GetGamepads(System.Threading.CancellationToken)">Navigator.getGamepads()</see> method.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>Gamepad</i> interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.</para>
            <para>
            A Gamepad object can be returned in one of two ways:
            via the gamepad property of the <see cref="E:BrowserAPI.IGamepadAPI.OnGamepadConnected">gamepadconnected</see> and <see cref="E:BrowserAPI.IGamepadAPI.OnGamepadDisconnected">gamepaddisconnected</see> events,
            or by grabbing any position in the array returned by the <see cref="M:BrowserAPI.IGamepadAPI.GetGamepads(System.Threading.CancellationToken)">Navigator.getGamepads()</see> method.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.DisposeAsync">
            <summary>
            Releases the JS instance for this gamepad.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.Axes">
            <summary>
            <para>An array representing the controls with axes present on the device (e.g., analog thumb sticks).</para>
            <para>Each entry in the array is a floating point value in the range -1.0 – 1.0, representing the axis position from the lowest value (-1.0) to the highest value (1.0).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetAxes(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.Axes" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.Buttons">
            <summary>
            <para>An array of <see cref="T:BrowserAPI.GamepadButton"/> objects representing the buttons present on the device.</para>
            <para>Each entry in the array is 0 if the button is not pressed, and non-zero (typically 1.0) if the button is pressed.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetButtons(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.Buttons" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.Connected">
            <summary>
            <para>A boolean indicating whether the gamepad is still connected to the system.</para>
            <para>If the gamepad is connected, the value is true; if not, it is false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetConnected(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.Connected" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.Id">
            <summary>
            <para>A string containing identifying information about the controller.</para>
            <para>
            The exact syntax is not strictly specified, but in Firefox it will contain three pieces of information separated by dashes (-):<br />
            - Two 4-digit hexadecimal strings containing the USB vendor and product id of the controller<br />
            - The name of the controller as provided by the driver.<br />
            For example, a PS2 controller returned <i>810-3-USB Gamepad</i>.
            </para>
            <para>This information is intended to allow you to find a mapping for the controls on the device as well as display useful feedback to the user.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetId(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.Id" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.Index">
            <summary>
            <para>An integer that is auto-incremented to be unique for each device currently connected to the system.</para>
            <para>This can be used to distinguish multiple controllers; a gamepad that is disconnected and reconnected will retain the same index.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.Index" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.Mapping">
            <summary>
            <para>A string indicating whether the browser has remapped the controls on the device to a known layout.</para>
            <para>
            The currently supported known layouts are:<br />
            - "standard" for the <see href="https://w3c.github.io/gamepad/#remapping">standard gamepad</see>.<br />
            - "xr-standard for the <see href="https://immersive-web.github.io/webxr-gamepads-module/#xr-standard-heading">standard XR gamepad</see>. See also <see href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/gamepad">XRInputSource.gamepad</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetMapping(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.Mapping" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.Timestamp">
            <summary>
            <para>A <see href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp">DOMHighResTimeStamp</see> representing the last time the data for this gamepad was updated.</para>
            <para>
            The idea behind this is to allow developers to determine if the axes and button data have been updated from the hardware.
            The value must be relative to the navigationStart attribute of the PerformanceTiming interface.Values are monotonically increasing,
            meaning that they can be compared to determine the ordering of updates, as newer values will always be greater than or equal to older values.</para>
            <para>Note: This property is not currently supported anywhere.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetTimestamp(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.Timestamp" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gamepad.VibrationActuatorEffects">
            <summary>
            <para>Returns an array of enumerated values representing the different haptic effects that the actuator supports.</para>
            <para>
            Possible included values are:<br />
            - "dual-rumble": A positional rumbling effect created by dual vibration motors in each handle of a controller, which can be vibrated independently.<br />
            - "trigger-rumble": Localized rumbling effects on the surface of a controller's trigger buttons created by vibrational motors located in each button. These buttons most commonly take the form of spring-loaded triggers.<br />
            - "vibration": Simple vibration hardware, which creates a rumbling effect.
            </para>
            <para>If no vibration is supported, an empty array is returned.</para>
            <remarks>Browser support: If the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/vibrationActuator">vibrationActuator</see> property is not supported, an empty array is returned.
            If <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/effects">effects</see> property is not supported, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/type">type</see> property is used instead.</remarks>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gamepad.GetVibrationActuatorEffects(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gamepad.VibrationActuatorEffects" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadBase.PlayVibrationActuatorEffect(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Threading.CancellationToken)">
            <summary>
            Causes the hardware to play a specific vibration effect.
            </summary>
            <param name="type">
            A string representing the desired effect.
            Possible values are "dual-rumble" and "trigger-rumble", and their effects can vary depending on the hardware type.
            Use <i>VibrationActuatorEffects</i> to get the effect types.
            </param>
            <param name="duration">The duration of the effect in milliseconds. Defaults to 0.</param>
            <param name="startDelay">The delay in milliseconds before the effect is started. Defaults to 0.</param>
            <param name="strongMagnitude">The rumble intensity of the low-frequency (strong) rumble motors, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="weakMagnitude">The rumble intensity of the high-frequency (weak) rumble motors, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="leftTrigger">The rumble intensity of the bottom-left front trigger, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="rightTrigger">The rumble intensity of the bottom-right front trigger, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="cancellationToken"></param>
            <returns>
            A promise that resolves with<br />
            - "complete": When the effect successfully completes.<br />
            - "preempted": If the current effect is stopped or replaced by another effect.<br />
            - "none": If vibration is not supported.
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadBase.ResetVibrationActuator(System.Threading.CancellationToken)">
            <summary>
            Stops the hardware from playing an active vibration effect.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            A promise that resolves with<br />
            - "complete": If the effect is successfully reset.<br />
            - "preempted": If the effect was stopped or replaced by another effect.<br />
            - "none": If vibration is not supported.
            </returns>
        </member>
        <member name="T:BrowserAPI.Implementation.GamepadInProcess">
            <summary>
            <para>The <i>Gamepad</i> interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.</para>
            <para>
            A Gamepad object can be returned in one of two ways:
            via the gamepad property of the <see cref="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadConnected">gamepadconnected</see> and <see cref="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadDisconnected">gamepaddisconnected</see> events,
            or by grabbing any position in the array returned by the <see cref="M:BrowserAPI.IGamepadAPIInProcess.GetGamepads">Navigator.getGamepads()</see> method.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>Gamepad</i> interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.</para>
            <para>
            A Gamepad object can be returned in one of two ways:
            via the gamepad property of the <see cref="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadConnected">gamepadconnected</see> and <see cref="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadDisconnected">gamepaddisconnected</see> events,
            or by grabbing any position in the array returned by the <see cref="M:BrowserAPI.IGamepadAPIInProcess.GetGamepads">Navigator.getGamepads()</see> method.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GamepadInProcess.Dispose">
            <summary>
            Releases the JS instance for this gamepad.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.Axes">
            <summary>
            <para>An array representing the controls with axes present on the device (e.g., analog thumb sticks).</para>
            <para>Each entry in the array is a floating point value in the range -1.0 – 1.0, representing the axis position from the lowest value (-1.0) to the highest value (1.0).</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.Buttons">
            <summary>
            <para>An array of <see cref="T:BrowserAPI.GamepadButton"/> objects representing the buttons present on the device.</para>
            <para>Each entry in the array is 0 if the button is not pressed, and non-zero (typically 1.0) if the button is pressed.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.Connected">
            <summary>
            <para>A boolean indicating whether the gamepad is still connected to the system.</para>
            <para>If the gamepad is connected, the value is true; if not, it is false.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.Id">
            <summary>
            <para>A string containing identifying information about the controller.</para>
            <para>
            The exact syntax is not strictly specified, but in Firefox it will contain three pieces of information separated by dashes (-):<br />
            - Two 4-digit hexadecimal strings containing the USB vendor and product id of the controller<br />
            - The name of the controller as provided by the driver.<br />
            For example, a PS2 controller returned <i>810-3-USB Gamepad</i>.
            </para>
            <para>This information is intended to allow you to find a mapping for the controls on the device as well as display useful feedback to the user.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.Index">
            <summary>
            <para>An integer that is auto-incremented to be unique for each device currently connected to the system.</para>
            <para>This can be used to distinguish multiple controllers; a gamepad that is disconnected and reconnected will retain the same index.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.Mapping">
            <summary>
            <para>A string indicating whether the browser has remapped the controls on the device to a known layout.</para>
            <para>
            The currently supported known layouts are:<br />
            - "standard" for the <see href="https://w3c.github.io/gamepad/#remapping">standard gamepad</see>.<br />
            - "xr-standard for the <see href="https://immersive-web.github.io/webxr-gamepads-module/#xr-standard-heading">standard XR gamepad</see>. See also <see href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/gamepad">XRInputSource.gamepad</see>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.Timestamp">
            <summary>
            <para>A <see href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp">DOMHighResTimeStamp</see> representing the last time the data for this gamepad was updated.</para>
            <para>
            The idea behind this is to allow developers to determine if the axes and button data have been updated from the hardware.
            The value must be relative to the navigationStart attribute of the PerformanceTiming interface.Values are monotonically increasing,
            meaning that they can be compared to determine the ordering of updates, as newer values will always be greater than or equal to older values.</para>
            <para>Note: This property is not currently supported anywhere.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GamepadInProcess.VibrationActuatorEffects">
            <summary>
            <para>Returns an array of enumerated values representing the different haptic effects that the actuator supports.</para>
            <para>
            Possible included values are:<br />
            - "dual-rumble": A positional rumbling effect created by dual vibration motors in each handle of a controller, which can be vibrated independently.<br />
            - "trigger-rumble": Localized rumbling effects on the surface of a controller's trigger buttons created by vibrational motors located in each button. These buttons most commonly take the form of spring-loaded triggers.<br />
            - "vibration": Simple vibration hardware, which creates a rumbling effect.
            </para>
            <para>If no vibration is supported, an empty array is returned.</para>
            <remarks>Browser support: If the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/vibrationActuator">vibrationActuator</see> property is not supported, an empty array is returned.
            If <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/effects">effects</see> property is not supported, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/type">type</see> property is used instead.</remarks>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.CallbackGeolocation">
            <summary>
            <para>Callback class for <see cref="M:BrowserAPI.Implementation.Geolocation.GetCurrentPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/> and <see cref="M:BrowserAPI.Implementation.Geolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/>.</para>
            <para>It contains 2 callbacks: <see cref="M:BrowserAPI.Implementation.CallbackGeolocation.Success(BrowserAPI.GeolocationCoordinates)"/> and <see cref="M:BrowserAPI.Implementation.CallbackGeolocation.Error(System.Int32,System.String)"/>.</para>
            </summary>
            <param name="successCallback">callback with parameters GeolocationCoordinates geolocationCoordinates, long timestamp</param>
            <param name="errorCallback">callback with parameters int errorCode, string message</param>
        </member>
        <member name="M:BrowserAPI.Implementation.CallbackGeolocation.#ctor(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String})">
            <summary>
            <para>Callback class for <see cref="M:BrowserAPI.Implementation.Geolocation.GetCurrentPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/> and <see cref="M:BrowserAPI.Implementation.Geolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/>.</para>
            <para>It contains 2 callbacks: <see cref="M:BrowserAPI.Implementation.CallbackGeolocation.Success(BrowserAPI.GeolocationCoordinates)"/> and <see cref="M:BrowserAPI.Implementation.CallbackGeolocation.Error(System.Int32,System.String)"/>.</para>
            </summary>
            <param name="successCallback">callback with parameters GeolocationCoordinates geolocationCoordinates, long timestamp</param>
            <param name="errorCallback">callback with parameters int errorCode, string message</param>
        </member>
        <member name="T:BrowserAPI.Implementation.Geolocation">
            <summary>
            The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Geolocation.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Geolocation.GetCurrentPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Is used to get the current position of the device.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).<br />
            The timestamp is also included.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="F:BrowserAPI.Implementation.Geolocation.watchList">
            <summary>
            Key = int watchId<br />
            Value = DotNetObjectReference&lt;CallbackGeolocation&gt; callbackGeolocation
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Geolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Is used to register a handler function that will be called automatically each time the position of the device changes.
            You can also, optionally, specify an error handling callback function.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </para>
            <para>
            timestamp:<br />
            Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <param name="cancellationToken"></param>
            <returns>WatchId - can be used to <see cref="M:BrowserAPI.Implementation.Geolocation.ClearWatch(System.Int32,System.Threading.CancellationToken)">clear</see> this registration.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Geolocation.ClearWatch(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Is used to unregister location/error monitoring handlers previously installed using <see cref="M:BrowserAPI.Implementation.Geolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="watchId">The id of the registration from <see cref="M:BrowserAPI.Implementation.Geolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.GeolocationBase.GetCurrentPositionAsync(System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Is used to get the current position of the device.
            </summary>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <param name="cancellationToken"></param>
            <returns>
            <para>If successful, a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </para>
            <para>
            timestamp:<br />
            Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </para>
            <para>If error, an object is returned containing an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </returns>
        </member>
        <member name="T:BrowserAPI.Implementation.GeolocationInProcess">
            <summary>
            The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GeolocationInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GeolocationInProcess.GetCurrentPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)">
            <summary>
            Is used to get the current position of the device.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).<br />
            The timestamp is also included.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <returns></returns>
        </member>
        <member name="F:BrowserAPI.Implementation.GeolocationInProcess.watchList">
            <summary>
            Key = int watchId<br />
            Value = DotNetObjectReference&lt;CallbackGeolocation&gt; callbackGeolocation
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GeolocationInProcess.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)">
            <summary>
            Is used to register a handler function that will be called automatically each time the position of the device changes.
            You can also, optionally, specify an error handling callback function.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </para>
            <para>
            timestamp:<br />
            Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <returns>WatchId - can be used to <see cref="M:BrowserAPI.Implementation.GeolocationInProcess.ClearWatch(System.Int32)">clear</see> this registration.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.GeolocationInProcess.ClearWatch(System.Int32)">
            <summary>
            Is used to unregister location/error monitoring handlers previously installed using <see cref="M:BrowserAPI.Implementation.GeolocationInProcess.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)"/>.
            </summary>
            <param name="watchId">The id of the registration from <see cref="M:BrowserAPI.Implementation.GeolocationInProcess.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)"/></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.History">
            <summary>
            <para>The <i>History</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</see> allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.</para>
            <para>There is only one instance of history (It is a singleton.) accessible via the global object <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">history</see>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.History.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>The <i>History</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</see> allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.</para>
            <para>There is only one instance of history (It is a singleton.) accessible via the global object <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">history</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.History.Length">
            <summary>
            Returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.History.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.History.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.History.ScrollRestoration">
            <summary>
            <para>Allows web applications to explicitly set default scroll restoration behavior on history navigation.</para>
            <para>This property can be either "auto" or "manual".</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.History.GetScrollRestoration(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.History.ScrollRestoration" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.History.SetScrollRestoration(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.History.ScrollRestoration" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.History.State">
            <summary>
            Returns an <i>any</i> value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a <i>popstate</i> event.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.History.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.History.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.History.Forward(System.Threading.CancellationToken)">
            <summary>
            <para>This asynchronous method goes to the next page in session history, the same action as when the user clicks the browser's <i>Forward</i> button; this is equivalent to <i>history.go(1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.History.Back(System.Threading.CancellationToken)">
            <summary>
            <para>This asynchronous method goes to the previous page in session history, the same action as when the user clicks the browser's <i>Back</i> button. Equivalent to <i>history.go(-1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.History.Go(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1 for the next page.
            If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect.
            Calling <i>go()</i> without parameters or a value of 0 reloads the current page.
            </summary>
            <param name="delta">
            The position in the history to which you want to move, relative to the current page.
            A negative value moves backwards, a positive value moves forwards.
            So, for example, history.go(2) moves forward two pages and history.go(-2) moves back two pages.
            If no value is passed or if delta equals 0, it has the same result as calling location.reload().</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.History.PushState(System.Object,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Pushes the given data onto the session history stack with the specified title (and, if provided, URL).
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API">Working with the History API</see>.
            </summary>
            <param name="data">
            <para>
            The state object is a JavaScript object which is associated with the new history entry created by pushState().
            Whenever the user navigates to the new state, a popstate event is fired, and the state property of the event contains a copy of the history entry's state object.
            </para>
            <para>The state object can be anything that can be serialized.</para>
            </param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing an empty string is safe against future changes to the method. (Safari uses it as title though)</param>
            <param name="url">
            The new history entry's URL.
            Note that the browser won't attempt to load this URL after a call to pushState(), but it may attempt to load the URL later, for instance, after the user restarts the browser.
            The new URL does not need to be absolute; if it's relative, it's resolved relative to the current URL.
            The new URL must be of the same origin as the current URL; otherwise, pushState() will throw an exception.
            If this parameter isn't specified, it's set to the document's current URL.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.History.ReplaceState(System.Object,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL.
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API">Working with the History API</see>.
            </summary>
            <param name="data">An object which is associated with the history entry passed to the replaceState() method. The state object can be null.</param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing the empty string is traditional, and safe against future changes to the method.</param>
            <param name="url">The URL of the history entry. The new URL must be of the same origin as the current URL; otherwise the replaceState() method throws an exception.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HistoryBase.Dispose">
            <summary>
            Releases the <see cref="T:BrowserAPI.Implementation.HistoryBase.EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HistoryBase.OnPopState">
            <summary>
            <para>
            Is fired when the active history entry changes while the user navigates the session history.
            It changes the current history entry to that of the last page the user visited or,
            if <i>history.pushState()</i> has been used to add a history entry to the history stack, that history entry is used instead.
            </para>
            <para>Parameter is the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History/state">state</see> value as JSON.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.HistoryInProcess">
            <summary>
            <para>The <i>History</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</see> allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.</para>
            <para>There is only one instance of history (It is a singleton.) accessible via the global object <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">history</see>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HistoryInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>The <i>History</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</see> allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.</para>
            <para>There is only one instance of history (It is a singleton.) accessible via the global object <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">history</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HistoryInProcess.Length">
            <summary>
            Returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HistoryInProcess.ScrollRestoration">
            <summary>
            <para>Allows web applications to explicitly set default scroll restoration behavior on history navigation.</para>
            <para>This property can be either "auto" or "manual".</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HistoryInProcess.State">
            <summary>
            Returns an <i>any</i> value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a <i>popstate</i> event.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HistoryInProcess.Forward">
            <summary>
            <para>This asynchronous method goes to the next page in session history, the same action as when the user clicks the browser's <i>Forward</i> button; this is equivalent to <i>history.go(1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HistoryInProcess.Back">
            <summary>
            <para>This asynchronous method goes to the previous page in session history, the same action as when the user clicks the browser's <i>Back</i> button. Equivalent to <i>history.go(-1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HistoryInProcess.Go(System.Int32)">
            <summary>
            Asynchronously loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1 for the next page.
            If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect.
            Calling <i>go()</i> without parameters or a value of 0 reloads the current page.
            </summary>
            <param name="delta">
            The position in the history to which you want to move, relative to the current page.
            A negative value moves backwards, a positive value moves forwards.
            So, for example, history.go(2) moves forward two pages and history.go(-2) moves back two pages.
            If no value is passed or if delta equals 0, it has the same result as calling location.reload().</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HistoryInProcess.PushState(System.Object,System.String,System.String)">
            <summary>
            Pushes the given data onto the session history stack with the specified title (and, if provided, URL).
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API">Working with the History API</see>.
            </summary>
            <param name="data">
            <para>
            The state object is a JavaScript object which is associated with the new history entry created by pushState().
            Whenever the user navigates to the new state, a popstate event is fired, and the state property of the event contains a copy of the history entry's state object.
            </para>
            <para>The state object can be anything that can be serialized.</para>
            </param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing an empty string is safe against future changes to the method. (Safari uses it as title though)</param>
            <param name="url">
            The new history entry's URL.
            Note that the browser won't attempt to load this URL after a call to pushState(), but it may attempt to load the URL later, for instance, after the user restarts the browser.
            The new URL does not need to be absolute; if it's relative, it's resolved relative to the current URL.
            The new URL must be of the same origin as the current URL; otherwise, pushState() will throw an exception.
            If this parameter isn't specified, it's set to the document's current URL.
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HistoryInProcess.ReplaceState(System.Object,System.String,System.String)">
            <summary>
            Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL.
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see Working with the History API.
            </summary>
            <param name="data">An object which is associated with the history entry passed to the replaceState() method. The state object can be null.</param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing the empty string is traditional, and safe against future changes to the method.</param>
            <param name="url">The URL of the history entry. The new URL must be of the same origin as the current URL; otherwise the replaceState() method throws an exception.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLElement">
            <summary>
            The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElement.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.#ctor(System.Threading.Tasks.Task{Microsoft.JSInterop.IJSObjectReference})">
            <summary>
            The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElement.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.DisposeAsync">
            <summary>
            Releases the JS instance for this HTML element.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AccessKey">
            <summary>
            Sets the keystroke which a user can press to jump to a given element.
            </summary>
            <remarks>
            Note: The HTMLElement.accessKey property is seldom used because of its multiple conflicts with already present key bindings in browsers.
            To work around this, browsers implement accesskey behavior if the keys are pressed with other "qualifying" keys (such as Alt + accesskey).
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAccessKey(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AccessKey" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAccessKey(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AccessKey" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AccessKeyLabel">
            <summary>
            Returns a string containing the element's browser-assigned access key (if any); otherwise it returns an empty string.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAccessKeyLabel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AccessKeyLabel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AttributeStyleMap">
            <summary>
            <para>
            Returns a live StylePropertyMap object that contains a list of style properties of the element that are defined in the element's inline style attribute,
            or assigned using the style property of the HTMLElement interface via script.
            </para>
            <para>Shorthand properties are expanded. If you set "border-top: 1px solid black", the longhand properties ("border-top-color", "border-top-style", and "border-top-width") are set instead.</para>
            <para>
            The main difference between <see cref="P:BrowserAPI.Implementation.HTMLElement.Style">style</see> property and <i>attributeStyleMap</i> is that, the <see cref="P:BrowserAPI.Implementation.HTMLElement.Style">style</see> property gets/sets all styles as a string,
            while <i>attributeStyleMap</i> handles styles in a Dictionary&lt;string, string&gt;.
            </para>
            <para>Though this property itself is not writable, you can write and remove inline styles through <see cref="M:BrowserAPI.Implementation.HTMLElement.SetAttributeStyleMap(System.String,System.String,System.Threading.CancellationToken)"/> and <see cref="M:BrowserAPI.Implementation.HTMLElement.RemoveAttributeStyleMap(System.String,System.Threading.CancellationToken)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAttributeStyleMap(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AttributeStyleMap" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAttributeStyleMap(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sets the given css property name to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a css property, use <see cref="M:BrowserAPI.Implementation.HTMLElement.RemoveAttributeStyleMap(System.String,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="name">name of the css property</param>
            <param name="value">value for the given css property</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.RemoveAttributeStyleMap(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the given css property.
            </summary>
            <param name="name">css property name</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Autocapitalize">
            <summary>
            <para>
            Represents the element's capitalization behavior for user input. It is available on all HTML elements, though it doesn't affect all of them, including:<br />
            - &lt;input&lt; and &lt;textarea&lt; elements.<br />
            - Any element with <i>contenteditable</i> set on it.
            </para>
            <para>
            The value is a string that represents the element's capitalization behavior for user input. Valid values are as follows:<br />
            - "none" or "off": No autocapitalization should be applied, that is, all letters should default to lowercase.<br />
            - "sentences" or "on": The first letter of each sentence should default to a capital letter; all other letters should default to lowercase.<br />
            - "words": The first letter of each word should default to a capital letter; all other letters should default to lowercase.<br />
            - "characters": All letters should default to uppercase.
            </para>
            <para>
            <i>autocapitalize</i> doesn't affect behavior when typing on a physical keyboard.
            It affects the behavior of other input mechanisms such as virtual keyboards on mobile devices and voice input.
            This can assist users by making data entry quicker and easier, for example by automatically capitalizing the first letter of each sentence.
            </para>
            <para>It reflects the value of the autocapitalize HTML global attribute.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAutocapitalize(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Autocapitalize" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAutocapitalize(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Autocapitalize" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Autofocus">
            <summary>
            <para>
            Represents a boolean value reflecting the autofocus HTML global attribute, which indicates whether the control should be focused when the page loads,
            or when dialog or popover become shown if specified in an element inside &lt;dialog&gt; elements or elements whose popover attribute is set.
            </para>
            <para>
            Only one form-associated element inside a document, or a &lt;dialog&gt; element, or an element whose popover attribute is set, can have this attribute specified.
            If there are several, the first element with the attribute set inserted, usually the first such element on the page, gets the initial focus.
            </para>
            </summary>
            <remarks>
            Note: Setting this property doesn't set the focus to the associated element:
            it merely tells the browser to focus to it when the element is inserted in the document.
            Setting it after the insertion, that is most of the time after the document load, has no visible effect.
            </remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAutofocus(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Autofocus" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAutofocus(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Autofocus" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ContentEditable">
            <summary>
            <para>
            Specifies whether or not the element is editable. This enumerated attribute can have the following values:<br />
            - "true" indicates that the element is contenteditable.<br />
            - "false" indicates that the element cannot be edited.<br />
            - "plaintext-only" indicates that the element's raw text is editable, but rich text formatting is disabled.
            </para>
            <para>You can use the <see cref="P:BrowserAPI.Implementation.HTMLElement.IsContentEditable"/> property to test the computed boolean value of this property.</para>
            <para>If the attribute is missing or its value is invalid, its value is inherited from its parent element: so the element is editable (or not) based on the parent element.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetContentEditable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ContentEditable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetContentEditable(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ContentEditable" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Dataset">
            <summary>
            <para>Provides read/write access to custom data attributes (data-*) on elements. It exposes a map of strings (DOMStringMap) with an entry for each data-* attribute.</para>
            <para>
            The property name of a custom data attribute is the same as the HTML attribute without the data- prefix.
            Single dashes (-) are removed, and the next ASCII character after a removed dash is capitalized to form the property's camel-cased name.
            </para>
            <para>For writing or removing elements use <see cref="M:BrowserAPI.Implementation.HTMLElement.SetDataset(System.String,System.String,System.Threading.CancellationToken)"/> or <see cref="M:BrowserAPI.Implementation.HTMLElement.RemoveDataset(System.String,System.Threading.CancellationToken)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetDataset(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Dataset" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetDataset(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sets the given data-attribute to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a data-attribute, use <see cref="M:BrowserAPI.Implementation.HTMLElement.RemoveDataset(System.String,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="name">name of the data-attribute without data- prefix</param>
            <param name="value">value for the given data-attribute</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.RemoveDataset(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the given data-attribute.
            </summary>
            <param name="name">data-attribute name</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Dir">
            <summary>
            <para>
            Indicates the text writing directionality of the content of the current element. Possible values are<br />
            - "ltr": Left-to-right writing direction.<br />
            - "rtl": Right-to-left writing direction.<br />
            - "auto": The direction of the element must be determined based on the contents of the element.<br />
            - "": The default value; the directionality is inherited from the parent element.
            </para>
            <para>
            Note that if the dir attribute is unspecified, the element itself may still inherit directionality from its parent.
            However, that inherited directionality is not reflected by this property's value.
            </para>
            <para>
            The text writing directionality of an element is which direction that text goes (for support of different language systems).
            Arabic languages and Hebrew are typical languages using the RTL directionality.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetDir(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Dir" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetDir(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Dir" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Draggable">
            <summary>
            A boolean value indicating if the element can be dragged. It reflects the value of the draggable HTML global attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetDraggable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Draggable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetDraggable(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Draggable" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.EnterKeyHint">
            <summary>
            <para>
            An enumerated property defining what action label (or icon) to present for the enter key on virtual keyboards.
            It reflects the enterkeyhint HTML global attribute and is an enumerated property, only accepting the following values as a string:<br />
            - "enter": Typically indicating inserting a new line.<br />
            - "done": Typically meaning there is nothing more to input and the input method editor (IME) will be closed.<br />
            - "go": Typically meaning to take the user to the target of the text they typed.<br />
            - "next": Typically taking the user to the next field that will accept text.<br />
            - "previous": Typically taking the user to the previous field that will accept text.<br />
            - "search": Typically taking the user to the results of searching for the text they have typed.<br />
            - "send": Typically delivering the text to its target.
            </para>
            <para>If no <i>enterKeyHint</i> value has been specified or if it was set to a different value than the allowed ones, it will return an empty string.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetEnterKeyHint(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.EnterKeyHint" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetEnterKeyHint(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.EnterKeyHint" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Hidden">
            <summary>
            Reflects the value of the element's hidden attribute.<br />
            true - The element is hidden.<br />
            false - The element is not hidden. This is the default value for the attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetHidden(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Hidden" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetHidden(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Hidden" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Inert">
            <summary>
            <para>
            Reflects the value of the element's inert attribute.
            It is a boolean value that, when present, makes the browser "ignore" user input events for the element, including focus events and events from assistive technologies.
            The browser may also ignore page search and text selection in the element.
            This can be useful when building UIs such as modals where you would want to "trap" the focus inside the modal when it's visible.
            </para>
            <para>
            Note that if the inert attribute is unspecified, the element itself may still inherit inertness from its parent.
            However, that inherited inertness is not reflected by this property's value.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetInert(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Inert" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetInert(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Inert" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.InnerText">
            <summary>
            <para>Represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetInnerText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.InnerText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetInnerText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.InnerText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.InputMode">
            <summary>
            <para>
            Reflects the value of the element's inputmode attribute.<br />
            It provides a hint about the type of data that might be entered by the user while editing the element or its contents. This allows the browser to display an appropriate virtual keyboard.<br />
            It is used primarily on &lt;input&gt; elements, but is usable on any element in <see cref="P:BrowserAPI.Implementation.HTMLElement.ContentEditable">contenteditable</see> mode.
            </para>
            <para>
            This attribute may have one of the following values:<br />
            - "decimal": Fractional numeric input keyboard that contains the digits and decimal separator for the user's locale (typically . or ,).<br />
            - "email": A virtual keyboard optimized for entering email addresses. Typically includes the @character as well as other optimizations.<br />
            - "none": No virtual keyboard. This is used when the page implements its own keyboard input control.<br />
            - "numeric": Numeric input keyboard that only requires the digits 0–9. Devices may or may not show a minus key.<br />
            - "search": A virtual keyboard optimized for search input. For instance, the return/submit key may be labeled "Search".<br />
            - "tel": A telephone keypad input that includes the digits 0–9, the asterisk (*), and the pound (#) key.<br />
            - "text": Standard input keyboard for the user's current locale.<br />
            - "url": A keypad optimized for entering URLs. This may have the / key more prominent, for example.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetInputMode(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.InputMode" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetInputMode(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.InputMode" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.IsContentEditable">
            <summary>
            It is true if the contents of the element are editable; otherwise it returns false.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetIsContentEditable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.IsContentEditable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Lang">
            <summary>
            <para>
            Indicates the base language of an element's attribute values and text content, in the form of a RFC 5646: BCP 47 language identifier tag.
            It reflects the element's lang attribute; the xml:lang attribute does not affect this property.
            </para>
            <para>
            Note that if the lang attribute is unspecified, the element itself may still inherit the language from its parent.
            However, that inherited language is not reflected by this property's value.
            </para>
            <para>Common examples include "en" for English, "ja" for Japanese, "es" for Spanish and so on. If unspecified, the value is an empty string.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetLang(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Lang" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetLang(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Lang" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Nonce">
            <summary>
            <para>Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.</para>
            <para>In later implementations, elements only expose their nonce attribute to scripts (and not to side-channels like CSS attribute selectors).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetNonce(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Nonce" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetNonce(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Nonce" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetWidth">
            <summary>
            <para>Returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OffsetWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetHeight">
            <summary>
            <para>Returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OffsetHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetLeft">
            <summary>
            <para>Returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetLeft(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OffsetLeft" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetTop">
            <summary>
            Returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent, the closest positioned ancestor element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetTop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OffsetTop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OffsetParent">
            <summary>
            <para>Returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOffsetParent(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OffsetParent" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OuterText">
            <summary>
            <para>
            Returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.Implementation.HTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOuterText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OuterText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetOuterText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OuterText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Popover">
            <summary>
            <para>Gets/Sets an element's popover state via JavaScript ("auto", "hint", or "manual"), and can be used for feature detection. It reflects the value of the popover global HTML attribute.</para>
            <para>
            Possible values are:<br />
            - "auto": auto popovers can be "light dismissed" — this means that you can hide the popover by clicking outside it or pressing the Esc key.
            Usually, only one auto popover can be shown at a time — showing a second popover when one is already shown will hide the first one.
            The exception to this rule is when you have nested auto popovers.
            See Nested popovers for more details.<br />
            - "hint": hint popovers do not close auto popovers when they are displayed, but will close other hint popovers.
            They can be light dismissed and will respond to close requests.
            Usually they are shown and hidden in response to non-click JavaScript events such as mouseover/mouseout and focus/blur.
            Clicking a button to open a hint popover would cause an open auto popover to light-dismiss.<br />
            - "manual": manual popovers cannot be "light dismissed" and are not automatically closed.
            Popovers must explicitly be displayed and closed using declarative show/hide/toggle buttons or JavaScript.
            Multiple independent manual popovers can be shown simultaneously.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetPopover(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Popover" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetPopover(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Popover" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Spellcheck">
            <summary>
            Represents a boolean value that controls the spell-checking hint. It is available on all HTML elements, though it doesn't affect all of them.
            It reflects the value of the spellcheck HTML global attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetSpellcheck(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Spellcheck" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetSpellcheck(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Spellcheck" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>Returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetStyle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Style" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetStyle(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Style" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.TabIndex">
            <summary>
            <para>
            Represents the tab order of the current element. Tab order is as follows:<br />
            1. Elements with a positive tabIndex. Elements that have identical tabIndex values should be navigated in the order they appear. Navigation proceeds from the lowest tabIndex to the highest tabIndex.<br />
            2. Elements that do not support the tabIndex attribute or support it and assign tabIndex to 0, in the order they appear.<br />
            Elements that are disabled do not participate in the tabbing order.
            </para>
            <para>Values don't need to be sequential, nor must they begin with any particular value. They may even be negative, though each browser trims very large values.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetTabIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.TabIndex" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetTabIndex(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.TabIndex" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Title">
            <summary>
            Represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetTitle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Title" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetTitle(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Title" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Translate">
            <summary>
            Indicates whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.
            It reflects the value of the translate HTML global attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetTranslate(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Translate" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetTranslate(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Translate" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetHasFocus(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.HasFocus" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Click(System.Threading.CancellationToken)">
            <summary>
            <para>Simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Focus(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Sets focus on the specified element, if it can be focused. The focused element is the element that will receive keyboard and similar events by default.</para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Blur(System.Threading.CancellationToken)">
            <summary>
            Removes keyboard focus from the current element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ShowPopover(System.Threading.CancellationToken)">
            <summary>
            <para>Shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HidePopover(System.Threading.CancellationToken)">
            <summary>
            <para>Hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.TogglePopover(System.Threading.CancellationToken)">
            <summary>
            <para>Toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.TogglePopover(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.HTMLElement.TogglePopover(System.Threading.CancellationToken)" />
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
            <param name="cancellationToken"></param>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnCommand">
            <summary>
            <para>
            Fires on an element that is controlled via a button with valid commandForElement and command values, whenever the button is interacted with (e.g., it is clicked).
            </para>
            <para>
            <b>Parameters</b><br />
            - IHTMLElement <i>source</i>: An HTMLButtonElement representing the button that caused this invocation.<br />
            - string <i>command</i>: Representing the command value of the source button.
            </para>
            </summary>
            <remarks>
            Note: Dispose the given IHTMLElement object when you are done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnDrag">
            <summary>
            <para>
            Is fired every few hundred milliseconds as an element or text selection is being dragged by the user.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnDragStart">
            <summary>
            <para>
            Is fired when the user starts dragging an element or text selection.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnDragEnd">
            <summary>
            <para>
            Is fired when a drag operation ends (by releasing a mouse button or hitting the escape key).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnDragEnter">
            <summary>
            <para>
            Is fired when a dragged element or text selection enters a valid drop target.
            The target object is the immediate user selection (the element directly indicated by the user as the drop target), or the &lt;body&gt; element.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnDragLeave">
            <summary>
            <para>
            Is fired when a dragged element or text selection leaves a valid drop target.<br />
            This event is not cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnDragOver">
            <summary>
            <para>
            Is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElement.OnDrop">
            <summary>
            <para>
            Is fired when an element or text selection is dropped on a valid drop target.
            To ensure that the drop event always fires as expected, you should always include a preventDefault() call in the part of your code which handles the dragover event.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Attributes">
            <summary>
            Returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAttributes(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Attributes" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClassList">
            <summary>
            <para>Returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClassList(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ClassList" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClassName">
            <summary>
            Gets/Sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClassName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ClassName" />
            <param name="cancellationToken"></param>
            <returns>A string variable representing the class or space-separated classes of the current element.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetClassName(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ClassName" />
            <param name="value">A string variable representing the class or space-separated classes of the current element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientWidth">
            <summary>
            <para>
            Is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ClientWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientHeight">
            <summary>
            <para>
            Is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ClientHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientLeft(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ClientLeft" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientTop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ClientTop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.CurrentCSSZoom">
            <summary>
            <para>Provides the "effective" CSS zoom of an element, taking into account the zoom applied to the element and all its parent elements.</para>
            <para>
            The value calculated by multiplying the CSS zoom values of the element and all of its parents.
            For example, if three elements with zoom values of 2, 1.5, and 3, are nested within each other, the most deeply nested element will have a currentCSSZoom value of 9.
            If the element doesn't have a CSS box, for example because display: none is set on the element or one of its parents, then the currentCSSZoom is set to 1.
            </para>
            <para>
            Note that some methods, such as Element.getBoundingClientRect(), return dimensions and position that are relative to the viewport, and hence include the effects of CSS zoom.
            Other properties and methods return values that are relative to the element itself, and do not include the effects of zooming.
            These include, for example, client* properties such as Element.clientHeight, scroll*() methods like Element.scroll(), and offset* properties such as HTMLElement.offsetHeight.
            The currentCSSZoom property can be used to scale these values to adjust for the effects of zooming.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetCurrentCSSZoom(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.CurrentCSSZoom" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Id">
            <summary>
            <para>Represents the element's identifier, reflecting the id global attribute.</para>
            <para>If the id value is not the empty string, it must be unique in a document.</para>
            <para>The id is often used with getElementById() to retrieve a particular element. Another common case is to use an element's ID as a selector when styling the document with CSS.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetId(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Id" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetId(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Id" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.IsConnected">
            <summary>
            A boolean indicating whether the node is connected (directly or indirectly) to a Document object.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetIsConnected(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.IsConnected" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.InnerHTML">
            <summary>
            <para>Gets/Sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetInnerHTML(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.InnerHTML" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetInnerHTML(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.InnerHTML" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.OuterHTML">
            <summary>
            <para>
            Gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetOuterHTML(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OuterHTML" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetOuterHTML(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.OuterHTML" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Part">
            <summary>
            Represents the part identifier(s) of the element (i.e., set using the part attribute), returned as a DOMTokenList. These can be used to style parts of a shadow DOM, via the ::part pseudo-element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetPart(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Part" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollWidth">
            <summary>
            <para>Is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ScrollWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollHeight">
            <summary>
            <para>Is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ScrollHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollLeft">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollLeft(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ScrollLeft" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetScrollLeft(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ScrollLeft" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ScrollTop">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetScrollTop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ScrollTop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetScrollTop(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ScrollTop" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Slot">
            <summary>
            Returns the name of the shadow DOM slot the element is inserted in.<br />
            A slot is a placeholder inside a web component that users can fill with their own markup (see Using templates and slots for more information).
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetSlot(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Slot" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetSlot(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Slot" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.LocalName">
            <summary>
            The local part of the qualified name of an element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetLocalName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.LocalName" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.NamespaceURI">
            <summary>
            The namespace URI of the element, or null if the element is not in a namespace.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetNamespaceURI(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.NamespaceURI" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Prefix">
            <summary>
            The namespace prefix of the specified element, or null if no prefix is specified.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetPrefix(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Prefix" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.BaseURI">
            <summary>
            <para>The absolute base URL of the document containing the node.</para>
            <para>
            The base URL is used to resolve relative URLs when the browser needs to obtain an absolute URL,
            for example when processing the HTML &lt;img&gt; element's src attribute or the xlink:href Deprecated or href attributes in SVG.
            </para>
            <para>Although this property is read-only, its value is determined by an algorithm each time the property is accessed, and may change if the conditions changed.</para>
            <para>
            The base URL is determined as follows:<br />
            1. By default, the base URL is the location of the document (as determined by window.location).<br />
            2. If it is an HTML Document and there is a &lt;Base&gt; element in the document, the href value of the first Base element with such an attribute is used instead.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetBaseURI(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.BaseURI" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.TagName">
            <summary>
            <para>The tag name of the element on which it's called.</para>
            <para>
            For example, if the element is an &lt;img&gt;, its tagName property is IMG (for HTML documents; it may be cased differently for XML/XHTML documents).
            Note: You can use the localName property to access the Element's local name — which for the case in the example is img (lowercase).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetTagName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.TagName" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.NodeName">
            <summary>
            <para>The name of the current node as a string.</para>
            <para>
            Values for the different types of nodes are:<br />
            - Attr: The value of Attr.name, that is the qualified name of the attribute<br />
            - CDATASection: The string "#cdata-section"<br />
            - Comment: The string "#comment"<br />
            - Document: The string "#document"<br />
            - DocumentFragment: The string "#document-fragment"<br />
            - DocumentType: The value of DocumentType.name<br />
            - Element: The value of Element.tagName, that is the uppercase name of the element tag if an HTML element, or the lowercase element tag if an XML element (like a SVG or MathML element)<br />
            - ProcessingInstruction: The value of ProcessingInstruction.target<br />
            - Text: The string "#text"
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetNodeName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.NodeName" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.NodeType">
            <summary>
            <para>An integer that identifies what the node is. It distinguishes different kind of nodes from each other, such as elements, text and comments.</para>
            <para>
            Possible values are:<br />
            - 1: ELEMENT_NODE - An Element node like &lt;p&gt; or &lt;div&gt;.<br />
            - 2: ATTRIBUTE_NODE - An Attribute of an Element.<br />
            - 3: TEXT_NODE - The actual Text inside an Element or Attr.<br />
            - 4: CDATA_SECTION_NODE - A CDATASection, such as &lt;!CDATA[[ … ]]&gt;<br />
            - 7: PROCESSING_INSTRUCTION_NODE - A ProcessingInstruction of an XML document, such as &lt;?xml-stylesheet … ?&gt;.<br />
            - 8: COMMENT_NODE - A Comment node, such as &lt;!-- … --&gt;.<br />
            - 9: DOCUMENT_NODE - A Document node.<br />
            - 10: DOCUMENT_TYPE_NODE - A DocumentType node, such as &lt;!doctype html&gt;.<br />
            - 11: DOCUMENT_FRAGMENT_NODE - A DocumentFragment node.
            </para>
            <para>
            The following constants have been deprecated and are not in use anymore:<br />
            - 5: ENTITY_REFERENCE_NODE<br />
            - 6: ENTITY_NODE<br />
            - 12: NOTATION_NODE
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetNodeType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.NodeType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ChildElementCount">
            <summary>
            Returns the number of child elements of this element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetChildElementCount(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ChildElementCount" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Children">
            <summary>
            <para>Returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetChildren(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Children" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.FirstElementChild">
            <summary>
            <para>Returns an element's first child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetFirstElementChild(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.FirstElementChild" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.LastElementChild">
            <summary>
            <para>Returns an element's last child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetLastElementChild(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.LastElementChild" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.PreviousElementSibling">
            <summary>
            Returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetPreviousElementSibling(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.PreviousElementSibling" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.NextElementSibling">
            <summary>
            Returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetNextElementSibling(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.NextElementSibling" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.ParentElement">
            <summary>
            Returns the DOM node's parent Element, or null if the node either has no parent,or its parent isn't a DOM Element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetParentElement(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.ParentElement" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaAtomic">
            <summary>
            <para>Reflects the value of the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.</para>
            <para>
            Value is one of the following values:<br />
            - "false": Assistive technologies will present only the changed node or nodes.<br />
            - "true": Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaAtomic(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaAtomic" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaAtomic(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaAtomic" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaAutoComplete">
            <summary>
            <para>Reflects the value of the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.</para>
            <para>
            Value is one of the following values:<br />
            - "inline": When a user is providing input, text suggesting one way to complete the provided input may be dynamically inserted after the caret.<br />
            - "list": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed.<br />
            - "both": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.<br />
            - "none": When a user is providing input, there is no display of an automatic suggestion that attempts to predict how the user intends to complete the input.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaAutoComplete(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaAutoComplete" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaAutoComplete(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaAutoComplete" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaBrailleLabel">
            <summary>
            Reflects the value of the aria-braillelabel attribute, which defines the ARIA braille label of the element.
            This element label may be used by assistive technologies that can present content in braille, but should only be set if a braille-specific label would improve the user experience.
            The aria-braillelabel contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaBrailleLabel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaBrailleLabel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaBrailleLabel(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaBrailleLabel" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaBrailleRoleDescription">
            <summary>
            Reflects the value of the aria-brailleroledescription attribute, which defines the ARIA braille role description of the element.
            This property may be used to provide an abbreviated version of the aria-roledescription value.
            It should only be used if aria-roledescription is present and in the rare case where it is too verbose for braille.
            The aria-brailleroledescription contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaBrailleRoleDescription(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaBrailleRoleDescription" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaBrailleRoleDescription(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaBrailleRoleDescription" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaBusy">
            <summary>
            <para>Reflects the value of the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is being updated.<br />
            - "false": There are no expected updates for the element.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaBusy(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaBusy" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaBusy(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaBusy" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaChecked">
            <summary>
            <para>Reflects the value of the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is checked.<br />
            - "mixed": Indicates a mixed mode value for a tri-state checkbox or menuitemcheckbox.<br />
            - "false": There are no expected updates for the element.<br />
            - "undefined": The element does not support being checked.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaChecked(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaChecked" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaChecked(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaChecked" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaColCount">
            <summary>
            <para>Reflects the value of the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaColCount(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColCount" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaColCount(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColCount" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaColIndex">
            <summary>
            <para>Reflects the value of the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaColIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColIndex" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaColIndex(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColIndex" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaColIndexText">
            <summary>
            Reflects the value of the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaColIndexText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColIndexText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaColIndexText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColIndexText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaColSpan">
            <summary>
            <para>Reflects the value of the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaColSpan(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColSpan" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaColSpan(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaColSpan" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaCurrent">
            <summary>
            <para>Reflects the value of the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.</para>
            <para>
            Value is one of the following values:<br />
            - "page": Represents the current page within a set of pages.<br />
            - "step": Represents the current step within a process.<br />
            - "location": Represents the current location, for example the current page in a breadcrumbs hierarchy.<br />
            - "date": Represents the current date within a collection of dates.<br />
            - "time": Represents the current time within a set of times.<br />
            - "true": Represents the current item within a set.<br />
            - "false": Does not represent the current item within a set.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaCurrent(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaCurrent" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaCurrent(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaCurrent" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaDescription">
            <summary>
            Reflects the value of the aria-description attribute, which defines a string value that describes or annotates the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaDescription(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaDescription" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaDescription(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaDescription" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaDisabled">
            <summary>
            <para>Reflects the value of the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element and all focusable descendants are disabled, but perceivable, and their values cannot be changed by the user.<br />
            - "false": The element is enabled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaDisabled(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaDisabled" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaDisabled(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaDisabled" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaExpanded">
            <summary>
            <para>Reflects the value of the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The grouping element this element owns or controls is expanded.<br />
            - "false": The grouping element this element owns or controls is collapsed.<br />
            - "undefined": The element does not own or control a grouping element that is expandable.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaExpanded(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaExpanded" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaExpanded(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaExpanded" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaHasPopup">
            <summary>
            <para>Reflects the value of the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.</para>
            <para>
            Value is one of the following values:<br />
            - "false": The element does not have a popup.<br />
            - "true": The element has a popup that is a menu.<br />
            - "menu":The element has a popup that is a menu. <br />
            - "listbox": The element has a popup that is a listbox.<br />
            - "tree": The element has a popup that is a tree.<br />
            - "grid": The element has a popup that is a grid.<br />
            - "dialog": The element has a popup that is a dialog.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaHasPopup(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaHasPopup" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaHasPopup(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaHasPopup" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaHidden">
            <summary>
            <para>Reflects the value of the aria-hidden) attribute, which indicates whether the element is exposed to an accessibility API.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is hidden from the accessibility API.<br />
            - "false": The element is exposed to the accessibility API as if it were rendered.<br />
            - "undefined": The element's hidden state is determined by the user agent based on whether it is rendered.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaHidden(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Hidden" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaHidden(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaHidden" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaInvalid">
            <summary>
            <para>
            Reflects the value of the aria-invalid attribute.
            Relevant for the application, checkbox, combobox, gridcell, listbox, radiogroup, slider, spinbutton, textbox, and tree roles,
            it indicates to the accessibility API whether the entered value does not conform to the format expected by the application.
            </para>
            <para>
            If the attribute is not present, or is set to the empty string, assistive technology will treat the value as if it were set to false.
            If the attribute is present but set to a value other than false, grammar, spelling or the empty string (""), assistive technology treats the value as true.
            The property reflects the attribute value as set, not as handled by assistive technology.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is invalid.<br />
            - "false": The element is not in an invalid state.<br />
            - "grammar": The element is in an invalid state because grammatical error was detected.<br />
            - "spelling": The element is in an invalid state because spelling error was detected.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaInvalid(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaInvalid" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaInvalid(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaInvalid" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaKeyShortcuts">
            <summary>
            Reflects the value of the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaKeyShortcuts(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaKeyShortcuts" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaKeyShortcuts(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaKeyShortcuts" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaLabel">
            <summary>
            Reflects the value of the aria-label attribute, which defines a string value that labels the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaLabel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaLabel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaLabel(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaLabel" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaLevel">
            <summary>
            <para>Reflects the value of the aria-level attribute, which defines the hierarchical level of an element within a structure.</para>
            <para>Note: Where possible use an HTML h1 or other correct heading level as these have built in semantics and do not require ARIA attributes.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaLevel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaLevel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaLevel(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaLevel" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaLive">
            <summary>
            <para>
            Reflects the value of the aria-live attribute, which indicates that an element will be updated,
            and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.
            </para>
            <para>
            Value is one of the following values:<br />
            - "assertive": Indicates that updates to the region have the highest priority and should be presented to the user immediately.<br />
            - "off": Indicates that updates to the region should not be presented to the user unless the user is currently focused on that region.<br />
            - "polite": Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaLive(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaLive" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaLive(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaLive" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaModal">
            <summary>
            <para>
            Reflects the value of the aria-modal attribute, which indicates whether an element is modal when displayed.
            Applying the aria-modal property to an element with role="dialog" replaces the technique of using aria-hidden on the background for informing assistive technologies that content outside a dialog is inert.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is modal.<br />
            - "false": The element is not modal.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaModal(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaModal" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaModal(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaModal" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaMultiline">
            <summary>
            <para>Reflects the value of the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": This is a multi-line text box.<br />
            - "false": This is a single-line text box.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaMultiline(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaMultiline" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaMultiline(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaMultiline" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaMultiSelectable">
            <summary>
            <para>Reflects the value of the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.</para>
            <para>Note: Where possible use an HTML &lt;select&gt; element as this has built in semantics and does not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": More than one item may be selected at a time.<br />
            - "false": Only one item may be selected.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaMultiSelectable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaMultiSelectable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaMultiSelectable(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaMultiSelectable" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaOrientation">
            <summary>
            <para>Reflects the value of the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.</para>
            <para>
            Value is one of the following values:<br />
            - "horizontal": The element is horizontal.<br />
            - "vertical": The element is vertical.<br />
            - "undefined": The element's orientation is unknown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaOrientation(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaOrientation" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaOrientation(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaOrientation" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaPlaceholder">
            <summary>
            <para>Reflects the value of the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaPlaceholder(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaPlaceholder" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaPlaceholder(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaPlaceholder" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaPosInSet">
            <summary>
            <para>Reflects the value of the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaPosInSet(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaPosInSet" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaPosInSet(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaPosInSet" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaPressed">
            <summary>
            <para>Reflects the value of the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="button" or the &lt;button&gt; element as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is pressed.<br />
            - "false": The element supports being pressed but is not currently pressed.<br />
            - "mixed": Indicates a mixed mode value for a tri-state toggle button.<br />
            - "undefined": The element does not support being pressed.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaPressed(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaPressed" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaPressed(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaPressed" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaReadOnly">
            <summary>
            <para>Reflects the value of the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The user cannot change the value of the element.<br />
            - "false": The user can set the value of the element.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaReadOnly(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaReadOnly" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaReadOnly(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaReadOnly" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaRequired">
            <summary>
            <para>Reflects the value of the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": Users need to provide input on an element before a form is submitted.<br />
            - "false": User input is not necessary to submit the form.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaRequired(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRequired" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaRequired(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRequired" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaRoleDescription">
            <summary>
            Rreflects the value of the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaRoleDescription(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRoleDescription" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaRoleDescription(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRoleDescription" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaRowCount">
            <summary>
            <para>Reflects the value of the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaRowCount(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowCount" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaRowCount(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowCount" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaRowIndex">
            <summary>
            <para>Reflects the value of the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaRowIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowIndex" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaRowIndex(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowIndex" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaRowIndexText">
            <summary>
            Reflects the value of the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaRowIndexText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowIndexText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaRowIndexText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowIndexText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaRowSpan">
            <summary>
            <para>Reflects the value of the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaRowSpan(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowSpan" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaRowSpan(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaRowSpan" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaSelected">
            <summary>
            <para>Reflects the value of the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The item is selected.<br />
            - "false": The item is not selected.<br />
            - "undefined": The item is not selectable.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaSelected(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaSelected" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaSelected(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaSelected" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaSetSize">
            <summary>
            <para>Reflects the value of the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaSetSize(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaSetSize" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaSetSize(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaSetSize" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaSort">
            <summary>
            <para>Reflects the value of the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.</para>
            <para>
            Value is one of the following values:<br />
            - "ascending": Items are sorted in ascending order by this column.<br />
            - "descending": Items are sorted in descending order by this column.<br />
            - "none": There is no defined sort applied to the column.<br />
            - "other": A sort algorithm other than ascending or descending has been applied.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaSort(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaSort" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaSort(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaSort" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaValueMax">
            <summary>
            <para>Reflects the value of the aria-valuemax attribute, which defines the maximum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaValueMax(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueMax" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaValueMax(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueMax" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaValueMin">
            <summary>
            <para>Reflects the value of the aria-valuemin attribute, which defines the minimum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaValueMin(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueMin" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaValueMin(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueMin" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaValueNow">
            <summary>
            <para>Reflects the value of the aria-valuenow attribute, which defines the current value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaValueNow(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueNow" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaValueNow(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueNow" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.AriaValueText">
            <summary>
            Reflects the value of the aria-valuetext attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAriaValueText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAriaValueText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.AriaValueText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElement.Role">
            <summary>
            <para>Returns the explicitly set WAI-ARIA role for the element.</para>
            <para>
            All HTML elements have an implicit ARIA role, even if that role is generic.
            This semantic association allows tools to present and support interaction with the object in a manner that is consistent with user expectations about other objects of that type.
            The role attribute is used to explicitly set the element's ARIA role, overriding the implicit role.
            For example, a &lt;ul&gt;, which has an implicit list role, might have role="treegrid" explicitly set.
            The role property reflects the explicitly set value of the role attribute—in this case treegrid; it does not return the element's implicit list role unless explicitly set.
            </para>
            <para>The full list of defined ARIA roles can be found on the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles">ARIA roles</see> reference page.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetRole(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Role" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetRole(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLElement.Role" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.CheckVisibility(System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            Checks whether the element is visible. The method returns false in either of the following situations:<br />
            - The element doesn't have an associated box, for example because the CSS display property is set to 'none' or 'contents'.<br />
            - The element is not being rendered because the element or an ancestor element sets the 'content-visibility' property to 'hidden'.
            </para>
            <para>
            The optional parameter enables additional checks to test for other interpretations of what "visible" means.
            For example, you can further check whether an element has an opacity of 0, if the value of the element visibility property makes it invisible,
            or if the element content-visibility property has a value of auto and its rendering is currently being skipped.
            </para>
            </summary>
            <param name="contentVisibilityAuto">true to check if the element content-visibility property has (or inherits) the value auto, and it is currently skipping its rendering. false by default.</param>
            <param name="opacityProperty">true to check if the element opacity property has (or inherits) a value of 0. false by default.</param>
            <param name="visibilityProperty">true to check if the element is invisible due to the value of its visibility property. false by default.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ComputedStyleMap(System.Threading.CancellationToken)">
            <summary>
            Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetBoundingClientRect(System.Threading.CancellationToken)">
            <summary>
            Returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetClientRects(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Matches(System.String,System.Threading.CancellationToken)">
            <summary>
            Tests whether the element would be selected by the specified CSS selector.
            </summary>
            <param name="selectors">A string containing valid CSS selectors to test the Element against.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.IsDefaultNamespace(System.String,System.Threading.CancellationToken)">
            <summary>
            Accepts a namespace URI as an argument. It returns a boolean value that is true if the namespace is the default namespace on the given node and false if not.
            </summary>
            <param name="namespaceURI">A string representing the namespace against which the element will be checked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.LookupPrefix(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a string containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the first prefix is returned.</para>
            <para>If the node is a <i>DocumentType</i> or a <i>DocumentFragment</i>, it returns null.</para>
            </summary>
            <param name="namespace">A string containing the namespace to look the prefix up.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.LookupNamespaceURI(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            Takes a prefix as parameter and returns the namespace URI associated with it on the given node if found (and null if not).
            This method's existence allows Node objects to be passed as a namespace resolver to <i>XPathEvaluator.createExpression()</i> and <i>XPathEvaluator.evaluate()</i>.
            </para>
            <para>
            It returns a string containing the namespace URI corresponding to the prefix.<br />
            - Always returns null if the node is a DocumentFragment, DocumentType, Document with no documentElement, or Attr with no associated element.<br />
            - If prefix is "xml", the return value is always "http://www.w3.org/XML/1998/namespace".<br />
            - If prefix is "xmlns", the return value is always "http://www.w3.org/2000/xmlns/".<br />
            - If the prefix is null, the return value is the default namespace URI.<br />
            - If the prefix is not found, the return value is null.
            </para>
            </summary>
            <param name="prefix">The prefix to look for.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Normalize(System.Threading.CancellationToken)">
            <summary>
            Puts the specified node and all of its sub-tree into a normalized form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>
            Is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReleasePointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.Implementation.HTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HasPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Scroll(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ScrollTo(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Scrolls to a particular set of coordinates inside a given element.
            </summary>
            <param name="x">The pixel along the horizontal axis of the element that you want displayed in the upper left.</param>
            <param name="y">The pixel along the vertical axis of the element that you want displayed in the upper left.</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly. This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ScrollBy(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ScrollIntoView(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will be null.
            </summary>
            <param name="qualifiedName">The name of the attribute whose value you want to get.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAttributeNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            Returns the string value of the attribute with the specified namespace and name.
            If the named attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.
            </para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <remarks>
            Note: Earlier versions of the DOM specification had this method described as returning an empty string for non-existent attributes, but it was not typically implemented this way since null makes more sense.
            The DOM4 specification now says this method should return null for non-existent attributes.
            </remarks>
            <param name="namespace">The namespace in which to look for the specified attribute.</param>
            <param name="qualifiedName">The name of the attribute to look for.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetAttributeNames(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.</para>
            <para>Using <i>getAttributeNames()</i> along with <see cref="M:BrowserAPI.Implementation.HTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)"/>, is a memory-efficient and performant alternative to <see cref="P:BrowserAPI.Implementation.HTMLElement.Attributes"/>.</para>
            <para>
            The names returned by <i>getAttributeNames()</i> are qualified attribute names,
            meaning that attributes with a namespace prefix have their names returned with that namespace prefix (not the actual namespace), followed by a colon, followed by the attribute name (for example, xlink:href),
            while any attributes which have no namespace prefix have their names returned as-is (for example, href).
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAttribute(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.</para>
            <para>To get the current value of an attribute, use <see cref="M:BrowserAPI.Implementation.HTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)"/>; to remove an attribute, call <see cref="M:BrowserAPI.Implementation.HTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)"/>.</para>
            <para>Boolean attributes are considered to be true if they're present on the element at all. You should set value to the empty string ("") or the attribute's name, with no leading or trailing whitespace.</para>
            <para>
            Since the specified value gets converted into a string, specifying null doesn't necessarily do what you expect.
            Instead of removing the attribute or setting its value to be null, it instead sets the attribute's value to the string "null".
            If you wish to remove an attribute, call <see cref="M:BrowserAPI.Implementation.HTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute whose value is to be set.
            The attribute name is automatically converted to all lower-case when setAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="value">A string containing the value to assign to the attribute. Any non-string value specified is converted automatically into a string.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.SetAttributeNS(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Adds a new attribute or changes the value of an attribute with the given namespace and name.</para>
            <para>f you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElement.SetAttribute(System.String,System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">A string identifying the attribute by its qualified name; that is, a namespace prefix followed by a colon followed by a local name.</param>
            <param name="value">The desired string value of the new attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ToggleAttribute(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute to be toggled.
            The attribute name is automatically converted to all lower-case when toggleAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="force">
            A boolean value which has the following effects:<br />
            - if not specified at all, the toggleAttribute method "toggles" the attribute named name — removing it if it is present, or else adding it if it is not present<br />
            - if true, the toggleAttribute method adds an attribute named name<br />
            - if false, the toggleAttribute method removes the attribute named name
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the attribute with the specified name from the element.
            </summary>
            <param name="qualifiedName">A string specifying the name of the attribute to remove from the element. If the specified attribute does not exist, removeAttribute() returns without generating an error.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.RemoveAttributeNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified attribute with the specified namespace from an element.</para>
            <para>If you are working with HTML and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <param name="namespace">A string that contains the namespace of the attribute.</param>
            <param name="qualifiedName">A string that names the attribute to be removed from the current node.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HasAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="qualifiedName">A string representing the name of the attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HasAttributeNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a boolean value indicating whether the current element has the specified attribute with the specified namespace.</para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElement.HasAttribute(System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">The name of the attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.HasAttributes(System.Threading.CancellationToken)">
            <summary>
            Returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetElementsByClassName(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array which contains every descendant element which has the specified class name or names.</para>
            <para>The method getElementsByClassName() on the Document interface works essentially the same way, except it acts on the entire document, starting at the document root.</para>
            </summary>
            <param name="className">A string containing one or more class names to match on, separated by whitespace.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetElementsByTagName(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of elements with the given tag name. All descendants of the specified element are searched, but not the element itself.</para>
            <para>
            When called on an HTML element in an HTML document, getElementsByTagName lower-cases the argument before searching for it.
            This is undesirable when trying to match camel-cased SVG elements (such as &lt;linearGradient&gt;) in an HTML document.
            Instead, use <see cref="M:BrowserAPI.Implementation.HTMLElement.GetElementsByTagNameNS(System.String,System.String,System.Threading.CancellationToken)"/>, which preserves the capitalization of the tag name.
            </para>
            <para>Element.getElementsByTagName is similar to Document.getElementsByTagName(), except that it only searches for elements that are descendants of the specified element.</para>
            </summary>
            <param name="qualifiedName">The qualified name to look for. The special string "*" represents all elements. For compatibility with XHTML, lower-case should be used.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.GetElementsByTagNameNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an array of elements with the given tag name belonging to the given namespace.
            It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.
            </summary>
            <param name="namespace">
            The namespace URI of elements to look for (see Element.namespaceURI and Attr.namespaceURI).
            For example, if you need to look for XHTML elements, use the XHTML namespace URI, http://www.w3.org/1999/xhtml.
            </param>
            <param name="qualifiedName">Either the local name of elements to look for or the special value "*", which matches all elements (see Element.localName and Attr.localName).</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.QuerySelector(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.QuerySelectorAll(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an array representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector#escaping_attribute_values">Escaping attribute values</see> for an example.
            </para>
            <para>
            The selectors are applied to the entire document, not just the particular element on which querySelectorAll() is called.
            To restrict the selector to the element on which querySelectorAll() is called, include the :scope pseudo-class at the start of the selector.
            See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll#selector_scope">selector scope</see> example.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Closest(System.String,System.Threading.CancellationToken)">
            <summary>
            Traverses the element and its parents (heading toward the document root) until it finds a node that matches the specified CSS selector.
            </summary>
            <param name="selectors">A string of valid CSS selectors to match the Element and its ancestors against.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Before(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings in the children list of this Element's parent, just before this Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Before(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects in the children list of this Element's parent, just before this Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.After(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings in the children list of the Element's parent, just after the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.After(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects in the children list of the Element's parent, just after the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Prepend(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings before the first child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Prepend(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects before the first child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.AppendChild(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            <para>Adds a node to the end of the list of children of a specified parent node.</para>
            <para>Note: If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position.</para>
            <para>If the given child is a DocumentFragment, the entire contents of the DocumentFragment are moved into the child list of the specified parent node.</para>
            <para>appendChild() returns the newly appended node, or if the child is a DocumentFragment, the emptied fragment.</para>
            <para>Note: Unlike this method, the Element.append() method supports multiple arguments and appending strings. You can prefer using it if your node is an element.</para>
            </summary>
            <param name="node">The node to append to the given parent node</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Append(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings after the last child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Append(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects after the last child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.InsertAdjacentElement(System.String,BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Inserts a given element node at a given position relative to the element it is invoked upon.
            </summary>
            <param name="position">
            A string representing the position relative to the targetElement; must match (case-insensitively) one of the following strings:<br />
            - "beforebegin": Before the targetElement itself.<br />
            - "afterbegin": Just inside the targetElement, before its first child.<br />
            - "beforeend": Just inside the targetElement, after its last child.<br />
            - "afterend": After the targetElement itself.
            </param>
            <param name="htmlElement">The element to be inserted into the tree.</param>
            <param name="cancellationToken"></param>
            <returns>true if element was inserted, false if the insertion failed.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.InsertAdjacentHTML(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Parses the specified input as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position.
            </summary>
            <remarks>
            Warning: This method parses its input as HTML or XML, writing the result into the DOM.
            APIs like this are known as injection sinks, and are potentially a vector for cross-site-scripting (XSS) attacks, if the input originally came from an attacker.
            </remarks>
            <param name="position">
            A string representing the position relative to the element. Must be one of the following strings:<br />
            - "beforebegin": Before the element. Only valid if the element is in the DOM tree and has a parent element.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element. Only valid if the element is in the DOM tree and has a parent element.
            </param>
            <param name="html">A TrustedHTML instance or string defining the HTML or XML to be parsed.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.InsertAdjacentText(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Given a relative position and a string, inserts a new text node at the given position relative to the element it is called from.
            </summary>
            <param name="position">
            A string representing the position relative to the element the method is called from; must be one of the following strings:<br />
            - "beforebegin": Before the element itself.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element itself.
            </param>
            <param name="data">A string from which to create a new text node to insert at the given position where relative to the element the method is called from.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.RemoveChild(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Removes a child node from the DOM.
            </summary>
            <remarks>
            Note: As long as a reference is kept on the removed child, it still exists in memory, but is no longer part of the DOM. It can still be reused later in the code.
            If the return value of removeChild() is not stored, and no other reference is kept, it will be automatically deleted from memory after a short time.
            </remarks>
            <param name="node">A Node that is the child node to be removed from the DOM.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Remove(System.Threading.CancellationToken)">
            <summary>
            Removes the element from its parent node.
            If it has no parent node, calling remove() does nothing.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReplaceChild(BrowserAPI.IHTMLElement,BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <remarks>
            Note: The parameter order, new before old, is unusual. <see cref="M:BrowserAPI.Implementation.HTMLElement.ReplaceWith(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)"/>, applying only to nodes that are elements, may be easier to read and use.
            </remarks>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChild">The child to be replaced.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReplaceChild(BrowserAPI.IHTMLElement,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChildIndex">The zero based index of the child to be replaced.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReplaceWith(System.String[],System.Threading.CancellationToken)">
            <summary>
            Replaces this Element in the children list of its parent with a set of strings. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to replace.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReplaceWith(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Replaces this Element in the children list of its parent with a set of Node objects.
            </summary>
            <param name="nodes">A set of Node objects to replace.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReplaceChildren(System.String[],System.Threading.CancellationToken)">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of strings to replace the Element's existing children with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.ReplaceChildren(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of Node objects to replace the Element's existing children with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.CloneNode(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a duplicate of the node on which this method was called. Its parameter controls if the subtree contained in a node is also cloned or not.</para>
            <para>
            Cloning a node copies all of its attributes and their values, including intrinsic (inline) listeners.
            It does not copy event listeners added using addEventListener() or those assigned to element properties (e.g., node.onclick = someFunction).
            Additionally, for a &lt;canvas&gt; element, the painted image is not copied.
            </para>
            </summary>
            <remarks>
            Warning: cloneNode() may lead to duplicate element IDs in a document!
            If the original node has an id attribute, and the clone will be placed in the same document, then you should modify the clone's ID to be unique.
            Also, name attributes may need to be modified, depending on whether duplicate names are expected.</remarks>
            <param name="deep">
            <para>If true, then the node and its whole subtree, including text that may be in child Text nodes, is also copied.</para>
            <para>If false, only the node will be cloned. The subtree, including any text that the node contains, is not cloned.</para>
            <para>Note that deep has no effect on void elements, such as the &lt;img&gt; and &lt;input&gt; elements.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.IsSameNode(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Is a legacy alias the for the === strict equality operator. That is, it tests whether two nodes are the same (in other words, whether they reference the same object).
            </summary>
            <param name="other">The Node to test against.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.IsEqualNode(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Tests whether two nodes are equal.
            Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on.
            The specific set of data points that must match varies depending on the types of the nodes.
            </summary>
            <param name="other">The Node to compare equality with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.Contains(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Returns a boolean value indicating whether a node is a descendant of a given node, that is the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.
            </summary>
            <remarks>Note: A node is contained inside itself.</remarks>
            <param name="other">The Node to test with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElement.CompareDocumentPosition(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            <para>Reports the position of its argument node relative to the node on which it is called.</para>
            <para>
            It returns an integer value representing otherNode's position relative to node as a bitmask combining the following constant properties of Node:<br />
            - 1 (Node.DOCUMENT_POSITION_DISCONNECTED): Both nodes are in different documents or different trees in the same document.<br />
            - 2 (Node.DOCUMENT_POSITION_PRECEDING): otherNode precedes the node in either a pre-order depth-first traversal of a tree containing both (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 4 (Node.DOCUMENT_POSITION_FOLLOWING): otherNode follows the node in either a pre-order depth-first traversal of a tree containing both (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 8 (Node.DOCUMENT_POSITION_CONTAINS): otherNode is an ancestor of the node.<br />
            - 16 (Node.DOCUMENT_POSITION_CONTAINED_BY): otherNode is a descendant of the node.<br />
            - 32 (Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC): The result relies upon arbitrary and/or implementation-specific behavior and is not guaranteed to be portable.
            </para>
            <para>
            Zero or more bits can be set, depending on which scenarios apply.
            For example, if otherNode is located earlier in the document and contains the node on which compareDocumentPosition() was called,
            then both the DOCUMENT_POSITION_CONTAINS and DOCUMENT_POSITION_PRECEDING bits would be set, producing a value of 10 (0x0A).
            </para>
            </summary>
            <param name="other">The Node for which position should be reported, relative to the node.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementBase.RequestFullscreen(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Issues an asynchronous request to make the element be displayed in fullscreen mode.</para>
            <para>
            It's not guaranteed that the element will be put into full screen mode.
            If permission to enter full screen mode is granted, the returned Promise will resolve and the element will receive a fullscreenchange event to let it know that it's now in full screen mode.
            If permission is denied, the promise is rejected and the element receives a fullscreenerror event instead.
            If the element has been detached from the original document, then the document receives these events instead.
            </para>
            </summary>
            <param name="navigationUI">
            Controls whether or not to show navigation UI while the element is in fullscreen mode.
            The default value is "auto", which indicates that the browser should decide what to do.<br />
            - "hide": The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.<br />
            - "show": The browser will present page navigation controls and possibly other user interface;
                      the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface..<br />
            - "auto": The browser will choose which of the above settings to apply. This is the default value.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementBase.RequestPointerLock(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Lets you asynchronously ask for the pointer to be locked on the given element.
            To track the success or failure of the request, it is necessary to listen for the pointerlockchange and pointerlockerror events at the Document level.
            </summary>
            <param name="unadjustedMovement">Disables OS-level adjustment for mouse acceleration, and accesses raw mouse input instead. The default value is false; setting it to true will disable mouse acceleration.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnChange">
            <summary>
            <para>
            Is fired for &lt;input&gt;, &lt;select&gt;, and &lt;textarea&gt; elements when the user modifies the element's value.
            Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.
            </para>
            <para>
            Depending on the kind of element being changed and the way the user interacts with the element, the change event fires at a different moment:<br />
            - When a &lt;input type="checkbox"&gt; element is checked or unchecked (by clicking or using the keyboard);<br />
            - When a &lt;input type="radio"&gt; element is checked (but not when unchecked);<br />
            - When the user commits the change explicitly (e.g., by selecting a value from a &lt;select&gt;'s dropdown with a mouse click, by selecting a date from a date picker for &lt;input type="date"&gt;, by selecting a file in the file picker for &lt;input type="file"&gt;, etc.);<br />
            - When the element loses focus after its value was changed: for elements where the user's interaction is typing rather than selection, such as a &lt;textarea&gt; or the text, search, url, tel, email, or password types of the &lt;input&gt; element.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnLoad">
            <summary>
            <para>
            Fires for elements containing a resource when the resource has successfully loaded.
            Currently, the list of supported HTML elements are: &lt;body&gt;, &lt;embed&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;link&gt;, &lt;object&gt;, &lt;script&gt;, &lt;style&gt;, and &lt;track&gt;.
            </para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
            <remarks>
            Note: The load event on HTMLBodyElement is actually an alias for the window.onload event.
            Therefore, the load event will only fire on the &lt;body&gt; element once all of the document's resources have loaded or errored.
            However, for the sake of clarity, it is recommended that the event handler is attached to the window object directly rather than on HTMLBodyElement.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnError">
            <summary>
            <para>Is fired on an element when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.</para>
            <para>This event is not cancelable and does not bubble.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnToggle">
            <summary>
            <para>
            Fires on a popover element, &lt;dialog&gt; element, or &lt;details&gt; element just after it is shown or hidden.<br />
            - If the element is transitioning from hidden to showing, the event.oldState property will be set to closed and the event.newState property will be set to open.<br />
            - If the element is transitioning from showing to hidden, then event.oldState will be open and event.newState will be closed.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>oldState</i>: either "open" or "closed", representing the state the element is transitioning to.<br />
            - string <i>newState</i>: either "open" or "closed", representing the state the element is transitioning from.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnBeforeToggle">
            <summary>
            <para>
            Fires on a popover or &lt;dialog&gt; element just before it is shown or hidden.<br />
            - If the element is transitioning from hidden to showing, the event.oldState property will be set to closed and the event.newState property will be set to open.<br />
            - If the element is transitioning from showing to hidden, then event.oldState will be open and event.newState will be closed.
            </para>
            <para>This event is cancelable when an element is toggled to open ("show") but not when the element is closing.</para>
            <para>
            Among other things, this event can be used to:<br />
            - prevent an element from being shown.<br />
            - add or remove classes or properties from the element or associated elements, for example to control the animation behavior of a dialog as it is opened and closed.<br />
            - clear the state of the element before it is opened or after it is hidden, for example to reset a dialog form and return value to an empty state, or hide any nested manual popovers when reopening a popup.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>oldState</i>: either "open" or "closed", representing the state the element is transitioning to.<br />
            - string <i>newState</i>: either "open" or "closed", representing the state the element is transitioning from.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitionStart">
            <summary>
            <para>Is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitionEnd">
            <summary>
            <para>
            Is fired when a CSS transition has completed.
            In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
            </para>
            <para>
            The <i>transitionend</i> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state.
            If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired.
            If the transitioncancel event is fired, the transitionend event will not fire.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitionRun">
            <summary>
            <para>Is fired when a CSS transition is first created, i.e. before any transition-delay has begun.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnTransitionCancel">
            <summary>
            <para>Is fired when a CSS transition is canceled.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationStart">
            <summary>
            <para>
            Is fired when a CSS Animation has started.
            If there is an animation-delay, this event will fire once the delay period has expired.
            A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationEnd">
            <summary>
            <para>
            Is fired when a CSS Animation has completed.
            If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationIteration">
            <summary>
            <para>
            Is fired when an iteration of a CSS Animation ends, and another one begins.
            This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementBase.OnAnimationCancel">
            <summary>
            <para>
            Is fired when a CSS Animation unexpectedly aborts.
            In other words, any time it stops running without sending an animationend event.
            This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS.
            Therefore, either directly or because any of its containing nodes are hidden.
            </para>
            <para>An event handler for this event can be added by setting the onanimationcancel property, or using addEventListener().</para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLElementInProcess">
            <summary>
            The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Dispose">
            <summary>
            Releases the JS instance for this HTML element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AccessKey">
            <summary>
            Sets the keystroke which a user can press to jump to a given element.
            </summary>
            <remarks>
            Note: The HTMLElement.accessKey property is seldom used because of its multiple conflicts with already present key bindings in browsers.
            To work around this, browsers implement accesskey behavior if the keys are pressed with other "qualifying" keys (such as Alt + accesskey).
            </remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AccessKeyLabel">
            <summary>
            Returns a string containing the element's browser-assigned access key (if any); otherwise it returns an empty string.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AttributeStyleMap">
            <summary>
            <para>
            Returns a live StylePropertyMap object that contains a list of style properties of the element that are defined in the element's inline style attribute,
            or assigned using the style property of the HTMLElement interface via script.
            </para>
            <para>Shorthand properties are expanded. If you set "border-top: 1px solid black", the longhand properties ("border-top-color", "border-top-style", and "border-top-width") are set instead.</para>
            <para>
            The main difference between <see cref="P:BrowserAPI.Implementation.HTMLElementInProcess.Style">style</see> property and <i>attributeStyleMap</i> is that, the <see cref="P:BrowserAPI.Implementation.HTMLElementInProcess.Style">style</see> property gets/sets all styles as a string,
            while <i>attributeStyleMap</i> handles styles in a Dictionary&lt;string, string&gt;.
            </para>
            <para>Though this property itself is not writable, you can write and remove inline styles through <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.SetAttributeStyleMap(System.String,System.String)"/> and <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttributeStyleMap(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.SetAttributeStyleMap(System.String,System.String)">
            <summary>
            <para>Sets the given css property name to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a css property, use <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttributeStyleMap(System.String)"/>.
            </para>
            </summary>
            <param name="name">name of the css property</param>
            <param name="value">value for the given css property</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttributeStyleMap(System.String)">
            <summary>
            Removes the given css property.
            </summary>
            <param name="name">css property name</param>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Autocapitalize">
            <summary>
            <para>
            Represents the element's capitalization behavior for user input. It is available on all HTML elements, though it doesn't affect all of them, including:<br />
            - &lt;input&lt; and &lt;textarea&lt; elements.<br />
            - Any element with <i>contenteditable</i> set on it.
            </para>
            <para>
            The value is a string that represents the element's capitalization behavior for user input. Valid values are as follows:<br />
            - "none" or "off": No autocapitalization should be applied, that is, all letters should default to lowercase.<br />
            - "sentences" or "on": The first letter of each sentence should default to a capital letter; all other letters should default to lowercase.<br />
            - "words": The first letter of each word should default to a capital letter; all other letters should default to lowercase.<br />
            - "characters": All letters should default to uppercase.
            </para>
            <para>
            <i>autocapitalize</i> doesn't affect behavior when typing on a physical keyboard.
            It affects the behavior of other input mechanisms such as virtual keyboards on mobile devices and voice input.
            This can assist users by making data entry quicker and easier, for example by automatically capitalizing the first letter of each sentence.
            </para>
            <para>It reflects the value of the autocapitalize HTML global attribute.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Autofocus">
            <summary>
            <para>
            Represents a boolean value reflecting the autofocus HTML global attribute, which indicates whether the control should be focused when the page loads,
            or when dialog or popover become shown if specified in an element inside &lt;dialog&gt; elements or elements whose popover attribute is set.
            </para>
            <para>
            Only one form-associated element inside a document, or a &lt;dialog&gt; element, or an element whose popover attribute is set, can have this attribute specified.
            If there are several, the first element with the attribute set inserted, usually the first such element on the page, gets the initial focus.
            </para>
            </summary>
            <remarks>
            Note: Setting this property doesn't set the focus to the associated element:
            it merely tells the browser to focus to it when the element is inserted in the document.
            Setting it after the insertion, that is most of the time after the document load, has no visible effect.
            </remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ContentEditable">
            <summary>
            <para>
            Specifies whether or not the element is editable. This enumerated attribute can have the following values:<br />
            - "true" indicates that the element is contenteditable.<br />
            - "false" indicates that the element cannot be edited.<br />
            - "plaintext-only" indicates that the element's raw text is editable, but rich text formatting is disabled.
            </para>
            <para>You can use the <see cref="P:BrowserAPI.Implementation.HTMLElementInProcess.IsContentEditable"/> property to test the computed boolean value of this property.</para>
            <para>If the attribute is missing or its value is invalid, its value is inherited from its parent element: so the element is editable (or not) based on the parent element.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Dataset">
            <summary>
            <para>Provides read/write access to custom data attributes (data-*) on elements. It exposes a map of strings (DOMStringMap) with an entry for each data-* attribute.</para>
            <para>
            The property name of a custom data attribute is the same as the HTML attribute without the data- prefix.
            Single dashes (-) are removed, and the next ASCII character after a removed dash is capitalized to form the property's camel-cased name.
            </para>
            <para>For writing or removing elements use <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.SetDataset(System.String,System.String)"/> or <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveDataset(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.SetDataset(System.String,System.String)">
            <summary>
            <para>Sets the given data-attribute to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a data-attribute, use <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveDataset(System.String)"/>.
            </para>
            </summary>
            <param name="name">name of the data-attribute without data- prefix</param>
            <param name="value">value for the given data-attribute</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveDataset(System.String)">
            <summary>
            Removes the given data-attribute.
            </summary>
            <param name="name">data-attribute name</param>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Dir">
            <summary>
            <para>
            Indicates the text writing directionality of the content of the current element. Possible values are<br />
            - "ltr": Left-to-right writing direction.<br />
            - "rtl": Right-to-left writing direction.<br />
            - "auto": The direction of the element must be determined based on the contents of the element.<br />
            - "": The default value; the directionality is inherited from the parent element.
            </para>
            <para>
            Note that if the dir attribute is unspecified, the element itself may still inherit directionality from its parent.
            However, that inherited directionality is not reflected by this property's value.
            </para>
            <para>
            The text writing directionality of an element is which direction that text goes (for support of different language systems).
            Arabic languages and Hebrew are typical languages using the RTL directionality.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Draggable">
            <summary>
            A boolean value indicating if the element can be dragged. It reflects the value of the draggable HTML global attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.EnterKeyHint">
            <summary>
            <para>
            An enumerated property defining what action label (or icon) to present for the enter key on virtual keyboards.
            It reflects the enterkeyhint HTML global attribute and is an enumerated property, only accepting the following values as a string:<br />
            - "enter": Typically indicating inserting a new line.<br />
            - "done": Typically meaning there is nothing more to input and the input method editor (IME) will be closed.<br />
            - "go": Typically meaning to take the user to the target of the text they typed.<br />
            - "next": Typically taking the user to the next field that will accept text.<br />
            - "previous": Typically taking the user to the previous field that will accept text.<br />
            - "search": Typically taking the user to the results of searching for the text they have typed.<br />
            - "send": Typically delivering the text to its target.
            </para>
            <para>If no <i>enterKeyHint</i> value has been specified or if it was set to a different value than the allowed ones, it will return an empty string.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Hidden">
            <summary>
            Reflects the value of the element's hidden attribute.<br />
            true - The element is hidden.<br />
            false - The element is not hidden. This is the default value for the attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Inert">
            <summary>
            <para>
            Reflects the value of the element's inert attribute.
            It is a boolean value that, when present, makes the browser "ignore" user input events for the element, including focus events and events from assistive technologies.
            The browser may also ignore page search and text selection in the element.
            This can be useful when building UIs such as modals where you would want to "trap" the focus inside the modal when it's visible.
            </para>
            <para>
            Note that if the inert attribute is unspecified, the element itself may still inherit inertness from its parent.
            However, that inherited inertness is not reflected by this property's value.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.InnerText">
            <summary>
            <para>Represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.InputMode">
            <summary>
            <para>
            Reflects the value of the element's inputmode attribute.<br />
            It provides a hint about the type of data that might be entered by the user while editing the element or its contents. This allows the browser to display an appropriate virtual keyboard.<br />
            It is used primarily on &lt;input&gt; elements, but is usable on any element in <see cref="P:BrowserAPI.Implementation.HTMLElementInProcess.ContentEditable">contenteditable</see> mode.
            </para>
            <para>
            This attribute may have one of the following values:<br />
            - "decimal": Fractional numeric input keyboard that contains the digits and decimal separator for the user's locale (typically . or ,).<br />
            - "email": A virtual keyboard optimized for entering email addresses. Typically includes the @character as well as other optimizations.<br />
            - "none": No virtual keyboard. This is used when the page implements its own keyboard input control.<br />
            - "numeric": Numeric input keyboard that only requires the digits 0–9. Devices may or may not show a minus key.<br />
            - "search": A virtual keyboard optimized for search input. For instance, the return/submit key may be labeled "Search".<br />
            - "tel": A telephone keypad input that includes the digits 0–9, the asterisk (*), and the pound (#) key.<br />
            - "text": Standard input keyboard for the user's current locale.<br />
            - "url": A keypad optimized for entering URLs. This may have the / key more prominent, for example.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.IsContentEditable">
            <summary>
            It is true if the contents of the element are editable; otherwise it returns false.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Lang">
            <summary>
            <para>
            Indicates the base language of an element's attribute values and text content, in the form of a RFC 5646: BCP 47 language identifier tag.
            It reflects the element's lang attribute; the xml:lang attribute does not affect this property.
            </para>
            <para>
            Note that if the lang attribute is unspecified, the element itself may still inherit the language from its parent.
            However, that inherited language is not reflected by this property's value.
            </para>
            <para>Common examples include "en" for English, "ja" for Japanese, "es" for Spanish and so on. If unspecified, the value is an empty string.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Nonce">
            <summary>
            <para>Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.</para>
            <para>In later implementations, elements only expose their nonce attribute to scripts (and not to side-channels like CSS attribute selectors).</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetWidth">
            <summary>
            <para>Returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetHeight">
            <summary>
            <para>Returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetLeft">
            <summary>
            <para>Returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetTop">
            <summary>
            Returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OffsetParent">
            <summary>
            <para>Returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OuterText">
            <summary>
            <para>
            Returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.Implementation.HTMLElementInProcess.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Popover">
            <summary>
            <para>Gets/Sets an element's popover state via JavaScript ("auto", "hint", or "manual"), and can be used for feature detection. It reflects the value of the popover global HTML attribute.</para>
            <para>
            Possible values are:<br />
            - "auto": auto popovers can be "light dismissed" — this means that you can hide the popover by clicking outside it or pressing the Esc key.
            Usually, only one auto popover can be shown at a time — showing a second popover when one is already shown will hide the first one.
            The exception to this rule is when you have nested auto popovers.
            See Nested popovers for more details.<br />
            - "hint": hint popovers do not close auto popovers when they are displayed, but will close other hint popovers.
            They can be light dismissed and will respond to close requests.
            Usually they are shown and hidden in response to non-click JavaScript events such as mouseover/mouseout and focus/blur.
            Clicking a button to open a hint popover would cause an open auto popover to light-dismiss.<br />
            - "manual": manual popovers cannot be "light dismissed" and are not automatically closed.
            Popovers must explicitly be displayed and closed using declarative show/hide/toggle buttons or JavaScript.
            Multiple independent manual popovers can be shown simultaneously.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Spellcheck">
            <summary>
            Represents a boolean value that controls the spell-checking hint. It is available on all HTML elements, though it doesn't affect all of them.
            It reflects the value of the spellcheck HTML global attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>Returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.TabIndex">
            <summary>
            <para>
            Represents the tab order of the current element. Tab order is as follows:<br />
            1. Elements with a positive tabIndex. Elements that have identical tabIndex values should be navigated in the order they appear. Navigation proceeds from the lowest tabIndex to the highest tabIndex.<br />
            2. Elements that do not support the tabIndex attribute or support it and assign tabIndex to 0, in the order they appear.<br />
            Elements that are disabled do not participate in the tabbing order.
            </para>
            <para>Values don't need to be sequential, nor must they begin with any particular value. They may even be negative, though each browser trims very large values.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Title">
            <summary>
            Represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Translate">
            <summary>
            Indicates whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.
            It reflects the value of the translate HTML global attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Click">
            <summary>
            <para>Simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Focus(System.Boolean)">
            <summary>
            <para>Sets focus on the specified element, if it can be focused. The focused element is the element that will receive keyboard and similar events by default.</para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Blur">
            <summary>
            Removes keyboard focus from the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ShowPopover">
            <summary>
            <para>Shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HidePopover">
            <summary>
            <para>Hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.TogglePopover">
            <summary>
            <para>Toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.TogglePopover(System.Boolean)">
            <inheritdoc cref="M:BrowserAPI.Implementation.HTMLElementInProcess.TogglePopover" />
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnCommand">
            <summary>
            <para>
            Fires on an element that is controlled via a button with valid commandForElement and command values, whenever the button is interacted with (e.g., it is clicked).
            </para>
            <para>
            <b>Parameters</b><br />
            - IHTMLElementInProcess <i>source</i>: An HTMLButtonElement representing the button that caused this invocation.<br />
            - string <i>command</i>: Representing the command value of the source button.
            </para>
            </summary>
            <remarks>
            Note: Dispose the given IHTMLElementInProcess object when you are done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnDrag">
            <summary>
            <para>
            Is fired every few hundred milliseconds as an element or text selection is being dragged by the user.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnDragStart">
            <summary>
            <para>
            Is fired when the user starts dragging an element or text selection.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnDragEnd">
            <summary>
            <para>
            Is fired when a drag operation ends (by releasing a mouse button or hitting the escape key).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnDragEnter">
            <summary>
            <para>
            Is fired when a dragged element or text selection enters a valid drop target.
            The target object is the immediate user selection (the element directly indicated by the user as the drop target), or the &lt;body&gt; element.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnDragLeave">
            <summary>
            <para>
            Is fired when a dragged element or text selection leaves a valid drop target.<br />
            This event is not cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnDragOver">
            <summary>
            <para>
            Is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLElementInProcess.OnDrop">
            <summary>
            <para>
            Is fired when an element or text selection is dropped on a valid drop target.
            To ensure that the drop event always fires as expected, you should always include a preventDefault() call in the part of your code which handles the dragover event.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Attributes">
            <summary>
            Returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClassList">
            <summary>
            <para>Returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClassName">
            <summary>
            Gets/Sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientWidth">
            <summary>
            <para>
            Is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientHeight">
            <summary>
            <para>
            Is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.CurrentCSSZoom">
            <summary>
            <para>Provides the "effective" CSS zoom of an element, taking into account the zoom applied to the element and all its parent elements.</para>
            <para>
            The value calculated by multiplying the CSS zoom values of the element and all of its parents.
            For example, if three elements with zoom values of 2, 1.5, and 3, are nested within each other, the most deeply nested element will have a currentCSSZoom value of 9.
            If the element doesn't have a CSS box, for example because display: none is set on the element or one of its parents, then the currentCSSZoom is set to 1.
            </para>
            <para>
            Note that some methods, such as Element.getBoundingClientRect(), return dimensions and position that are relative to the viewport, and hence include the effects of CSS zoom.
            Other properties and methods return values that are relative to the element itself, and do not include the effects of zooming.
            These include, for example, client* properties such as Element.clientHeight, scroll*() methods like Element.scroll(), and offset* properties such as HTMLElement.offsetHeight.
            The currentCSSZoom property can be used to scale these values to adjust for the effects of zooming.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Id">
            <summary>
            <para>Represents the element's identifier, reflecting the id global attribute.</para>
            <para>If the id value is not the empty string, it must be unique in a document.</para>
            <para>The id is often used with getElementById() to retrieve a particular element. Another common case is to use an element's ID as a selector when styling the document with CSS.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.IsConnected">
            <summary>
            A boolean indicating whether the node is connected (directly or indirectly) to a Document object.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.InnerHTML">
            <summary>
            <para>Gets/Sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.OuterHTML">
            <summary>
            <para>
            Gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Part">
            <summary>
            Represents the part identifier(s) of the element (i.e., set using the part attribute), returned as a DOMTokenList. These can be used to style parts of a shadow DOM, via the ::part pseudo-element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollWidth">
            <summary>
            <para>Is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollHeight">
            <summary>
            <para>Is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollLeft">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ScrollTop">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Slot">
            <summary>
            Returns the name of the shadow DOM slot the element is inserted in.<br />
            A slot is a placeholder inside a web component that users can fill with their own markup (see Using templates and slots for more information).
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.LocalName">
            <summary>
            The local part of the qualified name of an element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.NamespaceURI">
            <summary>
            The namespace URI of the element, or null if the element is not in a namespace.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Prefix">
            <summary>
            The namespace prefix of the specified element, or null if no prefix is specified.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.BaseURI">
            <summary>
            <para>The absolute base URL of the document containing the node.</para>
            <para>
            The base URL is used to resolve relative URLs when the browser needs to obtain an absolute URL,
            for example when processing the HTML &lt;img&gt; element's src attribute or the xlink:href Deprecated or href attributes in SVG.
            </para>
            <para>Although this property is read-only, its value is determined by an algorithm each time the property is accessed, and may change if the conditions changed.</para>
            <para>
            The base URL is determined as follows:<br />
            1. By default, the base URL is the location of the document (as determined by window.location).<br />
            2. If it is an HTML Document and there is a &lt;Base&gt; element in the document, the href value of the first Base element with such an attribute is used instead.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.TagName">
            <summary>
            <para>The tag name of the element on which it's called.</para>
            <para>
            For example, if the element is an &lt;img&gt;, its tagName property is IMG (for HTML documents; it may be cased differently for XML/XHTML documents).
            Note: You can use the localName property to access the Element's local name — which for the case in the example is img (lowercase).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.NodeName">
            <summary>
            <para>The name of the current node as a string.</para>
            <para>
            Values for the different types of nodes are:<br />
            - Attr: The value of Attr.name, that is the qualified name of the attribute<br />
            - CDATASection: The string "#cdata-section"<br />
            - Comment: The string "#comment"<br />
            - Document: The string "#document"<br />
            - DocumentFragment: The string "#document-fragment"<br />
            - DocumentType: The value of DocumentType.name<br />
            - Element: The value of Element.tagName, that is the uppercase name of the element tag if an HTML element, or the lowercase element tag if an XML element (like a SVG or MathML element)<br />
            - ProcessingInstruction: The value of ProcessingInstruction.target<br />
            - Text: The string "#text"
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.NodeType">
            <summary>
            <para>An integer that identifies what the node is. It distinguishes different kind of nodes from each other, such as elements, text and comments.</para>
            <para>
            Possible values are:<br />
            - 1: ELEMENT_NODE - An Element node like &lt;p&gt; or &lt;div&gt;.<br />
            - 2: ATTRIBUTE_NODE - An Attribute of an Element.<br />
            - 3: TEXT_NODE - The actual Text inside an Element or Attr.<br />
            - 4: CDATA_SECTION_NODE - A CDATASection, such as &lt;!CDATA[[ … ]]&gt;<br />
            - 7: PROCESSING_INSTRUCTION_NODE - A ProcessingInstruction of an XML document, such as &lt;?xml-stylesheet … ?&gt;.<br />
            - 8: COMMENT_NODE - A Comment node, such as &lt;!-- … --&gt;.<br />
            - 9: DOCUMENT_NODE - A Document node.<br />
            - 10: DOCUMENT_TYPE_NODE - A DocumentType node, such as &lt;!doctype html&gt;.<br />
            - 11: DOCUMENT_FRAGMENT_NODE - A DocumentFragment node.
            </para>
            <para>
            The following constants have been deprecated and are not in use anymore:<br />
            - 5: ENTITY_REFERENCE_NODE<br />
            - 6: ENTITY_NODE<br />
            - 12: NOTATION_NODE
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ChildElementCount">
            <summary>
            Returns the number of child elements of this element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Children">
            <summary>
            <para>Returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.FirstElementChild">
            <summary>
            <para>Returns an element's first child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.LastElementChild">
            <summary>
            <para>Returns an element's last child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.PreviousElementSibling">
            <summary>
            Returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.NextElementSibling">
            <summary>
            Returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.ParentElement">
            <summary>
            Returns the DOM node's parent Element, or null if the node either has no parent,or its parent isn't a DOM Element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaAtomic">
            <summary>
            <para>Reflects the value of the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.</para>
            <para>
            Value is one of the following values:<br />
            - "false": Assistive technologies will present only the changed node or nodes.<br />
            - "true": Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaAutoComplete">
            <summary>
            <para>Reflects the value of the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.</para>
            <para>
            Value is one of the following values:<br />
            - "inline": When a user is providing input, text suggesting one way to complete the provided input may be dynamically inserted after the caret.<br />
            - "list": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed.<br />
            - "both": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.<br />
            - "none": When a user is providing input, there is no display of an automatic suggestion that attempts to predict how the user intends to complete the input.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaBrailleLabel">
            <summary>
            Reflects the value of the aria-braillelabel attribute, which defines the ARIA braille label of the element.
            This element label may be used by assistive technologies that can present content in braille, but should only be set if a braille-specific label would improve the user experience.
            The aria-braillelabel contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaBrailleRoleDescription">
            <summary>
            Reflects the value of the aria-brailleroledescription attribute, which defines the ARIA braille role description of the element.
            This property may be used to provide an abbreviated version of the aria-roledescription value.
            It should only be used if aria-roledescription is present and in the rare case where it is too verbose for braille.
            The aria-brailleroledescription contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaBusy">
            <summary>
            <para>Reflects the value of the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is being updated.<br />
            - "false": There are no expected updates for the element.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaChecked">
            <summary>
            <para>Reflects the value of the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is checked.<br />
            - "mixed": Indicates a mixed mode value for a tri-state checkbox or menuitemcheckbox.<br />
            - "false": There are no expected updates for the element.<br />
            - "undefined": The element does not support being checked.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaColCount">
            <summary>
            <para>Reflects the value of the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaColIndex">
            <summary>
            <para>Reflects the value of the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaColIndexText">
            <summary>
            Reflects the value of the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaColSpan">
            <summary>
            <para>Reflects the value of the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaCurrent">
            <summary>
            <para>Reflects the value of the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.</para>
            <para>
            Value is one of the following values:<br />
            - "page": Represents the current page within a set of pages.<br />
            - "step": Represents the current step within a process.<br />
            - "location": Represents the current location, for example the current page in a breadcrumbs hierarchy.<br />
            - "date": Represents the current date within a collection of dates.<br />
            - "time": Represents the current time within a set of times.<br />
            - "true": Represents the current item within a set.<br />
            - "false": Does not represent the current item within a set.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaDescription">
            <summary>
            Reflects the value of the aria-description attribute, which defines a string value that describes or annotates the current element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaDisabled">
            <summary>
            <para>Reflects the value of the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element and all focusable descendants are disabled, but perceivable, and their values cannot be changed by the user.<br />
            - "false": The element is enabled.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaExpanded">
            <summary>
            <para>Reflects the value of the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The grouping element this element owns or controls is expanded.<br />
            - "false": The grouping element this element owns or controls is collapsed.<br />
            - "undefined": The element does not own or control a grouping element that is expandable.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaHasPopup">
            <summary>
            <para>Reflects the value of the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.</para>
            <para>
            Value is one of the following values:<br />
            - "false": The element does not have a popup.<br />
            - "true": The element has a popup that is a menu.<br />
            - "menu":The element has a popup that is a menu. <br />
            - "listbox": The element has a popup that is a listbox.<br />
            - "tree": The element has a popup that is a tree.<br />
            - "grid": The element has a popup that is a grid.<br />
            - "dialog": The element has a popup that is a dialog.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaHidden">
            <summary>
            <para>Reflects the value of the aria-hidden) attribute, which indicates whether the element is exposed to an accessibility API.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is hidden from the accessibility API.<br />
            - "false": The element is exposed to the accessibility API as if it were rendered.<br />
            - "undefined": The element's hidden state is determined by the user agent based on whether it is rendered.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaInvalid">
            <summary>
            <para>
            Reflects the value of the aria-invalid attribute.
            Relevant for the application, checkbox, combobox, gridcell, listbox, radiogroup, slider, spinbutton, textbox, and tree roles,
            it indicates to the accessibility API whether the entered value does not conform to the format expected by the application.
            </para>
            <para>
            If the attribute is not present, or is set to the empty string, assistive technology will treat the value as if it were set to false.
            If the attribute is present but set to a value other than false, grammar, spelling or the empty string (""), assistive technology treats the value as true.
            The property reflects the attribute value as set, not as handled by assistive technology.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is invalid.<br />
            - "false": The element is not in an invalid state.<br />
            - "grammar": The element is in an invalid state because grammatical error was detected.<br />
            - "spelling": The element is in an invalid state because spelling error was detected.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaKeyShortcuts">
            <summary>
            Reflects the value of the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaLabel">
            <summary>
            Reflects the value of the aria-label attribute, which defines a string value that labels the current element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaLevel">
            <summary>
            <para>Reflects the value of the aria-level attribute, which defines the hierarchical level of an element within a structure.</para>
            <para>Note: Where possible use an HTML h1 or other correct heading level as these have built in semantics and do not require ARIA attributes.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaLive">
            <summary>
            <para>
            Reflects the value of the aria-live attribute, which indicates that an element will be updated,
            and describes the types of updates the user agents, assistive technologies,and user can expect from the live region.
            </para>
            <para>
            Value is one of the following values:<br />
            - "assertive": Indicates that updates to the region have the highest priority and should be presented to the user immediately.<br />
            - "off": Indicates that updates to the region should not be presented to the user unless the user is currently focused on that region.<br />
            - "polite": Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaModal">
            <summary>
            <para>
            Reflects the value of the aria-modal attribute, which indicates whether an element is modal when displayed.
            Applying the aria-modal property to an element with role="dialog" replaces the technique of using aria-hidden on the background for informing assistive technologies that content outside a dialog is inert.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is modal.<br />
            - "false": The element is not modal.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaMultiline">
            <summary>
            <para>Reflects the value of the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": This is a multi-line text box.<br />
            - "false": This is a single-line text box.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaMultiSelectable">
            <summary>
            <para>Reflects the value of the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.</para>
            <para>Note: Where possible use an HTML &lt;select&gt; element as this has built in semantics and does not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": More than one item may be selected at a time.<br />
            - "false": Only one item may be selected.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaOrientation">
            <summary>
            <para>Reflects the value of the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.</para>
            <para>
            Value is one of the following values:<br />
            - "horizontal": The element is horizontal.<br />
            - "vertical": The element is vertical.<br />
            - "undefined": The element's orientation is unknown.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaPlaceholder">
            <summary>
            <para>Reflects the value of the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaPosInSet">
            <summary>
            <para>Reflects the value of the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaPressed">
            <summary>
            <para>Reflects the value of the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="button" or the &lt;button&gt; element as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is pressed.<br />
            - "false": The element supports being pressed but is not currently pressed.<br />
            - "mixed": Indicates a mixed mode value for a tri-state toggle button.<br />
            - "undefined": The element does not support being pressed.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaReadOnly">
            <summary>
            <para>Reflects the value of the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The user cannot change the value of the element.<br />
            - "false": The user can set the value of the element.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaRequired">
            <summary>
            <para>Reflects the value of the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": Users need to provide input on an element before a form is submitted.<br />
            - "false": User input is not necessary to submit the form.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaRoleDescription">
            <summary>
            Rreflects the value of the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaRowCount">
            <summary>
            <para>Reflects the value of the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaRowIndex">
            <summary>
            <para>Reflects the value of the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaRowIndexText">
            <summary>
            Reflects the value of the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaRowSpan">
            <summary>
            <para>Reflects the value of the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaSelected">
            <summary>
            <para>Reflects the value of the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The item is selected.<br />
            - "false": The item is not selected.<br />
            - "undefined": The item is not selectable.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaSetSize">
            <summary>
            <para>Reflects the value of the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaSort">
            <summary>
            <para>Reflects the value of the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.</para>
            <para>
            Value is one of the following values:<br />
            - "ascending": Items are sorted in ascending order by this column.<br />
            - "descending": Items are sorted in descending order by this column.<br />
            - "none": There is no defined sort applied to the column.<br />
            - "other": A sort algorithm other than ascending or descending has been applied.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaValueMax">
            <summary>
            <para>Reflects the value of the aria-valuemax attribute, which defines the maximum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaValueMin">
            <summary>
            <para>Reflects the value of the aria-valuemin attribute, which defines the minimum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaValueNow">
            <summary>
            <para>Reflects the value of the aria-valuenow attribute, which defines the current value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.AriaValueText">
            <summary>
            Reflects the value of the aria-valuetext attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLElementInProcess.Role">
            <summary>
            <para>Returns the explicitly set WAI-ARIA role for the element.</para>
            <para>
            All HTML elements have an implicit ARIA role, even if that role is generic.
            This semantic association allows tools to present and support interaction with the object in a manner that is consistent with user expectations about other objects of that type.
            The role attribute is used to explicitly set the element's ARIA role, overriding the implicit role.
            For example, a &lt;ul&gt;, which has an implicit list role, might have role="treegrid" explicitly set.
            The role property reflects the explicitly set value of the role attribute—in this case treegrid; it does not return the element's implicit list role unless explicitly set.
            </para>
            <para>The full list of defined ARIA roles can be found on the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles">ARIA roles</see> reference page.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.CheckVisibility(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>
            Checks whether the element is visible. The method returns false in either of the following situations:<br />
            - The element doesn't have an associated box, for example because the CSS display property is set to 'none' or 'contents'.<br />
            - The element is not being rendered because the element or an ancestor element sets the 'content-visibility' property to 'hidden'.
            </para>
            <para>
            The optional parameter enables additional checks to test for other interpretations of what "visible" means.
            For example, you can further check whether an element has an opacity of 0, if the value of the element visibility property makes it invisible,
            or if the element content-visibility property has a value of auto and its rendering is currently being skipped.
            </para>
            </summary>
            <param name="contentVisibilityAuto">true to check if the element content-visibility property has (or inherits) the value auto, and it is currently skipping its rendering. false by default.</param>
            <param name="opacityProperty">true to check if the element opacity property has (or inherits) a value of 0. false by default.</param>
            <param name="visibilityProperty">true to check if the element is invisible due to the value of its visibility property. false by default.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ComputedStyleMap">
            <summary>
            Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetBoundingClientRect">
            <summary>
            Returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetClientRects">
            <summary>
            <para>Returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Matches(System.String)">
            <summary>
            Tests whether the element would be selected by the specified CSS selector.
            </summary>
            <param name="selectors">A string containing valid CSS selectors to test the Element against.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.IsDefaultNamespace(System.String)">
            <summary>
            Accepts a namespace URI as an argument. It returns a boolean value that is true if the namespace is the default namespace on the given node and false if not.
            </summary>
            <param name="namespaceURI">A string representing the namespace against which the element will be checked.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.LookupPrefix(System.String)">
            <summary>
            <para>Returns a string containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the first prefix is returned.</para>
            <para>If the node is a <i>DocumentType</i> or a <i>DocumentFragment</i>, it returns null.</para>
            </summary>
            <param name="namespace">A string containing the namespace to look the prefix up.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.LookupNamespaceURI(System.String)">
            <summary>
            <para>
            Takes a prefix as parameter and returns the namespace URI associated with it on the given node if found (and null if not).
            This method's existence allows Node objects to be passed as a namespace resolver to <i>XPathEvaluator.createExpression()</i> and <i>XPathEvaluator.evaluate()</i>.
            </para>
            <para>
            It returns a string containing the namespace URI corresponding to the prefix.<br />
            - Always returns null if the node is a DocumentFragment, DocumentType, Document with no documentElement, or Attr with no associated element.<br />
            - If prefix is "xml", the return value is always "http://www.w3.org/XML/1998/namespace".<br />
            - If prefix is "xmlns", the return value is always "http://www.w3.org/2000/xmlns/".<br />
            - If the prefix is null, the return value is the default namespace URI.<br />
            - If the prefix is not found, the return value is null.
            </para>
            </summary>
            <param name="prefix">The prefix to look for.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Normalize">
            <summary>
            Puts the specified node and all of its sub-tree into a normalized form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.SetPointerCapture(System.Int64)">
            <summary>
            <para>
            Is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReleasePointerCapture(System.Int64)">
            <summary>
            <para>Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.SetPointerCapture(System.Int64)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HasPointerCapture(System.Int64)">
            <summary>
            Checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Scroll(System.Int32,System.Int32)">
            <summary>
            Scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ScrollTo(System.Int32,System.Int32,System.String)">
            <summary>
            Scrolls to a particular set of coordinates inside a given element.
            </summary>
            <param name="x">The pixel along the horizontal axis of the element that you want displayed in the upper left.</param>
            <param name="y">The pixel along the vertical axis of the element that you want displayed in the upper left.</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly. This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ScrollBy(System.Int32,System.Int32)">
            <summary>
            Scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ScrollIntoView(System.String,System.String,System.String)">
            <summary>
            Scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetAttribute(System.String)">
            <summary>
            Returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will be null.
            </summary>
            <param name="qualifiedName">The name of the attribute whose value you want to get.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetAttributeNS(System.String,System.String)">
            <summary>
            <para>
            Returns the string value of the attribute with the specified namespace and name.
            If the named attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.
            </para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.GetAttribute(System.String)"/> method instead.</para>
            </summary>
            <remarks>
            Note: Earlier versions of the DOM specification had this method described as returning an empty string for non-existent attributes, but it was not typically implemented this way since null makes more sense.
            The DOM4 specification now says this method should return null for non-existent attributes.
            </remarks>
            <param name="namespace">The namespace in which to look for the specified attribute.</param>
            <param name="qualifiedName">The name of the attribute to look for.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetAttributeNames">
            <summary>
            <para>Returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.</para>
            <para>Using <i>getAttributeNames()</i> along with <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.GetAttribute(System.String)"/>, is a memory-efficient and performant alternative to <see cref="P:BrowserAPI.Implementation.HTMLElementInProcess.Attributes"/>.</para>
            <para>
            The names returned by <i>getAttributeNames()</i> are qualified attribute names,
            meaning that attributes with a namespace prefix have their names returned with that namespace prefix (not the actual namespace), followed by a colon, followed by the attribute name (for example, xlink:href),
            while any attributes which have no namespace prefix have their names returned as-is (for example, href).
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.SetAttribute(System.String,System.String)">
            <summary>
            <para>Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.</para>
            <para>To get the current value of an attribute, use <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.GetAttribute(System.String)"/>; to remove an attribute, call <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttribute(System.String)"/>.</para>
            <para>Boolean attributes are considered to be true if they're present on the element at all. You should set value to the empty string ("") or the attribute's name, with no leading or trailing whitespace.</para>
            <para>
            Since the specified value gets converted into a string, specifying null doesn't necessarily do what you expect.
            Instead of removing the attribute or setting its value to be null, it instead sets the attribute's value to the string "null".
            If you wish to remove an attribute, call <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttribute(System.String)"/>.
            </para>
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute whose value is to be set.
            The attribute name is automatically converted to all lower-case when setAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="value">A string containing the value to assign to the attribute. Any non-string value specified is converted automatically into a string.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.SetAttributeNS(System.String,System.String,System.String)">
            <summary>
            <para>Adds a new attribute or changes the value of an attribute with the given namespace and name.</para>
            <para>f you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.SetAttribute(System.String,System.String)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">A string identifying the attribute by its qualified name; that is, a namespace prefix followed by a colon followed by a local name.</param>
            <param name="value">The desired string value of the new attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ToggleAttribute(System.String,System.Nullable{System.Boolean})">
            <summary>
            Toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute to be toggled.
            The attribute name is automatically converted to all lower-case when toggleAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="force">
            A boolean value which has the following effects:<br />
            - if not specified at all, the toggleAttribute method "toggles" the attribute named name — removing it if it is present, or else adding it if it is not present<br />
            - if true, the toggleAttribute method adds an attribute named name<br />
            - if false, the toggleAttribute method removes the attribute named name
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttribute(System.String)">
            <summary>
            Removes the attribute with the specified name from the element.
            </summary>
            <param name="qualifiedName">A string specifying the name of the attribute to remove from the element. If the specified attribute does not exist, removeAttribute() returns without generating an error.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttributeNS(System.String,System.String)">
            <summary>
            <para>Removes the specified attribute with the specified namespace from an element.</para>
            <para>If you are working with HTML and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveAttribute(System.String)"/> method instead.</para>
            </summary>
            <param name="namespace">A string that contains the namespace of the attribute.</param>
            <param name="qualifiedName">A string that names the attribute to be removed from the current node.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HasAttribute(System.String)">
            <summary>
            Returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="name">A string representing the name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HasAttributeNS(System.String,System.String)">
            <summary>
            <para>Returns a boolean value indicating whether the current element has the specified attribute with the specified namespace.</para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.HasAttribute(System.String)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">The name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.HasAttributes">
            <summary>
            Returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetElementsByClassName(System.String)">
            <summary>
            <para>Returns an array which contains every descendant element which has the specified class name or names.</para>
            <para>The method getElementsByClassName() on the Document interface works essentially the same way, except it acts on the entire document, starting at the document root.</para>
            </summary>
            <param name="className">A string containing one or more class names to match on, separated by whitespace.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetElementsByTagName(System.String)">
            <summary>
            <para>Returns an array of elements with the given tag name. All descendants of the specified element are searched, but not the element itself.</para>
            <para>
            When called on an HTML element in an HTML document, getElementsByTagName lower-cases the argument before searching for it.
            This is undesirable when trying to match camel-cased SVG elements (such as &lt;linearGradient&gt;) in an HTML document.
            Instead, use <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.GetElementsByTagNameNS(System.String,System.String)"/>, which preserves the capitalization of the tag name.
            </para>
            <para>Element.getElementsByTagName is similar to Document.getElementsByTagName(), except that it only searches for elements that are descendants of the specified element.</para>
            </summary>
            <param name="qualifiedName">The qualified name to look for. The special string "*" represents all elements. For compatibility with XHTML, lower-case should be used.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.GetElementsByTagNameNS(System.String,System.String)">
            <summary>
            Returns an array of elements with the given tag name belonging to the given namespace.
            It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.
            </summary>
            <param name="namespace">
            The namespace URI of elements to look for (see Element.namespaceURI and Attr.namespaceURI).
            For example, if you need to look for XHTML elements, use the XHTML namespace URI, http://www.w3.org/1999/xhtml.
            </param>
            <param name="qualifiedName">Either the local name of elements to look for or the special value "*", which matches all elements (see Element.localName and Attr.localName).</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.QuerySelector(System.String)">
            <summary>
            Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.QuerySelectorAll(System.String)">
            <summary>
            Returns an array representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector#escaping_attribute_values">Escaping attribute values</see> for an example.
            </para>
            <para>
            The selectors are applied to the entire document, not just the particular element on which querySelectorAll() is called.
            To restrict the selector to the element on which querySelectorAll() is called, include the :scope pseudo-class at the start of the selector.
            See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll#selector_scope">selector scope</see> example.
            </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Closest(System.String)">
            <summary>
            Traverses the element and its parents (heading toward the document root) until it finds a node that matches the specified CSS selector.
            </summary>
            <param name="selectors">A string of valid CSS selectors to match the Element and its ancestors against.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Before(System.String[])">
            <summary>
            Inserts a set of strings in the children list of this Element's parent, just before this Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Before(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects in the children list of this Element's parent, just before this Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.After(System.String[])">
            <summary>
            Inserts a set of strings in the children list of the Element's parent, just after the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.After(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects in the children list of the Element's parent, just after the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Prepend(System.String[])">
            <summary>
            Inserts a set of strings before the first child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Prepend(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects before the first child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.AppendChild(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            <para>Adds a node to the end of the list of children of a specified parent node.</para>
            <para>Note: If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position.</para>
            <para>If the given child is a DocumentFragment, the entire contents of the DocumentFragment are moved into the child list of the specified parent node.</para>
            <para>appendChild() returns the newly appended node, or if the child is a DocumentFragment, the emptied fragment.</para>
            <para>Note: Unlike this method, the Element.append() method supports multiple arguments and appending strings. You can prefer using it if your node is an element.</para>
            </summary>
            <param name="node">The node to append to the given parent node</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Append(System.String[])">
            <summary>
            Inserts a set of strings after the last child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Append(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects after the last child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.InsertAdjacentElement(System.String,BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Inserts a given element node at a given position relative to the element it is invoked upon.
            </summary>
            <param name="position">
            A string representing the position relative to the targetElement; must match (case-insensitively) one of the following strings:<br />
            - "beforebegin": Before the targetElement itself.<br />
            - "afterbegin": Just inside the targetElement, before its first child.<br />
            - "beforeend": Just inside the targetElement, after its last child.<br />
            - "afterend": After the targetElement itself.
            </param>
            <param name="htmlElement">The element to be inserted into the tree.</param>
            <returns>true if element was inserted, false if the insertion failed.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.InsertAdjacentHTML(System.String,System.String)">
            <summary>
            Parses the specified input as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position.
            </summary>
            <remarks>
            Warning: This method parses its input as HTML or XML, writing the result into the DOM.
            APIs like this are known as injection sinks, and are potentially a vector for cross-site-scripting (XSS) attacks, if the input originally came from an attacker.
            </remarks>
            <param name="position">
            A string representing the position relative to the element. Must be one of the following strings:<br />
            - "beforebegin": Before the element. Only valid if the element is in the DOM tree and has a parent element.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element. Only valid if the element is in the DOM tree and has a parent element.
            </param>
            <param name="html">A TrustedHTML instance or string defining the HTML or XML to be parsed.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.InsertAdjacentText(System.String,System.String)">
            <summary>
            Given a relative position and a string, inserts a new text node at the given position relative to the element it is called from.
            </summary>
            <param name="position">
            A string representing the position relative to the element the method is called from; must be one of the following strings:<br />
            - "beforebegin": Before the element itself.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element itself.
            </param>
            <param name="data">A string from which to create a new text node to insert at the given position where relative to the element the method is called from.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.RemoveChild(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Removes a child node from the DOM.
            </summary>
            <remarks>
            Note: As long as a reference is kept on the removed child, it still exists in memory, but is no longer part of the DOM. It can still be reused later in the code.
            If the return value of removeChild() is not stored, and no other reference is kept, it will be automatically deleted from memory after a short time.
            </remarks>
            <param name="node">A Node that is the child node to be removed from the DOM.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Remove">
            <summary>
            Removes the element from its parent node.
            If it has no parent node, calling remove() does nothing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReplaceChild(BrowserAPI.IHTMLElementInProcess,BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <remarks>
            Note: The parameter order, new before old, is unusual. <see cref="M:BrowserAPI.Implementation.HTMLElementInProcess.ReplaceWith(BrowserAPI.IHTMLElementInProcess[])"/>, applying only to nodes that are elements, may be easier to read and use.
            </remarks>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChild">The child to be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReplaceChild(BrowserAPI.IHTMLElementInProcess,System.Int32)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChildIndex">The zero based index of the child to be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReplaceWith(System.String[])">
            <summary>
            Replaces this Element in the children list of its parent with a set of strings. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to replace.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReplaceWith(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Replaces this Element in the children list of its parent with a set of Node objects.
            </summary>
            <param name="nodes">A set of Node objects to replace.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReplaceChildren(System.String[])">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of strings to replace the Element's existing children with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.ReplaceChildren(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of Node objects to replace the Element's existing children with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.CloneNode(System.Boolean)">
            <summary>
            <para>Returns a duplicate of the node on which this method was called. Its parameter controls if the subtree contained in a node is also cloned or not.</para>
            <para>
            Cloning a node copies all of its attributes and their values, including intrinsic (inline) listeners.
            It does not copy event listeners added using addEventListener() or those assigned to element properties (e.g., node.onclick = someFunction).
            Additionally, for a &lt;canvas&gt; element, the painted image is not copied.
            </para>
            </summary>
            <remarks>
            Warning: cloneNode() may lead to duplicate element IDs in a document!
            If the original node has an id attribute, and the clone will be placed in the same document, then you should modify the clone's ID to be unique.
            Also, name attributes may need to be modified, depending on whether duplicate names are expected.</remarks>
            <param name="deep">
            <para>If true, then the node and its whole subtree, including text that may be in child Text nodes, is also copied.</para>
            <para>If false, only the node will be cloned. The subtree, including any text that the node contains, is not cloned.</para>
            <para>Note that deep has no effect on void elements, such as the &lt;img&gt; and &lt;input&gt; elements.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.IsSameNode(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Is a legacy alias the for the === strict equality operator. That is, it tests whether two nodes are the same (in other words, whether they reference the same object).
            </summary>
            <param name="other">The Node to test against.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.IsEqualNode(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Tests whether two nodes are equal.
            Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on.
            The specific set of data points that must match varies depending on the types of the nodes.
            </summary>
            <param name="other">The Node to compare equality with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.Contains(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Returns a boolean value indicating whether a node is a descendant of a given node, that is the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.
            </summary>
            <remarks>Note: A node is contained inside itself.</remarks>
            <param name="other">The Node to test with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLElementInProcess.CompareDocumentPosition(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            <para>Reports the position of its argument node relative to the node on which it is called.</para>
            <para>
            It returns an integer value representing otherNode's position relative to node as a bitmask combining the following constant properties of Node:<br />
            - 1 (Node.DOCUMENT_POSITION_DISCONNECTED): Both nodes are in different documents or different trees in the same document.<br />
            - 2 (Node.DOCUMENT_POSITION_PRECEDING): otherNode precedes the node in either a pre-order depth-first traversal of a tree containing both (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 4 (Node.DOCUMENT_POSITION_FOLLOWING): otherNode follows the node in either a pre-order depth-first traversal of a tree containing both (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 8 (Node.DOCUMENT_POSITION_CONTAINS): otherNode is an ancestor of the node.<br />
            - 16 (Node.DOCUMENT_POSITION_CONTAINED_BY): otherNode is a descendant of the node.<br />
            - 32 (Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC): The result relies upon arbitrary and/or implementation-specific behavior and is not guaranteed to be portable.
            </para>
            <para>
            Zero or more bits can be set, depending on which scenarios apply.
            For example, if otherNode is located earlier in the document and contains the node on which compareDocumentPosition() was called,
            then both the DOCUMENT_POSITION_CONTAINS and DOCUMENT_POSITION_PRECEDING bits would be set, producing a value of 10 (0x0A).
            </para>
            </summary>
            <param name="other">The Node for which position should be reported, relative to the node.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLMediaElement">
            <summary>
            <para>The <i>HTMLMediaElement</i> interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.</para>
            <para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">HTMLVideoElement</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">HTMLAudioElement</see> elements both inherit this interface.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLMediaElement.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.#ctor(System.Threading.Tasks.Task{Microsoft.JSInterop.IJSObjectReference})">
            <summary>
            <para>The <i>HTMLMediaElement</i> interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.</para>
            <para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">HTMLVideoElement</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">HTMLAudioElement</see> elements both inherit this interface.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLMediaElement.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.DisposeAsync">
            <summary>
            Releases the JS instance for this htmlMediaElement.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Src">
            <summary>
            <para>A string that reflects the src HTML attribute, which contains the URL of a media resource to use.</para>
            <para>
            Note: The best way to know the URL of the media resource currently in active use in this element is to look at the value of the currentSrc attribute,
            which also takes into account selection of a best or preferred media resource from a list provided in an HTMLSourceElement (which represents a &lt;source&gt; element).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetSrc(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Src" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetSrc(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Src" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.SrcObject">
            <summary>
            A MediaStream representing the media to play or that has played in the current HTMLMediaElement, or null if not assigned.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetSrcObject(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.SrcObject" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetSrcObject(BrowserAPI.IMediaStream,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.SrcObject" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Controls">
            <summary>
            A boolean that reflects the controls HTML attribute, indicating whether user interface items for controlling the resource should be displayed.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetControls(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Controls" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetControls(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Controls" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Autoplay">
            <summary>
            <para>A boolean value that reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.</para>
            <para>A media element whose source is a MediaStream and whose autoplay property is true will begin playback when it becomes active(that is, when MediaStream.active becomes true).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetAutoplay(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Autoplay" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetAutoplay(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Autoplay" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Loop">
            <summary>
            A boolean that reflects the loop HTML attribute, which indicates whether the media element should start over when it reaches the end.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetLoop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Loop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetLoop(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Loop" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.DefaultMuted">
            <summary>
            <para>A boolean that reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default.</para>
            <para>This property has no dynamic effect. To mute and unmute the audio output, use the muted property.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetDefaultMuted(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.DefaultMuted" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetDefaultMuted(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.DefaultMuted" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Preload">
            <summary>
            <para>A string that reflects the preload HTML attribute, indicating what data should be preloaded, if any.</para>
            <para>
            Possible values are:<br />
            - "none": Indicates that the media should not be preloaded.<br />
            - "metadata": Indicates that only media metadata (e.g. length) is fetched.<br />
            - "auto": Indicates that the whole media file can be downloaded, even if the user is not expected to use it.<br />
            - "": A synonym of the auto value.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetPreload(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Preload" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetPreload(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Preload" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.CurrentSrc">
            <summary>
            <para>Returns a string with the absolute URL of the chosen media resource.</para>
            <para>This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetCurrentSrc(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.CurrentSrc" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.CurrentTime">
            <summary>
            <para>A double-precision floating-point value indicating the current playback time in seconds.</para>
            <para>
            if the media has not started to play and has not been seeked, this value is the media's initial playback time.
            Setting this value seeks the media to the new time. The time is specified relative to the media's timeline.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetCurrentTime(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.CurrentTime" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetCurrentTime(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.CurrentTime" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Duration">
            <summary>
            <para>A read-only double-precision floating-point value indicating the total duration of the media in seconds.</para>
            <para>
            If no media data is available, the returned value is NaN.<br />
            If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is +Infinity.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetDuration(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Duration" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Seekable">
            <summary>
            Returns a TimeRanges object that contains the time ranges that the user is able to seek to.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetSeekable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Seekable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Muted">
            <summary>
            <para>A boolean that determines whether audio is muted. true if the audio is muted and false otherwise.</para>
            <para>true means muted and false means not muted.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetMuted(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Muted" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetMuted(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Muted" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Volume">
            <summary>
            A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetVolume(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Volume" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetVolume(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Volume" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Paused">
            <summary>
            <para>Returns a boolean that indicates whether the media element is paused.</para>
            <para>true is paused and false is not paused.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetPaused(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Paused" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Ended">
            <summary>
            <para>Returns a boolean that indicates whether the media element has finished playing.</para>
            <para>true if the media contained in the element has finished playing.</para>
            <para>If the source of the media is a MediaStream, this value is true if the value of the stream's active property is false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetEnded(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Ended" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Seeking">
            <summary>
            Returns a boolean that indicates whether the media is in the process of seeking to a new position.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetSeeking(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Seeking" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.ReadyState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the readiness state of the media.</para>
            <para>
            Possible values are:<br />
            0 = HAVE_NOTHING: No information is available about the media resource.<br />
            1 = HAVE_METADATA: Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.<br />
            2 = HAVE_CURRENT_DATA: Data is available for the current playback position, but not enough to actually play more than one frame.<br />
            3 = HAVE_FUTURE_DATA: Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).<br />
            4 = HAVE_ENOUGH_DATA: Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetReadyState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.ReadyState" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.NetworkState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the current state of fetching the media over the network.</para>
            <para>
            Possible values are:<br />
            0 = NETWORK_EMPTY: There is no data yet. Also, readyState is HAVE_NOTHING.<br />
            1 = NETWORK_IDLE: HTMLMediaElement is active and has selected a resource, but is not using the network.<br />
            2 = NETWORK_LOADING: The browser is downloading HTMLMediaElement data.<br />
            3 = NETWORK_NO_SOURCE: No HTMLMediaElement src found.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetNetworkState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.NetworkState" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Buffered">
            <summary>
            Returns a TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetBuffered(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Buffered" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.Played">
            <summary>
            Returns a TimeRanges object that contains the ranges of the media source that the browser has played, if any.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetPlayed(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.Played" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.PlaybackRate">
            <summary>
            <para>A double that indicates the rate at which the media is being played back.</para>
            <para>
            This is used to implement user controls for fast forward, slow motion, and so forth.<br />
            The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.
            </para>
            <para>A negative playbackRate value indicates that the media should be played backwards, but support for this is not yet widespread.</para>
            <para>The audio is muted when the fast forward or slow motion is outside a useful range(for example, Gecko mutes the sound outside the range 0.25 to 4.0).</para>
            <para>The pitch of the audio is corrected by default. You can disable pitch correction using the HTMLMediaElement.preservesPitch property.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetPlaybackRate(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.PlaybackRate" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetPlaybackRate(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.PlaybackRate" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.DefaultPlaybackRate">
            <summary>
            <para>A double indicating the default playback rate for the media.</para>
            <para>A double. 1.0 is "normal speed," values lower than 1.0 make the media play slower than normal, higher values make it play faster.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetDefaultPlaybackRate(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.DefaultPlaybackRate" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetDefaultPlaybackRate(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.DefaultPlaybackRate" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.CrossOrigin">
            <summary>
            <para>A string indicating the CORS setting for this media element. See <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</see> for details.</para>
            <para>
            Possible values are:<br />
            "anonymous":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>same-origin</i> credentials mode.
            This means that CORS is enabled and credentials are sent if the resource is fetched from the same origin from which the document was loaded.<br />
            "use-credentials":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>include</i> credentials mode.
            All resources requests by the element will use CORS, regardless of what domain the fetch is from.<br />
            "" (or any other value):
            The same as specifing as "anonymous".
            </para>
            <para>If the <i>crossOrigin</i> property is not specified, the resource is fetched without CORS (the <i>no-cors</i> mode and the <i>same-origin</i> credentials mode).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetCrossOrigin(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.CrossOrigin" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetCrossOrigin(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.CrossOrigin" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.PreservesPitch">
            <summary>
            <para>
            A boolean value that determines if the pitch of the sound will be preserved.<br />
            If set to false, the pitch will adjust to the speed of the audio.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetPreservesPitch(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.PreservesPitch" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetPreservesPitch(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.PreservesPitch" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElement.DisableRemotePlayback">
            <summary>
            <para>A boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI.</para>
            <para>false means "not disabled", which means "enabled"</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.GetDisableRemotePlayback(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.DisableRemotePlayback" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.SetDisableRemotePlayback(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.HTMLMediaElement.DisableRemotePlayback" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.Pause(System.Threading.CancellationToken)">
            play() is declared in HTMLMediaElementBase
            <summary>
            <para>Pauses the media playback.</para>
            <para>If the media is already in a paused state this method will have no effect.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.Load(System.Threading.CancellationToken)">
            <summary>
            Resets the media to the beginning and selects the best available source from the sources provided using the <i>src</i> attribute or the <i>&lt;source&gt;</i> element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.FastSeek(System.Double,System.Threading.CancellationToken)">
            <summary>
            <para>Quickly seeks to the given time with low precision.</para>
            <para>Note: If you need to seek with precision, you should set HTMLMediaElement.currentTime instead.</para>
            </summary>
            <param name="time"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElement.CanPlayType(System.String,System.Threading.CancellationToken)">
            <summary>
            Given a string specifying a MIME media type (potentially with the codecs parameter included), canPlayType() returns the string<br />
            - "probably", if the media should be playable<br />
            - "maybe", if there's not enough information to determine whether the media will play or not<br />
            - "", if the media cannot be played
            </summary>
            <param name="type">A string specifying the MIME type of the media and (optionally) a codecs parameter containing a comma-separated list of the supported codecs.</param>
            <param name="cancellationToken"></param>
            <returns>"probably", "maybe" or ""</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementBase.Play(System.Threading.CancellationToken)">
            <summary>
            Attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started.<br />
            Failure to begin playback for any reason, such as permission issues, result in the promise being rejected.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnError">
            <summary>
            <para>Fired when the resource could not be loaded due to an error (for example, a network connectivity problem).</para>
            <para>This event is not cancelable and does not bubble.</para>
            <para>
            If an error already occurred when subscribing (<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error">error</see> property is not empty), this event is fired immediately.<br />
            Note: When <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error">error</see> is not empty, this event is fired with every subscription.
            </para>
            <para>
            <b>Parameters</b><br />
            - int <i>code</i>:<br />
            A number which represents the general type of error that occurred.<br />
            Possible values are:<br />
            1 = MEDIA_ERR_ABORTED: The fetching of the associated resource was aborted by the user's request.<br />
            2 = MEDIA_ERR_NETWORK: Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available.<br />
            3 = MEDIA_ERR_DECODE: Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error.<br />
            4 = MEDIA_ERR_SRC_NOT_SUPPORTED: The associated resource or media provider object (such as a MediaStream) has been found to be unsuitable.<br />
            - string <i>message</i>:<br />
            A human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred;
            specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong.
            This text and its format is not defined by the specification and will vary from one user agent to another.
            If no diagnostics are available, or no explanation can be provided, this value is an empty string ("").
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnCanPlay">
            <summary>
            <para>Fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnCanPlayThrough">
            <summary>
            <para>Fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnPlaying">
            <summary>
            <para>Fired after playback is first started, and whenever it is restarted. For example it is fired when playback resumes after having been paused or delayed due to lack of data.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnLoadStart">
            <summary>
            Fired when the browser has started to load a resource.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnProgress">
            <summary>
            <para>Fired periodically as the browser loads a resource.></para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnLoadedData">
            <summary>
            Fired when the first frame of the media has finished loading; often the first frame.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnLoadedMetadata">
            <summary>
            Fired when the metadata has been loaded.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnStalled">
            <summary>
            <para>Fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnSuspend">
            <summary>
            <para>Fired when the media data loading has been suspended.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnWaiting">
            <summary>
            <para>Fired when playback has stopped because of a temporary lack of data.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnAbort">
            <summary>
            <para>Fired when the resource was not fully loaded, but not as the result of an error.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnEmptied">
            <summary>
            <para>Fired when the media has become empty; for example, when the media has already been loaded (or partially loaded), and the <see cref="M:BrowserAPI.Implementation.HTMLMediaElement.Load(System.Threading.CancellationToken)">Load()</see> method is called to reload it.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnPlay">
            <summary>
            <para>Fired when the paused property is changed from true to false, as a result of the <see cref="M:BrowserAPI.Implementation.HTMLMediaElementBase.Play(System.Threading.CancellationToken)">Play()</see> method, or the autoplay attribute.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnPause">
            <summary>
            <para>Fired when a request to pause play is handled and the activity has entered its paused state, most commonly occurring when the media's <see cref="M:BrowserAPI.Implementation.HTMLMediaElement.Pause(System.Threading.CancellationToken)">Pause()</see> method is called.</para>
            <para>The event is sent once the <see cref="M:BrowserAPI.Implementation.HTMLMediaElement.Pause(System.Threading.CancellationToken)">Pause()</see> method returns and after the media element's paused property has been changed to true.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnEnded">
            <summary>
            <para>Fired when playback stops when end of the media (&lt;audio&gt; and &lt;video&gt;) is reached or because no further data is available.</para>
            <para>This event occurs based upon HTMLMediaElement (&lt;audio&gt; and &lt;video&gt;) fire ended when playback reaches the end of the media.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnSeeking">
            <summary>
            <para>Fired when a seek operation starts, meaning the Boolean seeking attribute has changed to true and the media is seeking a new position.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnSeeked">
            <summary>
            <para>Fired when a seek operation completed, the current playback position has changed, and the Boolean seeking attribute is changed to false.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnTimeUpdate">
            <summary>
            <para>Fired when the time indicated by the currentTime attribute has been updated.</para>
            <para>
            The event frequency is dependent on the system load, but will be thrown between about 4Hz and 66Hz (assuming the event handlers don't take longer than 250ms to run).
            User agents are encouraged to vary the frequency of the event based on the system load and the average cost of processing the event each time,
            so that the UI updates are not any more frequent than the user agent can comfortably handle while decoding the video.
            </para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnVolumeChange">
            <summary>
            <para>Fired when either the volume attribute or the muted attribute has changed.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnRateChange">
            <summary>
            <para>Fired when the playback rate has changed.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.HTMLMediaElementBase.OnDurationChange">
            <summary>
            Fired when the duration attribute has been updated.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.HTMLMediaElementInProcess">
            <summary>
            <para>The <i>HTMLMediaElement</i> interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.</para>
            <para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">HTMLVideoElement</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">HTMLAudioElement</see> elements both inherit this interface.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>HTMLMediaElement</i> interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.</para>
            <para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">HTMLVideoElement</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">HTMLAudioElement</see> elements both inherit this interface.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.Dispose">
            <summary>
            Releases the JS instance for this htmlMediaElement.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Src">
            <summary>
            <para>A string that reflects the src HTML attribute, which contains the URL of a media resource to use.</para>
            <para>
            Note: The best way to know the URL of the media resource currently in active use in this element is to look at the value of the currentSrc attribute,
            which also takes into account selection of a best or preferred media resource from a list provided in an HTMLSourceElement (which represents a &lt;source&gt; element).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.SrcObject">
            <summary>
            A MediaStream representing the media to play or that has played in the current HTMLMediaElement, or null if not assigned.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Controls">
            <summary>
            A boolean that reflects the controls HTML attribute, indicating whether user interface items for controlling the resource should be displayed.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Autoplay">
            <summary>
            <para>A boolean value that reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.</para>
            <para>A media element whose source is a MediaStream and whose autoplay property is true will begin playback when it becomes active(that is, when MediaStream.active becomes true).</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Loop">
            <summary>
            A boolean that reflects the loop HTML attribute, which indicates whether the media element should start over when it reaches the end.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.DefaultMuted">
            <summary>
            <para>A boolean that reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default.</para>
            <para>This property has no dynamic effect. To mute and unmute the audio output, use the muted property.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Preload">
            <summary>
            <para>A string that reflects the preload HTML attribute, indicating what data should be preloaded, if any.</para>
            <para>
            Possible values are:<br />
            - "none": Indicates that the media should not be preloaded.<br />
            - "metadata": Indicates that only media metadata (e.g. length) is fetched.<br />
            - "auto": Indicates that the whole media file can be downloaded, even if the user is not expected to use it.<br />
            - "": A synonym of the auto value.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.CurrentSrc">
            <summary>
            <para>Returns a string with the absolute URL of the chosen media resource.</para>
            <para>This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.CurrentTime">
            <summary>
            <para>A double-precision floating-point value indicating the current playback time in seconds.</para>
            <para>
            if the media has not started to play and has not been seeked, this value is the media's initial playback time.
            Setting this value seeks the media to the new time. The time is specified relative to the media's timeline.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Duration">
            <summary>
            <para>A read-only double-precision floating-point value indicating the total duration of the media in seconds.</para>
            <para>
            If no media data is available, the returned value is NaN.<br />
            If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is +Infinity.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Seekable">
            <summary>
            Returns a TimeRanges object that contains the time ranges that the user is able to seek to.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Muted">
            <summary>
            <para>A boolean that determines whether audio is muted. true if the audio is muted and false otherwise.</para>
            <para>true means muted and false means not muted.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Volume">
            <summary>
            A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Paused">
            <summary>
            <para>Returns a boolean that indicates whether the media element is paused.</para>
            <para>true is paused and false is not paused.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Ended">
            <summary>
            <para>Returns a boolean that indicates whether the media element has finished playing.</para>
            <para>true if the media contained in the element has finished playing.</para>
            <para>If the source of the media is a MediaStream, this value is true if the value of the stream's active property is false.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Seeking">
            <summary>
            Returns a boolean that indicates whether the media is in the process of seeking to a new position.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.ReadyState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the readiness state of the media.</para>
            <para>
            Possible values are:<br />
            0 = HAVE_NOTHING: No information is available about the media resource.<br />
            1 = HAVE_METADATA: Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.<br />
            2 = HAVE_CURRENT_DATA: Data is available for the current playback position, but not enough to actually play more than one frame.<br />
            3 = HAVE_FUTURE_DATA: Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).<br />
            4 = HAVE_ENOUGH_DATA: Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.NetworkState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the current state of fetching the media over the network.</para>
            <para>
            Possible values are:<br />
            0 = NETWORK_EMPTY: There is no data yet. Also, readyState is HAVE_NOTHING.<br />
            1 = NETWORK_IDLE: HTMLMediaElement is active and has selected a resource, but is not using the network.<br />
            2 = NETWORK_LOADING: The browser is downloading HTMLMediaElement data.<br />
            3 = NETWORK_NO_SOURCE: No HTMLMediaElement src found.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Buffered">
            <summary>
            Returns a TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.Played">
            <summary>
            Returns a TimeRanges object that contains the ranges of the media source that the browser has played, if any.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.PlaybackRate">
            <summary>
            <para>A double that indicates the rate at which the media is being played back.</para>
            <para>
            This is used to implement user controls for fast forward, slow motion, and so forth.<br />
            The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.
            </para>
            <para>A negative playbackRate value indicates that the media should be played backwards, but support for this is not yet widespread.</para>
            <para>The audio is muted when the fast forward or slow motion is outside a useful range(for example, Gecko mutes the sound outside the range 0.25 to 4.0).</para>
            <para>The pitch of the audio is corrected by default. You can disable pitch correction using the HTMLMediaElement.preservesPitch property.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.DefaultPlaybackRate">
            <summary>
            <para>A double indicating the default playback rate for the media.</para>
            <para>A double. 1.0 is "normal speed," values lower than 1.0 make the media play slower than normal, higher values make it play faster.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.CrossOrigin">
            <summary>
            <para>A string indicating the CORS setting for this media element. See <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</see> for details.</para>
            <para>
            Possible values are:<br />
            "anonymous":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>same-origin</i> credentials mode.
            This means that CORS is enabled and credentials are sent if the resource is fetched from the same origin from which the document was loaded.<br />
            "use-credentials":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>include</i> credentials mode.
            All resources requests by the element will use CORS, regardless of what domain the fetch is from.<br />
            "" (or any other value):
            The same as specifing as "anonymous".
            </para>
            <para>If the <i>crossOrigin</i> property is not specified, the resource is fetched without CORS (the <i>no-cors</i> mode and the <i>same-origin</i> credentials mode).</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.PreservesPitch">
            <summary>
            <para>
            A boolean value that determines if the pitch of the sound will be preserved.<br />
            If set to false, the pitch will adjust to the speed of the audio.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.HTMLMediaElementInProcess.DisableRemotePlayback">
            <summary>
            <para>A boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI.</para>
            <para>false means "not disabled", which means "enabled"</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.Pause">
            play() is declared in HTMLMediaElementBase
            <summary>
            <para>Pauses the media playback.</para>
            <para>If the media is already in a paused state this method will have no effect.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.Load">
            <summary>
            Resets the media to the beginning and selects the best available source from the sources provided using the <i>src</i> attribute or the <i>&lt;source&gt;</i> element.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.FastSeek(System.Double)">
            <summary>
            <para>Quickly seeks to the given time with low precision.</para>
            <para>Note: If you need to seek with precision, you should set HTMLMediaElement.currentTime instead.</para>
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.HTMLMediaElementInProcess.CanPlayType(System.String)">
            <summary>
            Given a string specifying a MIME media type (potentially with the codecs parameter included), canPlayType() returns the string<br />
            - "probably", if the media should be playable<br />
            - "maybe", if there's not enough information to determine whether the media will play or not<br />
            - "", if the media cannot be played
            </summary>
            <param name="type">A string specifying the MIME type of the media and (optionally) a codecs parameter containing a comma-separated list of the supported codecs.</param>
            <returns>"probably", "maybe" or ""</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.Language">
            <summary>
            This interface is a collection of language related functionalities,
            for example <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language">navigator.language</see>
            or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/lang">document.documentElement.lang</see> attribute.<br />
            It is not an official API.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            This interface is a collection of language related functionalities,
            for example <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language">navigator.language</see>
            or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/lang">document.documentElement.lang</see> attribute.<br />
            It is not an official API.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.Language.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>Returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.GetBrowserLanguage(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Language.BrowserLanguage" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Language.BrowserLanguages">
            <summary>
            <para>navigator.languages</para>
            <para>
            Returns an array of strings representing the languages known to the user, by order of preference.
            The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47).
            In the returned array they are ordered by preference with the most preferred language first.
            </para>
            <para>The value of navigator.language is the first element of the returned array.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.GetBrowserLanguages(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Language.BrowserLanguages" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Language.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>The content of the "lang" attribute on the html tag.</para>
            <para>language abbreviation: e.g. "en", "fr", "es", "de"</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.GetHtmlLanguage(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Language.HtmlLanguage" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Language.SetHtmlLanguage(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Language.HtmlLanguage" />
            <param name="language">language abbreviation: e.g. "en", "fr", "es", "de"</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.LanguageInProcess">
            <summary>
            This interface is a collection of language related functionalities,
            for example <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language">navigator.language</see>
            or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/lang">document.documentElement.lang</see> attribute.<br />
            It is not an official API.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LanguageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            This interface is a collection of language related functionalities,
            for example <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language">navigator.language</see>
            or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/lang">document.documentElement.lang</see> attribute.<br />
            It is not an official API.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LanguageInProcess.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>Returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LanguageInProcess.BrowserLanguages">
            <summary>
            <para>navigator.languages</para>
            <para>
            Returns an array of strings representing the languages known to the user, by order of preference.
            The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47).
            In the returned array they are ordered by preference with the most preferred language first.
            </para>
            <para>The value of navigator.language is the first element of the returned array.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LanguageInProcess.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>The content of the "lang" attribute on the html tag.</para>
            <para>language abbreviation: e.g. "en", "fr", "es", "de"</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.LocalStorage">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LocalStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.LocalStorage.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.LocalStorageInProcess">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LocalStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.LocalStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.MediaDevices">
            <summary>
            The <i>MediaDevices</i> interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
            In essence, it lets you obtain access to any hardware source of media data.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>MediaDevices</i> interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
            In essence, it lets you obtain access to any hardware source of media data.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaDevices.SupportedConstraints">
            <summary>
            Returns an object based on the MediaTrackSupportedConstraints dictionary,
            whose member fields each specify one of the constrainable properties the user agent understands.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetSupportedConstraints(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaDevices.SupportedConstraints" />
            <param name="cancellationToken"></param>
            <returns>
            A new object based on the MediaTrackSupportedConstraints dictionary listing the constraints supported by the user agent.
            Because only constraints supported by the user agent are included in the list, each of these Boolean properties has the value true.
            </returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Prompts the user for permission to use a media input which produces a MediaStream with tracks containing the requested types of media.</para>
            <para>
            That stream can include, for example, a video track (produced by either a hardware or virtual video source such as a camera, video recording device, screen sharing service, and so forth),
            an audio track (similarly, produced by a physical or virtual audio source like a microphone, A/D converter, or the like),
            and possibly other track types.
            </para>
            <para>
            It returns a Promise that resolves to a MediaStream object.
            If the user denies permission, or matching media is not available, then the promise is rejected with NotAllowedError or NotFoundError DOMException respectively.
            </para>
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetUserMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetUserMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetUserMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            With the user's permission through a prompt, turns on a camera and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input.
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetDisplayMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevices.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesBase.EnumerateDevices(System.Threading.CancellationToken)">
            <summary>
            <para>
            Requests a list of the currently available media input and output devices, such as microphones, cameras, headsets, and so forth.
            The returned Promise is resolved with an array of MediaDeviceInfo objects describing the devices.
            </para>
            <para>
            The returned list will omit any devices that are blocked by the document Permission Policy: microphone, camera, speaker-selection(for output devices), and so on.
            Access to particular non-default devices is also gated by the Permissions API, and the list will omit devices for which the user has not granted explicit permission.
            </para>
            </summary>
            <returns>
            <para>
            A Promise that is fulfilled with an array of MediaDeviceInfo objects. Each object in the array describes one of the available media input and output devices.
            The order is significant — the default capture devices will be listed first.
            </para>
            <para>Other than default devices, only devices for which permission has been granted are "available".</para>
            <para>If the media device is an input device, an InputDeviceInfo object will be returned instead.</para>
            <para>If enumeration fails, the promise is rejected.</para>
            </returns>
        </member>
        <member name="T:BrowserAPI.Implementation.MediaDevicesInProcess">
            <summary>
            The <i>MediaDevices</i> interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
            In essence, it lets you obtain access to any hardware source of media data.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>MediaDevices</i> interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
            In essence, it lets you obtain access to any hardware source of media data.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaDevicesInProcess.SupportedConstraints">
            <summary>
            Returns an object based on the MediaTrackSupportedConstraints dictionary,
            whose member fields each specify one of the constrainable properties the user agent understands.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Prompts the user for permission to use a media input which produces a MediaStream with tracks containing the requested types of media.</para>
            <para>
            That stream can include, for example, a video track (produced by either a hardware or virtual video source such as a camera, video recording device, screen sharing service, and so forth),
            an audio track (similarly, produced by a physical or virtual audio source like a microphone, A/D converter, or the like),
            and possibly other track types.
            </para>
            <para>
            It returns a Promise that resolves to a MediaStream object.
            If the user denies permission, or matching media is not available, then the promise is rejected with NotAllowedError or NotFoundError DOMException respectively.
            </para>
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetUserMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetUserMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetUserMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            With the user's permission through a prompt, turns on a camera and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input.
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetDisplayMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.MediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.MediaRecorder">
            <summary>
            <para>The <i>MediaRecorder</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see> provides functionality to easily record media.</para>
            <para>It is created using the <see cref="M:BrowserAPI.IMediaStream.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">CreateRecorder() method</see>.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>MediaRecorder</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see> provides functionality to easily record media.</para>
            <para>It is created using the <see cref="M:BrowserAPI.IMediaStream.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">CreateRecorder() method</see>.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.DisposeAsync">
            <summary>
            Stops recording and releases the JS instance for this media recorder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorder.MimeType">
            <summary>
            <para>
            The <i>mimeType</i> read-only property of the MediaRecorder interface returns the <see href="https://developer.mozilla.org/en-US/docs/Glossary/MIME">MIME</see> media type that was specified when creating the MediaRecorder object,
            or, if none was specified, which was chosen by the browser.
            This is the file format of the file that would result from writing all of the recorded data to disk.
            </para>
            <para>
            Keep in mind that not all codecs are supported by a given container;
            if you write media using a codec that is not supported by a given media container, the resulting file may not work reliably if at all when you try to play it back.
            See our <see href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats">media type and format guide</see> for information about container and codec support across browsers.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.GetMimeType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaRecorder.MimeType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorder.State">
            <summary>
            <para>The <i>state</i> read-only property of the MediaRecorder interface returns the current state of the current MediaRecorder object:</para>
            <para>
            "inactive" - Recording is not occurring — it has either not been started yet, or it has been started and then stopped.<br />
            "recording" - Recording has been started and the user agent is capturing data.<br />
            "paused" - Recording has been started, then paused, but not yet stopped or resumed.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaRecorder.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorder.Stream">
            <summary>
            The <i>stream</i> read-only property of the MediaRecorder interface returns the stream that was passed into the <see cref="M:BrowserAPI.IMediaStream.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">CreateRecorder() method</see> when the MediaRecorder was created.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.GetStream(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaRecorder.Stream" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorder.AudioBitsPerSecond">
            <summary>
            The <i>audioBitsPerSecond</i> read-only property of the MediaRecorder interface returns the audio encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor (if it was provided).
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.GetAudioBitsPerSecond(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaRecorder.AudioBitsPerSecond" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorder.VideoBitsPerSecond">
            <summary>
            The <i>videoBitsPerSecond</i> read-only property of the MediaRecorder interface returns the video encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor, if it was provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.GetVideoBitsPerSecond(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaRecorder.VideoBitsPerSecond" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.Start(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Begins recording media; this method can optionally be passed a timeslice argument with a value in milliseconds.
            If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.
            </summary>
            <param name="timeslice">
            <para>
            The number of milliseconds to record into each Blob.
            If this parameter isn't included (a value less or equal 0), the entire media duration is recorded into a single Blob unless the requestData() method is called to obtain the Blob
            and trigger the creation of a new Blob into which the media continues to be recorded.
            </para>
            <para>Note: Like other time values in web APIs, timeslice is not exact and the real intervals may be slightly longer due to other pending tasks before the creation of the next blob.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.Stop(System.Threading.CancellationToken)">
            <summary>
            Stops recording, at which point a dataavailable event containing the final Blob of saved data is fired. No more recording occurs.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.Resume(System.Threading.CancellationToken)">
            <summary>
            Resumes recording of media after having been paused.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.Pause(System.Threading.CancellationToken)">
            <summary>
            Pauses the recording of media.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.RequestData(System.Threading.CancellationToken)">
            <summary>
            Requests a Blob containing the saved data received thus far (or since the last time requestData() was called.
            After calling this method, recording continues, but in a new Blob.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorder.IsTypeSupported(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>isTypeSupported()</i> static method of the MediaRecorder interface returns a Boolean which is true if the MIME media type specified is one the user agent should be able to successfully record.
            </summary>
            <remarks>In C# this method is not static because it needs an reference to the JS-module.</remarks>
            <param name="mimeType"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.MediaRecorderBase.OnDataAvailable">
            <summary>
            <para>
            Fires periodically each time timeslice milliseconds of media have been recorded (or when the entire media has been recorded, if timeslice wasn't specified).
            The event, of type BlobEvent, contains the recorded media in its data property.
            </para>
            <para>Parameter is the recorded binary data.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.MediaRecorderBase.OnError">
            <summary>
            <para>
            Fired when there are fatal errors that stop recording.
            The received event is based on the MediaRecorderErrorEvent interface, whose error property contains a DOMException that describes the actual error that occurred.
            </para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.MediaRecorderBase.OnStart">
            <summary>
            Fired when media recording starts.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.MediaRecorderBase.OnStop">
            <summary>
            Fired when media recording ends, either when the MediaStream ends, or after the MediaRecorder.stop() method is called.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.MediaRecorderBase.OnResume">
            <summary>
            Fired when media recording resumes after being paused.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.MediaRecorderBase.OnPause">
            <summary>
            Fired when media recording is paused.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.MediaRecorderInProcess">
            <summary>
            <para>The <i>MediaRecorder</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see> provides functionality to easily record media.</para>
            <para>It is created using the <see cref="M:BrowserAPI.IMediaStreamInProcess.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32)">CreateRecorder() method</see>.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>MediaRecorder</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see> provides functionality to easily record media.</para>
            <para>It is created using the <see cref="M:BrowserAPI.IMediaStreamInProcess.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32)">CreateRecorder() method</see>.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.Dispose">
            <summary>
            Stops recording and releases the JS instance for this media recorder.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorderInProcess.MimeType">
            <summary>
            <para>
            The <i>mimeType</i> read-only property of the MediaRecorder interface returns the <see href="https://developer.mozilla.org/en-US/docs/Glossary/MIME">MIME</see> media type that was specified when creating the MediaRecorder object,
            or, if none was specified, which was chosen by the browser.
            This is the file format of the file that would result from writing all of the recorded data to disk.
            </para>
            <para>
            Keep in mind that not all codecs are supported by a given container;
            if you write media using a codec that is not supported by a given media container, the resulting file may not work reliably if at all when you try to play it back.
            See our <see href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats">media type and format guide</see> for information about container and codec support across browsers.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorderInProcess.State">
            <summary>
            <para>The <i>state</i> read-only property of the MediaRecorder interface returns the current state of the current MediaRecorder object:</para>
            <para>
            "inactive" - Recording is not occurring — it has either not been started yet, or it has been started and then stopped.<br />
            "recording" - Recording has been started and the user agent is capturing data.<br />
            "paused" - Recording has been started, then paused, but not yet stopped or resumed.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorderInProcess.Stream">
            <summary>
            The <i>stream</i> read-only property of the MediaRecorder interface returns the stream that was passed into the <see cref="M:BrowserAPI.IMediaStreamInProcess.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32)">CreateRecorder() method</see> when the MediaRecorder was created.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorderInProcess.AudioBitsPerSecond">
            <summary>
            The <i>videoBitsPerSecond</i> read-only property of the MediaRecorder interface returns the video encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor, if it was provided.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaRecorderInProcess.VideoBitsPerSecond">
            <summary>
            The <i>videoBitsPerSecond</i> read-only property of the MediaRecorder interface returns the video encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor, if it was provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.Start(System.Int32)">
            <summary>
            Begins recording media; this method can optionally be passed a timeslice argument with a value in milliseconds.
            If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.
            </summary>
            <param name="timeslice">
            <para>
            The number of milliseconds to record into each Blob.
            If this parameter isn't included (a value less or equal 0), the entire media duration is recorded into a single Blob unless the requestData() method is called to obtain the Blob
            and trigger the creation of a new Blob into which the media continues to be recorded.
            </para>
            <para>Note: Like other time values in web APIs, timeslice is not exact and the real intervals may be slightly longer due to other pending tasks before the creation of the next blob.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.Stop">
            <summary>
            Stops recording, at which point a dataavailable event containing the final Blob of saved data is fired. No more recording occurs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.Resume">
            <summary>
            Resumes recording of media after having been paused.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.Pause">
            <summary>
            Pauses the recording of media.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.RequestData">
            <summary>
            Requests a Blob containing the saved data received thus far (or since the last time requestData() was called.
            After calling this method, recording continues, but in a new Blob.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaRecorderInProcess.IsTypeSupported(System.String)">
            <summary>
            The <i>isTypeSupported()</i> static method of the MediaRecorder interface returns a Boolean which is true if the MIME media type specified is one the user agent should be able to successfully record.
            </summary>
            <remarks>In C# this method is not static because it needs an reference to the JS-module.</remarks>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.MediaStream">
            <summary>
            The <i>MediaStream</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> represents a stream of media content.
            A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</see>.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStream.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            The <i>MediaStream</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> represents a stream of media content.
            A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</see>.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStream.DisposeAsync">
            <summary>
            Stops and removes every <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">media stream track</see> of this <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream">media stream</see>
            and releases the JS instance for this media stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaStream.Active">
            <summary>
            A Boolean value that returns true if the MediaStream is active, or false otherwise.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStream.GetActive(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaStream.Active" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaStream.Id">
            <summary>
            A string containing a 36-character universally unique identifier (UUID) for the object.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStream.GetId(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.MediaStream.Id" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStream.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new MediaRecorder object, given a MediaStream to record.
            Options are available to do things like set the container's MIME type (such as "video/webm" or "video/mp4") and the bit rates of the audio and video tracks or a single overall bit rate.
            </summary>
            <remarks>
            <para>If bits per second values are not specified for video and/or audio, the default adopted for video is 2.5Mbps, while the audio default is adaptive, depending upon the sample rate and the number of channels.</para>
            <para>Video resolution, frame rate and similar settings are specified as constraints when calling getUserMedia(), not here in the MediaStream Recording API.</para>
            </remarks>
            <param name="mimeType">A MIME type specifying the format for the resulting media; you may specify the container format (the browser will select its preferred codecs for audio and/or video), or you may use the codecs parameter and/or the profiles parameter to provide detailed information about which codecs to use and how to configure them. Applications can check in advance if a mimeType is supported by the user agent by calling MediaRecorder.isTypeSupported(). Defaults to an empty string.</param>
            <param name="audioBitsPerSecond">The chosen bitrate for the audio component of the media.</param>
            <param name="videoBitsPerSecond">The chosen bitrate for the video component of the media.</param>
            <param name="bitsPerSecond">The chosen bitrate for the audio and video components of the media. This can be specified instead of the above two properties. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.MediaStreamInProcess">
            <summary>
            The <i>MediaStream</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> represents a stream of media content.
            A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</see>.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStreamInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            The <i>MediaStream</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> represents a stream of media content.
            A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</see>.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStreamInProcess.Dispose">
            <summary>
            Releases the JS instance for this media stream.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaStreamInProcess.Active">
            <summary>
            A Boolean value that returns true if the MediaStream is active, or false otherwise.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MediaStreamInProcess.Id">
            <summary>
            A string containing a 36-character universally unique identifier (UUID) for the object.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.MediaStreamInProcess.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new MediaRecorder object, given a MediaStream to record.
            Options are available to do things like set the container's MIME type (such as "video/webm" or "video/mp4") and the bit rates of the audio and video tracks or a single overall bit rate.
            </summary>
            <remarks>
            <para>If bits per second values are not specified for video and/or audio, the default adopted for video is 2.5Mbps, while the audio default is adaptive, depending upon the sample rate and the number of channels.</para>
            <para>Video resolution, frame rate and similar settings are specified as constraints when calling getUserMedia(), not here in the MediaStream Recording API.</para>
            </remarks>
            <param name="mimeType">A MIME type specifying the format for the resulting media; you may specify the container format (the browser will select its preferred codecs for audio and/or video), or you may use the codecs parameter and/or the profiles parameter to provide detailed information about which codecs to use and how to configure them. Applications can check in advance if a mimeType is supported by the user agent by calling MediaRecorder.isTypeSupported(). Defaults to an empty string.</param>
            <param name="audioBitsPerSecond">The chosen bitrate for the audio component of the media.</param>
            <param name="videoBitsPerSecond">The chosen bitrate for the video component of the media.</param>
            <param name="bitsPerSecond">The chosen bitrate for the audio and video components of the media. This can be specified instead of the above two properties. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.NetworkInformation">
            <summary>
            The NetworkInformation interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.
            The NetworkInformation interface cannot be instantiated. It is instead accessed through the connection property of the Navigator interface or the WorkerNavigator interface.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The NetworkInformation interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.
            The NetworkInformation interface cannot be instantiated. It is instead accessed through the connection property of the Navigator interface or the WorkerNavigator interface.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformation.OnLine">
            <summary>
            <para>
            The onLine property of the Navigator interface returns whether the device is connected to the network, with true meaning online and false meaning offline.
            The property's value changes after the browser checks its network connection, usually when the user follows links or when a script requests a remote page.
            For example, the property should return false when users click links soon after they lose internet connection.
            When its value changes, an online or offline event is fired on the window.
            </para>
            <para>
            Browsers and operating systems leverage different heuristics to determine whether the device is online.
            In general, connection to LAN is considered online, even though the LAN may not have Internet access.
            For example, the computer may be running a virtualization software that has virtual ethernet adapters that are always "connected".
            On Windows, the online status is determined by whether it can reach a Microsoft home server, which may be blocked by firewalls or VPNs, even if the computer has Internet access.
            Therefore, this property is inherently unreliable, and you should not disable features based on the online status, only provide hints when the user may seem offline.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.GetOnLine(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.NetworkInformation.OnLine" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformation.Downlink">
            <summary>
            Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.
            This value is based on recently observed application layer throughput across recently active connections, excluding connections made to a private address space.
            In the absence of recent bandwidth measurement data, the attribute value is determined by the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.GetDownlink(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.NetworkInformation.Downlink" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformation.DownlinkMax">
            <summary>
            Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.GetDownlinkMax(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.NetworkInformation.DownlinkMax" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformation.EffectiveType">
            <summary>
            Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'.
            This value is determined using a combination of recently observed round-trip time and downlink values.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.GetEffectiveType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.NetworkInformation.EffectiveType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformation.Type">
            <summary>
            Returns the type of connection a device is using to communicate with the network. It will be one of the following values:<br />
            "bluetooth", "cellular", "ethernet", "none", "wifi", "wimax", "other", "unknown"
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.GetType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.NetworkInformation.Type" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformation.RTT">
            <summary>
            Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.
            This value is based on recently observed application-layer RTT measurements across recently active connections.
            It excludes connections made to a private address space.
            If no recent measurement data is available, the value is based on the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.GetRTT(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.NetworkInformation.RTT" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformation.SaveData">
            <summary>
            Returns true if the user has set a reduced data usage option on the user agent.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformation.GetSaveData(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.NetworkInformation.SaveData" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformationBase.Dispose">
            <summary>
            Releases the <see cref="T:BrowserAPI.Implementation.NetworkInformationBase.EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.NetworkInformationBase.OnOnline">
            <summary>
            Fired when the browser has gained access to the network and the value of <i>navigator.onLine</i> has switched to true.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.NetworkInformationBase.OnOffline">
            <summary>
            Fired when the browser has lost access to the network and the value of <i>navigator.onLine</i> has switched to false.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.NetworkInformationBase.OnChange">
            <summary>
            Is fired when connection information changes, and the event is received by the NetworkInformation object.
            </summary>
            <remarks>That does not include the property <i>navigator.onLine</i>, for tracking changes of that property use the <see cref="E:BrowserAPI.Implementation.NetworkInformationBase.OnOnline"/>/<see cref="E:BrowserAPI.Implementation.NetworkInformationBase.OnOffline"/> events.</remarks>
        </member>
        <member name="T:BrowserAPI.Implementation.NetworkInformationInProcess">
            <summary>
            The NetworkInformation interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.
            The NetworkInformation interface cannot be instantiated. It is instead accessed through the connection property of the Navigator interface or the WorkerNavigator interface.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.NetworkInformationInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The NetworkInformation interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.
            The NetworkInformation interface cannot be instantiated. It is instead accessed through the connection property of the Navigator interface or the WorkerNavigator interface.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformationInProcess.OnLine">
            <summary>
            <para>
            The onLine property of the Navigator interface returns whether the device is connected to the network, with true meaning online and false meaning offline.
            The property's value changes after the browser checks its network connection, usually when the user follows links or when a script requests a remote page.
            For example, the property should return false when users click links soon after they lose internet connection.
            When its value changes, an online or offline event is fired on the window.
            </para>
            <para>
            Browsers and operating systems leverage different heuristics to determine whether the device is online.
            In general, connection to LAN is considered online, even though the LAN may not have Internet access.
            For example, the computer may be running a virtualization software that has virtual ethernet adapters that are always "connected".
            On Windows, the online status is determined by whether it can reach a Microsoft home server, which may be blocked by firewalls or VPNs, even if the computer has Internet access.
            Therefore, this property is inherently unreliable, and you should not disable features based on the online status, only provide hints when the user may seem offline.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformationInProcess.Downlink">
            <summary>
            Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.
            This value is based on recently observed application layer throughput across recently active connections, excluding connections made to a private address space.
            In the absence of recent bandwidth measurement data, the attribute value is determined by the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformationInProcess.DownlinkMax">
            <summary>
            Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformationInProcess.EffectiveType">
            <summary>
            Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'.
            This value is determined using a combination of recently observed round-trip time and downlink values.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformationInProcess.Type">
            <summary>
            Returns the type of connection a device is using to communicate with the network. It will be one of the following values:<br />
            "bluetooth", "cellular", "ethernet", "none", "wifi", "wimax", "other", "unknown"
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformationInProcess.RTT">
            <summary>
            Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.
            This value is based on recently observed application-layer RTT measurements across recently active connections.
            It excludes connections made to a private address space.
            If no recent measurement data is available, the value is based on the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.NetworkInformationInProcess.SaveData">
            <summary>
            Returns true if the user has set a reduced data usage option on the user agent.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.Permissions">
            <summary>
            <para>
            The Permissions API provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.
            For example, it can be used to determine if permission to access a particular feature or API has been granted, denied, or requires specific user permission.
            </para>
            <para>The <i>Permissions</i> interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Permissions.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>
            The Permissions API provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.
            For example, it can be used to determine if permission to access a particular feature or API has been granted, denied, or requires specific user permission.
            </para>
            <para>The <i>Permissions</i> interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Permissions.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the user permission status for a given API.</para>
            <para>
            The user permission names are defined in the respective specifications for each feature.
            The permissions supported by different browser versions are listed in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions#browser_compatibility">compatibility data of the Permissions interface</see>.
            </para>
            </summary>
            <param name="name">
            <para>
            A string containing the name of the API whose permissions you want to query, such as camera, bluetooth, microphone, geolocation.<br />
            The returned Promise will reject with a TypeError if the permission name is not supported by the browser.
            </para>
            <para>
            The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#permission-aware_apis">Permission-aware APIs</see> are listed below:<br />
            "background-sync" - Background Synchronization API<br />
            "clipboard-read" - Clipboard API<br />
            "clipboard-write" - Clipboard API<br />
            "compute-pressure" - Compute Pressure API<br />
            "geolocation" - Geolocation API<br />
            "local-fonts" - Local Font Access API<br />
            "camera" - Media Capture and Streams API<br />
            "microphone" - Media Capture and Streams API<br />
            "notifications" - Notifications API<br />
            "payment-handler" - Payment Handler API<br />
            "push" - Push API<br />
            "screen-wake-lock" - Screen Wake Lock API<br />
            "accelerometer" - Sensor APIs<br />
            "gyroscope" - Sensor APIs<br />
            "magnetometer" - Sensor APIs<br />
            "ambient-light-sensor" - Sensor APIs<br />
            "storage-access" - Storage Access API<br />
            "top-level-storage-access" - Storage Access API<br />
            "persistent-storage" - Storage API<br />
            "bluetooth" - Web Bluetooth API<br />
            "midi" - Web MIDI API<br />
            "window-management" - Window Management API
            </para>
            </param>
            <param name="userVisibleOnly">
            <para>Only relevant for "push" permission.</para>
            <para>
            Indicates whether you want to show a notification for every message or be able to send silent push notifications.<br />
            The default is false.
            </para>
            </param>
            <param name="sysex">
            <para>Only relevant for "midi" permission.</para>
            <para>
            Indicates whether you need and/or receive system exclusive messages.<br />
            The default is false.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.PermissionsInProcess">
            <summary>
            <para>
            The Permissions API provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.
            For example, it can be used to determine if permission to access a particular feature or API has been granted, denied, or requires specific user permission.
            </para>
            <para>The <i>Permissions</i> interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionsInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>
            The Permissions API provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.
            For example, it can be used to determine if permission to access a particular feature or API has been granted, denied, or requires specific user permission.
            </para>
            <para>The <i>Permissions</i> interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionsInProcess.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the user permission status for a given API.</para>
            <para>
            The user permission names are defined in the respective specifications for each feature.
            The permissions supported by different browser versions are listed in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions#browser_compatibility">compatibility data of the Permissions interface</see>.
            </para>
            </summary>
            <param name="name">
            <para>
            A string containing the name of the API whose permissions you want to query, such as camera, bluetooth, microphone, geolocation.<br />
            The returned Promise will reject with a TypeError if the permission name is not supported by the browser.
            </para>
            <para>
            The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#permission-aware_apis">Permission-aware APIs</see> are listed below:<br />
            "background-sync" - Background Synchronization API<br />
            "clipboard-read" - Clipboard API<br />
            "clipboard-write" - Clipboard API<br />
            "compute-pressure" - Compute Pressure API<br />
            "geolocation" - Geolocation API<br />
            "local-fonts" - Local Font Access API<br />
            "camera" - Media Capture and Streams API<br />
            "microphone" - Media Capture and Streams API<br />
            "notifications" - Notifications API<br />
            "payment-handler" - Payment Handler API<br />
            "push" - Push API<br />
            "screen-wake-lock" - Screen Wake Lock API<br />
            "accelerometer" - Sensor APIs<br />
            "gyroscope" - Sensor APIs<br />
            "magnetometer" - Sensor APIs<br />
            "ambient-light-sensor" - Sensor APIs<br />
            "storage-access" - Storage Access API<br />
            "top-level-storage-access" - Storage Access API<br />
            "persistent-storage" - Storage API<br />
            "bluetooth" - Web Bluetooth API<br />
            "midi" - Web MIDI API<br />
            "window-management" - Window Management API
            </para>
            </param>
            <param name="userVisibleOnly">
            <para>Only relevant for "push" permission.</para>
            <para>
            Indicates whether you want to show a notification for every message or be able to send silent push notifications.<br />
            The default is false.
            </para>
            </param>
            <param name="sysex">
            <para>Only relevant for "midi" permission.</para>
            <para>
            Indicates whether you need and/or receive system exclusive messages.<br />
            The default is false.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.PermissionStatus">
            <summary>
            The <i>PermissionStatus</i> interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionStatus.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            The <i>PermissionStatus</i> interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionStatus.DisposeAsync">
            <summary>
            Releases the JS instance for this media recorder.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.PermissionStatus.Name">
            <summary>
            Returns the name of a requested permission, identical to the <i>name</i> passed to <see cref="M:BrowserAPI.IPermissions.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionStatus.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.PermissionStatus.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.PermissionStatus.State">
            <summary>
            Returns the state of a requested permission. This property returns one of<br />
            - "granted": The user, or the user agent on the user's behalf, has given express permission to use a powerful feature. The caller can use the feature possibly without having the user agent ask the user's permission.<br />
            - "denied": The user, or the user agent on the user's behalf, has denied access to this powerful feature. The caller can't use the feature.<br />
            - "prompt": The user has not given express permission to use the feature (i.e., it's the same as denied). It also means that if a caller attempts to use the feature, the user agent will either be prompting the user for permission or access to the feature will be denied.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionStatus.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.PermissionStatus.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionStatusBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.PermissionStatusBase.OnChange">
            <summary>
            Fires whenever the <i>State</i> property changes.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.PermissionStatusInProcess">
            <summary>
            The <i>PermissionStatus</i> interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionStatusInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            The <i>PermissionStatus</i> interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.PermissionStatusInProcess.Dispose">
            <summary>
            Releases the JS instance for this media recorder.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.PermissionStatusInProcess.Name">
            <summary>
            Returns the name of a requested permission, identical to the <i>name</i> passed to <see cref="M:BrowserAPI.IPermissionsInProcess.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.PermissionStatusInProcess.State">
            <summary>
            Returns the state of a requested permission. This property returns one of<br />
            - "granted": The user, or the user agent on the user's behalf, has given express permission to use a powerful feature. The caller can use the feature possibly without having the user agent ask the user's permission.<br />
            - "denied": The user, or the user agent on the user's behalf, has denied access to this powerful feature. The caller can't use the feature.<br />
            - "prompt": The user has not given express permission to use the feature (i.e., it's the same as denied). It also means that if a caller attempts to use the feature, the user agent will either be prompting the user for permission or access to the feature will be denied.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.SensorAPI">
            <summary>
            The Sensor APIs are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Sensor APIs are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateAmbientLightSensor(System.Double,System.Threading.CancellationToken)">
            <summary>
            The <i>AmbientLightSensor()</i> constructor creates a new AmbientLightSensor object, which returns the current light level or illuminance of the ambient light around the hosting device.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateGyroscope(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Gyroscope()</i> constructor creates a new Gyroscope object which provides on each reading the angular velocity of the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateAccelerometer(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Accelerometer()</i> constructor creates a new Accelerometer object which returns the acceleration of the device along all three axes at the time it is read.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateLinearAccelerationSensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>LinearAccelerationSensor()</i> constructor creates a new LinearAccelerationSensor object which provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateGravitySensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>GravitySensor()</i> constructor creates a new GravitySensor object which provides on each reading the gravity applied to the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateAbsoluteOrientationSensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>AbsoluteOrientationSensor()</i> constructor creates a new AbsoluteOrientationSensor object which describes the device's physical orientation in relation to the Earth's reference coordinate system.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateRelativeOrientationSensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>RelativeOrientationSensor()</i> constructor creates a new RelativeOrientationSensor object which describes the device's physical orientation.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateMagnetometer(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Magnetometer()</i> constructor creates a new Magnetometer object which returns information about the magnetic field as detected by a device's primary magnetometer sensor.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPI.CreateUncalibratedMagnetometer(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>UncalibratedMagnetometer()</i> constructor creates a new UncalibratedMagnetometer object which returns information about the uncalibrated magnetic field as detected by a device's primary magnetometer sensor.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.SensorAPIInProcess">
            <summary>
            The Sensor APIs are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The Sensor APIs are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateAmbientLightSensor(System.Double)">
            <summary>
            The <i>AmbientLightSensor()</i> constructor creates a new AmbientLightSensor object, which returns the current light level or illuminance of the ambient light around the hosting device.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateGyroscope(System.Double,System.String)">
            <summary>
            The <i>Gyroscope()</i> constructor creates a new Gyroscope object which provides on each reading the angular velocity of the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateAccelerometer(System.Double,System.String)">
            <summary>
            The <i>Accelerometer()</i> constructor creates a new Accelerometer object which returns the acceleration of the device along all three axes at the time it is read.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateLinearAccelerationSensor(System.Double,System.String)">
            <summary>
            The <i>LinearAccelerationSensor()</i> constructor creates a new LinearAccelerationSensor object which provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateGravitySensor(System.Double,System.String)">
            <summary>
            The <i>GravitySensor()</i> constructor creates a new GravitySensor object which provides on each reading the gravity applied to the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateAbsoluteOrientationSensor(System.Double,System.String)">
            <summary>
            The <i>AbsoluteOrientationSensor()</i> constructor creates a new AbsoluteOrientationSensor object which describes the device's physical orientation in relation to the Earth's reference coordinate system.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateRelativeOrientationSensor(System.Double,System.String)">
            <summary>
            The <i>RelativeOrientationSensor()</i> constructor creates a new RelativeOrientationSensor object which describes the device's physical orientation.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateMagnetometer(System.Double,System.String)">
            <summary>
            The <i>Magnetometer()</i> constructor creates a new Magnetometer object which returns information about the magnetic field as detected by a device's primary magnetometer sensor.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorAPIInProcess.CreateUncalibratedMagnetometer(System.Double,System.String)">
            <summary>
            <para>The <i>UncalibratedMagnetometer()</i> constructor creates a new UncalibratedMagnetometer object which returns information about the uncalibrated magnetic field as detected by a device's primary magnetometer sensor.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="T:BrowserAPI.Implementation.AbsoluteOrientationSensor">
            <summary>
            <para>The <i>AbsoluteOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', 'gyroscope', and 'magnetometer' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.AbsoluteOrientationSensor.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>AbsoluteOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', 'gyroscope', and 'magnetometer' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.AbsoluteOrientationSensor.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.AbsoluteOrientationSensor.GetQuaternion(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.AbsoluteOrientationSensor.Quaternion" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.AbsoluteOrientationSensor.PopulateMatrix(System.Threading.CancellationToken)">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.AbsoluteOrientationSensorInProcess">
            <summary>
            <para>The <i>AbsoluteOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', 'gyroscope', and 'magnetometer' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.AbsoluteOrientationSensorInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>AbsoluteOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', 'gyroscope', and 'magnetometer' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.AbsoluteOrientationSensorInProcess.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.AbsoluteOrientationSensorInProcess.PopulateMatrix">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.Accelerometer">
            <summary>
            <para>The <i>Accelerometer</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.Accelerometer.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>Accelerometer</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.Accelerometer.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Accelerometer.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Accelerometer.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Accelerometer.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Accelerometer.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Accelerometer.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Accelerometer.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Accelerometer.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Accelerometer.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.AccelerometerInProcess">
            <summary>
            <para>The <i>Accelerometer</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.AccelerometerInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>Accelerometer</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.AccelerometerInProcess.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.AccelerometerInProcess.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.AccelerometerInProcess.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.AmbientLightSensor">
            <summary>
            <para>The <i>AmbientLightSensor</i> interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.</para>
            <para>To use this sensor, the user must grant permission to the 'ambient-light-sensor' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.AmbientLightSensor.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>AmbientLightSensor</i> interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.</para>
            <para>To use this sensor, the user must grant permission to the 'ambient-light-sensor' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.AmbientLightSensor.Illuminance">
            <summary>
            Returns the current light level in lux of the ambient light level around the hosting device.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.AmbientLightSensor.GetIlluminance(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.AmbientLightSensor.Illuminance" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.AmbientLightSensorInProcess">
            <summary>
            <para>The <i>AmbientLightSensor</i> interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.</para>
            <para>To use this sensor, the user must grant permission to the 'ambient-light-sensor' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.AmbientLightSensorInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>AmbientLightSensor</i> interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.</para>
            <para>To use this sensor, the user must grant permission to the 'ambient-light-sensor' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.AmbientLightSensorInProcess.Illuminance">
            <summary>
            Returns the current light level in lux of the ambient light level around the hosting device.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.GravitySensor">
            <summary>
            <para>The <i>GravitySensor</i> interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.GravitySensor.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>GravitySensor</i> interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.GravitySensor.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GravitySensor.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.GravitySensor.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.GravitySensor.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GravitySensor.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.GravitySensor.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.GravitySensor.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.GravitySensor.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.GravitySensor.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.GravitySensorInProcess">
            <summary>
            <para>The <i>GravitySensor</i> interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.GravitySensorInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>GravitySensor</i> interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.GravitySensorInProcess.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GravitySensorInProcess.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GravitySensorInProcess.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.Gyroscope">
            <summary>
            <para>The <i>Gyroscope</i> interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'gyroscope' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.Gyroscope.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>Gyroscope</i> interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'gyroscope' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.Gyroscope.X">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gyroscope.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gyroscope.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gyroscope.Y">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gyroscope.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gyroscope.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Gyroscope.Z">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Gyroscope.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Gyroscope.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.GyroscopeInProcess">
            <summary>
            <para>The <i>Gyroscope</i> interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'gyroscope' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.GyroscopeInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>Gyroscope</i> interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'gyroscope' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.GyroscopeInProcess.X">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GyroscopeInProcess.Y">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.GyroscopeInProcess.Z">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.LinearAccelerationSensor">
            <summary>
            <para>The <i>LinearAccelerationSensor</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.LinearAccelerationSensor.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>LinearAccelerationSensor</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.LinearAccelerationSensor.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LinearAccelerationSensor.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.LinearAccelerationSensor.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.LinearAccelerationSensor.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LinearAccelerationSensor.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.LinearAccelerationSensor.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.LinearAccelerationSensor.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.LinearAccelerationSensor.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.LinearAccelerationSensor.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.LinearAccelerationSensorInProcess">
            <summary>
            <para>The <i>LinearAccelerationSensor</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.LinearAccelerationSensorInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>LinearAccelerationSensor</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.LinearAccelerationSensorInProcess.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LinearAccelerationSensorInProcess.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.LinearAccelerationSensorInProcess.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.Magnetometer">
            <summary>
            <para>The <i>Magnetometer</i> interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.Magnetometer.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>Magnetometer</i> interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.Magnetometer.X">
            <summary>
            Returns a double containing the magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Magnetometer.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Magnetometer.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Magnetometer.Y">
            <summary>
            Returns a double containing the magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Magnetometer.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Magnetometer.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Magnetometer.Z">
            <summary>
            Returns a double containing the magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Magnetometer.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Magnetometer.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.MagnetometerInProcess">
            <summary>
            <para>The <i>Magnetometer</i> interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.MagnetometerInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>Magnetometer</i> interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.MagnetometerInProcess.X">
            <summary>
            Returns a double containing the magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MagnetometerInProcess.Y">
            <summary>
            Returns a double containing the magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.MagnetometerInProcess.Z">
            <summary>
            Returns a double containing the magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.RelativeOrientationSensor">
            <summary>
            <para>The <i>RelativeOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', and 'gyroscope' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.RelativeOrientationSensor.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>RelativeOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', and 'gyroscope' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.RelativeOrientationSensor.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.RelativeOrientationSensor.GetQuaternion(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.RelativeOrientationSensor.Quaternion" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.RelativeOrientationSensor.PopulateMatrix(System.Threading.CancellationToken)">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.RelativeOrientationSensorInProcess">
            <summary>
            <para>The <i>RelativeOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', and 'gyroscope' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.RelativeOrientationSensorInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>RelativeOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', and 'gyroscope' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.RelativeOrientationSensorInProcess.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.RelativeOrientationSensorInProcess.PopulateMatrix">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.Sensor">
            <summary>
            The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces.
            This interface cannot be used directly.
            Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Sensor.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces.
            This interface cannot be used directly.
            Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Sensor.DisposeAsync">
            <summary>
            Releases the JS instance for this service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.Sensor.Activated">
            <summary>
            Returns a boolean value indicating whether the sensor is active.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Sensor.GetActivated(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Sensor.Activated" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Sensor.HasReading">
            <summary>
            Returns a boolean value indicating whether the sensor has a reading.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Sensor.GetHasReading(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Sensor.HasReading" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Sensor.Timestamp">
            <summary>
            Returns the timestamp of the latest sensor reading.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Sensor.GetTimestamp(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Sensor.Timestamp" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Sensor.Start(System.Threading.CancellationToken)">
            <summary>
            Activates one of the sensors based on Sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Sensor.Stop(System.Threading.CancellationToken)">
            <summary>
            Deactivates one of the sensors based on Sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.SensorBase.OnError">
            <summary>
            <para>
            Is fired when an exception occurs on a sensor.
            After this event has occurred, the Sensor object becomes idle. If the sensor was reading values, it will stop until it restarts.
            </para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.SensorBase.OnActivate">
            <summary>
            Is fired when a sensor becomes activated. It means that it will start obtaining readings.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.SensorBase.OnReading">
            <summary>
            Is fired when a new reading is available on a sensor.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.SensorInProcess">
            <summary>
            The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces.
            This interface cannot be used directly.
            Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces.
            This interface cannot be used directly.
            Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorInProcess.Dispose">
            <summary>
            Releases the JS instance for this service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.SensorInProcess.Activated">
            <summary>
            Returns a boolean value indicating whether the sensor is active.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.SensorInProcess.HasReading">
            <summary>
            Returns a boolean value indicating whether the sensor has a reading.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.SensorInProcess.Timestamp">
            <summary>
            Returns the timestamp of the latest sensor reading.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorInProcess.Start">
            <summary>
            Activates one of the sensors based on Sensor.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SensorInProcess.Stop">
            <summary>
            Deactivates one of the sensors based on Sensor.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.UncalibratedMagnetometer">
            <summary>
            <para>The <i>UncalibratedMagnetometer</i> interface of the Sensor APIs provides information about the uncalibrated magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometer.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>UncalibratedMagnetometer</i> interface of the Sensor APIs provides information about the uncalibrated magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometer.X">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometer.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.UncalibratedMagnetometer.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometer.Y">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometer.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.UncalibratedMagnetometer.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometer.Z">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometer.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.UncalibratedMagnetometer.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometer.XBias">
            <summary>
            Returns a double representing the hard iron distortion correction around x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometer.GetXBias(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.UncalibratedMagnetometer.XBias" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometer.YBias">
            <summary>
            Returns a double representing the hard iron distortion correction around y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometer.GetYBias(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.UncalibratedMagnetometer.YBias" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometer.ZBias">
            <summary>
            Returns a double representing the hard iron distortion correction around z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometer.GetZBias(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.UncalibratedMagnetometer.ZBias" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess">
            <summary>
            <para>The <i>UncalibratedMagnetometer</i> interface of the Sensor APIs provides information about the uncalibrated magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>UncalibratedMagnetometer</i> interface of the Sensor APIs provides information about the uncalibrated magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess.X">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess.Y">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess.Z">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess.XBias">
            <summary>
            Returns a double representing the hard iron distortion correction around x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess.YBias">
            <summary>
            Returns a double representing the hard iron distortion correction around y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.UncalibratedMagnetometerInProcess.ZBias">
            <summary>
            Returns a double representing the hard iron distortion correction around z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerContainer">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerContainer.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.GetController(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerContainer.Controller" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerContainer.Ready">
            <summary>
            Provides a way of delaying code execution until a service worker is active.
            It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker.
            Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.GetReady(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerContainer.Ready" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL.
            The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            Gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array.
            The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainer.StartMessages(System.Threading.CancellationToken)">
            <summary>
            Explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()).
            This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerBase.Dispose">
            <summary>
            Releases the <see cref="T:BrowserAPI.Implementation.ServiceWorkerContainerBase.EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerBase.Register(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns>true, if service worker is supported, otherwise false</returns>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerContainerBase.OnControllerChange">
            <summary>
            Occurs when the document's associated <i>ServiceWorkerRegistration</i> acquires a new active worker.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerContainerBase.OnMessage">
            <summary>
            <para>Is used in a page controlled by a service worker to receive messages from the service worker.</para>
            <para>Parameter is <see href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data">MessageEvent.data</see> as json.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerContainerInProcess">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.Ready">
            <summary>
            Provides a way of delaying code execution until a service worker is active.
            It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker.
            Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.GetReady(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.Ready" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL.
            The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            Gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array.
            The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerContainerInProcess.StartMessages">
            <summary>
            Explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()).
            This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerRegistration">
            <summary>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistration.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistration.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.DisposeAsync">
            <summary>
            Releases the JS instance for this service worker registration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Active">
            <summary>
            Returns a service worker whose ServiceWorker.state is activating or activated.
            This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetActive(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Active" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Installing">
            <summary>
            Returns a service worker whose ServiceWorker.state is installing.
            This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetInstalling(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Installing" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Waiting">
            <summary>
            Returns a service worker whose ServiceWorker.state is installed.
            This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetWaiting(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Waiting" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Scope">
            <summary>
            Returns a unique identifier for a service worker registration.
            The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetScope(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerRegistration.Scope" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistration.UpdateViaCache">
            <summary>
            <para>
            Updates the cache using the mode specified in the call to ServiceWorkerContainer.register.
            Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.
            </para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.GetUpdateViaCache(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorkerRegistration.UpdateViaCache" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistration.Update(System.Threading.CancellationToken)">
            <summary>
            Attempts to update the service worker.
            It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker.
            The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationBase.Unregister(System.Threading.CancellationToken)">
            <summary>
            Unregisters the service worker registration and returns a Promise.
            The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register() with the same scope.)
            The service worker will finish any ongoing operations before it is unregistered.
            </summary>
            <param name="cancellationToken"></param>
            <returns>false if no registration was found, otherwise true (irrespective of whether unregistration happened or not)</returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerRegistrationBase.OnUpdateFound">
            <summary>
            Is fired any time the <i>ServiceWorkerRegistration.installing</i> property acquires a new service worker.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess">
            <summary>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Dispose">
            <summary>
            Releases the JS instance for this service worker registration.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Active">
            <summary>
            Returns a service worker whose ServiceWorker.state is activating or activated.
            This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Installing">
            <summary>
            Returns a service worker whose ServiceWorker.state is installing.
            This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Waiting">
            <summary>
            Returns a service worker whose ServiceWorker.state is installed.
            This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Scope">
            <summary>
            Returns a unique identifier for a service worker registration.
            The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.UpdateViaCache">
            <summary>
            <para>
            Updates the cache using the mode specified in the call to ServiceWorkerContainer.register.
            Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.
            </para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerRegistrationInProcess.Update(System.Threading.CancellationToken)">
            <summary>
            Attempts to update the service worker.
            It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker.
            The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorker">
            <summary>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorker.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorker.DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.DisposeAsync">
            <summary>
            Releases the JS instance for this service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorker.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration.
            The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.GetScriptUrl(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorker.ScriptUrl" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorker.State">
            <summary>
            Returns a string representing the current state of the service worker.
            It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ServiceWorker.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorker.PostMessage(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>
            Sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerBase.OnStateChange">
            <summary>
            <para>Fires anytime the ServiceWorker.state changes.</para>
            <para>Parameter is the new state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ServiceWorkerBase.OnError">
            <summary>
            <para>Fires whenever an error occurs in the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ServiceWorkerInProcess">
            <summary>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="M:BrowserAPI.Implementation.ServiceWorkerInProcess.Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerInProcess.Dispose">
            <summary>
            Releases the JS instance for this service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerInProcess.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration.
            The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ServiceWorkerInProcess.State">
            <summary>
            Returns a string representing the current state of the service worker.
            It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ServiceWorkerInProcess.PostMessage(System.Object)">
            <summary>
            <para>
            Sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.Implementation.SessionStorage">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.SessionStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.SessionStorage.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.SessionStorageInProcess">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.SessionStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.Implementation.SessionStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ScreenDetailed">
            <summary>
            <para>The <i>ScreenDetailed</i> interface of the Window Management API represents detailed information about one specific screen available to the user's device.</para>
            <para><i>ScreenDetailed</i> objects can be accessed via the <see cref="P:BrowserAPI.IScreenDetails.Screens">ScreenDetails.screens</see> and <see cref="P:BrowserAPI.IScreenDetails.CurrentScreen">ScreenDetails.currentScreen</see> properties.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>ScreenDetailed</i> interface of the Window Management API represents detailed information about one specific screen available to the user's device.</para>
            <para><i>ScreenDetailed</i> objects can be accessed via the <see cref="P:BrowserAPI.IScreenDetails.Screens">ScreenDetails.screens</see> and <see cref="P:BrowserAPI.IScreenDetails.CurrentScreen">ScreenDetails.currentScreen</see> properties.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.DisposeAsync">
            <summary>
            Releases the JS instance for this ScreenDetails.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.Left">
            <summary>
            <para>A number representing the x-coordinate (left-hand edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true left-hand edge, ignoring any OS UI element drawn at the left of the screen.
            Windows cannot be placed in those areas; to get the left-hand coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.Implementation.ScreenDetailed.AvailLeft"/>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetLeft(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the x-coordinate (left-hand edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true left-hand edge, ignoring any OS UI element drawn at the left of the screen.
            Windows cannot be placed in those areas; to get the left-hand coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.Implementation.ScreenDetailed.AvailLeft"/>.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.Top">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true top edge, ignoring any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas; to get the top coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.Implementation.ScreenDetailed.AvailTop"/>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetTop(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true top edge, ignoring any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas; to get the top coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.Implementation.ScreenDetailed.AvailTop"/>.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.AvailLeft">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.Implementation.ScreenDetailed.Left"/> property, plus the width of any OS UI element drawn on the left of the screen.
            Windows cannot be placed in those areas, so availLeft is useful for giving you the left boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetAvailLeft(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.Implementation.ScreenDetailed.Left"/> property, plus the width of any OS UI element drawn on the left of the screen.
            Windows cannot be placed in those areas, so availLeft is useful for giving you the left boundary of the actual area available to open or place windows.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.AvailTop">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the available screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.Implementation.ScreenDetailed.Top"/> property, plus the height of any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas, so availTop is useful for giving you the top boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetAvailTop(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the available screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.Implementation.ScreenDetailed.Top"/> property, plus the height of any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas, so availTop is useful for giving you the top boundary of the actual area available to open or place windows.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.Label">
            <summary>
            <para>A descriptive label for the screen, for example "Built-in Retina Display".</para>
            <para>This is useful for constructing a list of options to display to the user if you want them to choose a screen to display content on.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetLabel(System.Threading.CancellationToken)">
            <summary>
            <para>A descriptive label for the screen, for example "Built-in Retina Display".</para>
            <para>This is useful for constructing a list of options to display to the user if you want them to choose a screen to display content on.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.DevicePixelRatio">
            <summary>
            <para>A number representing the screen's device pixel ratio.</para>
            <para>
            This is the same as the value returned by <i>Window.devicePixelRatio</i>, except that <i>Window.devicePixelRatio</i>:<br />
            - always returns the device pixel ratio for the current screen.<br />
            - also includes scaling of the window itself, i.e., page zoom (at least on some browser implementations).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetDevicePixelRatio(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the screen's device pixel ratio.</para>
            <para>
            This is the same as the value returned by <i>Window.devicePixelRatio</i>, except that <i>Window.devicePixelRatio</i>:<br />
            - always returns the device pixel ratio for the current screen.<br />
            - also includes scaling of the window itself, i.e., page zoom (at least on some browser implementations).
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.IsPrimary">
            <summary>
            <para>A boolean indicating whether the screen is set as the operating system (OS) primary screen or not.</para>
            <para>
            The OS hosting the browser will have one primary screen, and one or more secondary screens.
            The primary screen can usually be specified by the user via OS settings, and generally contains OS UI features such as the taskbar/icon dock.
            The primary screen may change for a number of reasons, such as a screen being unplugged.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetIsPrimary(System.Threading.CancellationToken)">
            <summary>
            <para>A boolean indicating whether the screen is set as the operating system (OS) primary screen or not.</para>
            <para>
            The OS hosting the browser will have one primary screen, and one or more secondary screens.
            The primary screen can usually be specified by the user via OS settings, and generally contains OS UI features such as the taskbar/icon dock.
            The primary screen may change for a number of reasons, such as a screen being unplugged.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.IsInternal">
            <summary>
            A boolean indicating whether the screen is internal to the device or external.
            External devices are generally manufactured separately from the device they are attached to and can be connected and disconnected as needed,
            whereas internal screens are part of the device and not intended to be disconnected.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetIsInternal(System.Threading.CancellationToken)">
            <summary>
            A boolean indicating whether the screen is internal to the device or external.
            External devices are generally manufactured separately from the device they are attached to and can be connected and disconnected as needed,
            whereas internal screens are part of the device and not intended to be disconnected.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.Width">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.Width" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.Width" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.Height">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.Height" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.Height" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.AvailWidth">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.AvailWidth" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetAvailWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.AvailWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.AvailHeight">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.AvailHeight" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetAvailHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.AvailHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.ColorDepth">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.ColorDepth" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetColorDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.ColorDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.PixelDepth">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.PixelDepth" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetPixelDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.PixelDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.IsExtended">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.IsExtended" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetIsExtended(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.IsExtended" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.OrientationType">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.OrientationType" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetOrientationType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.OrientationType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailed.OrientationAngle">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.OrientationAngle" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.GetOrientationAngle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetailed.OrientationAngle" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailed.UnlockOrientation(System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.Screen.UnlockOrientation(System.Threading.CancellationToken)" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailedBase.LockOrientation(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.Implementation.ScreenBase.LockOrientation(System.String,System.Threading.CancellationToken)" />
            <param name="orientation"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailedBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ScreenDetailedBase.OnChange">
            <inheritdoc cref="E:BrowserAPI.Implementation.ScreenBase.OnChange" />
        </member>
        <member name="E:BrowserAPI.Implementation.ScreenDetailedBase.OnOrientationChange">
            <inheritdoc cref="E:BrowserAPI.Implementation.ScreenBase.OnOrientationChange" />
        </member>
        <member name="T:BrowserAPI.Implementation.ScreenDetailedInProcess">
            <summary>
            <para>The <i>ScreenDetailed</i> interface of the Window Management API represents detailed information about one specific screen available to the user's device.</para>
            <para><i>ScreenDetailed</i> objects can be accessed via the <see cref="P:BrowserAPI.IScreenDetailsInProcess.Screens">ScreenDetails.screens</see> and <see cref="P:BrowserAPI.IScreenDetailsInProcess.CurrentScreen">ScreenDetails.currentScreen</see> properties.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailedInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>ScreenDetailed</i> interface of the Window Management API represents detailed information about one specific screen available to the user's device.</para>
            <para><i>ScreenDetailed</i> objects can be accessed via the <see cref="P:BrowserAPI.IScreenDetailsInProcess.Screens">ScreenDetails.screens</see> and <see cref="P:BrowserAPI.IScreenDetailsInProcess.CurrentScreen">ScreenDetails.currentScreen</see> properties.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailedInProcess.Dispose">
            <summary>
            Releases the JS instance for this ScreenDetails.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.Left">
            <summary>
            <para>A number representing the x-coordinate (left-hand edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true left-hand edge, ignoring any OS UI element drawn at the left of the screen.
            Windows cannot be placed in those areas; to get the left-hand coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.Implementation.ScreenDetailedInProcess.AvailLeft"/>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.Top">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true top edge, ignoring any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas; to get the top coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.Implementation.ScreenDetailedInProcess.AvailTop"/>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.AvailLeft">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.Implementation.ScreenDetailedInProcess.Left"/> property, plus the width of any OS UI element drawn on the left of the screen.
            Windows cannot be placed in those areas, so availLeft is useful for giving you the left boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.AvailTop">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the available screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.Implementation.ScreenDetailedInProcess.Top"/> property, plus the height of any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas, so availTop is useful for giving you the top boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.Label">
            <summary>
            <para>A descriptive label for the screen, for example "Built-in Retina Display".</para>
            <para>This is useful for constructing a list of options to display to the user if you want them to choose a screen to display content on.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.DevicePixelRatio">
            <summary>
            <para>A number representing the screen's device pixel ratio.</para>
            <para>
            This is the same as the value returned by <i>Window.devicePixelRatio</i>, except that <i>Window.devicePixelRatio</i>:<br />
            - always returns the device pixel ratio for the current screen.<br />
            - also includes scaling of the window itself, i.e., page zoom (at least on some browser implementations).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.IsPrimary">
            <summary>
            <para>A boolean indicating whether the screen is set as the operating system (OS) primary screen or not.</para>
            <para>
            The OS hosting the browser will have one primary screen, and one or more secondary screens.
            The primary screen can usually be specified by the user via OS settings, and generally contains OS UI features such as the taskbar/icon dock.
            The primary screen may change for a number of reasons, such as a screen being unplugged.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.IsInternal">
            <summary>
            A boolean indicating whether the screen is internal to the device or external.
            External devices are generally manufactured separately from the device they are attached to and can be connected and disconnected as needed,
            whereas internal screens are part of the device and not intended to be disconnected.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.Width">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.Width" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.Height">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.Height" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.AvailWidth">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.AvailWidth" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.AvailHeight">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.AvailHeight" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.ColorDepth">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.ColorDepth" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.PixelDepth">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.PixelDepth" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.IsExtended">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.IsExtended" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.OrientationType">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.OrientationType" />
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailedInProcess.OrientationAngle">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenInProcess.OrientationAngle" />
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailedInProcess.UnlockOrientation">
            <inheritdoc cref="M:BrowserAPI.Implementation.ScreenInProcess.UnlockOrientation" />
        </member>
        <member name="T:BrowserAPI.Implementation.ScreenDetails">
            <summary>
            <para>The <i>ScreenDetails</i> interface of the Window Management API represents the details of all the screens available to the user's device.</para>
            <para>This information is accessed via the <see cref="M:BrowserAPI.IWindowManagement.GetScreenDetails(System.Threading.CancellationToken)">Window.getScreenDetails()</see> method.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetails.#ctor(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            <para>The <i>ScreenDetails</i> interface of the Window Management API represents the details of all the screens available to the user's device.</para>
            <para>This information is accessed via the <see cref="M:BrowserAPI.IWindowManagement.GetScreenDetails(System.Threading.CancellationToken)">Window.getScreenDetails()</see> method.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetails.DisposeAsync">
            <summary>
            Releases the JS instance for this ScreenDetails.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetails.CurrentScreen">
            <summary>
            A single ScreenDetailed object representing detailed information about the screen that the current browser window is displayed in.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetails.GetCurrentScreen(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetails.CurrentScreen" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetails.Screens">
            <summary>
            An array of ScreenDetailed objects, each one representing detailed information about one specific screen available to the user's device.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetails.GetScreens(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.ScreenDetails.Screens" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailsBase.DisposeEventTrigger">
            <summary>
            Derived class should implement <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/> and call this method.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ScreenDetailsBase.OnCurrentScreenChange">
            <summary>
            Is fired when the ScreenDetails.currentScreen changes in one of the following ways:<br />
            - The current screen changes to a different screen, i.e., the current browser window is moved to a different screen.<br />
            - One or more of the following properties change on the current screen: width, height, availWidth, availHeight, colorDepth, orientation<br />
            - One or more properties of <see href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenDetailed">ScreenDetailed</see> changes.
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ScreenDetailsBase.OnScreensChange">
            <summary>
            Is fired when the set of screens available to the system has changed: that is, a new screen has become available or an existing screen has become unavailable.
            This will be reflected in a change in the screens array.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ScreenDetailsInProcess">
            <summary>
            <para>The <i>ScreenDetails</i> interface of the Window Management API represents the details of all the screens available to the user's device.</para>
            <para>This information is accessed via the <see cref="M:BrowserAPI.IWindowManagementInProcess.GetScreenDetails(System.Threading.CancellationToken)">Window.getScreenDetails()</see> method.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailsInProcess.#ctor(Microsoft.JSInterop.IJSInProcessObjectReference)">
            <summary>
            <para>The <i>ScreenDetails</i> interface of the Window Management API represents the details of all the screens available to the user's device.</para>
            <para>This information is accessed via the <see cref="M:BrowserAPI.IWindowManagementInProcess.GetScreenDetails(System.Threading.CancellationToken)">Window.getScreenDetails()</see> method.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenDetailsInProcess.Dispose">
            <summary>
            Releases the JS instance for this ScreenDetails.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailsInProcess.CurrentScreen">
            <summary>
            A single ScreenDetailed object representing detailed information about the screen that the current browser window is displayed in.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenDetailsInProcess.Screens">
            <summary>
            An array of ScreenDetailed objects, each one representing detailed information about one specific screen available to the user's device.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.Screen">
            <summary>
            <para>The <i>Screen</i> interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.</para>
            <para>Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>The <i>Screen</i> interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.</para>
            <para>Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.Width">
            <summary>
            Returns the width of the screen in CSS pixels.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.Width" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.Height">
            <summary>
            Returns the height of the screen in CSS pixels.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.Height" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.AvailWidth">
            <summary>
            Returns the amount of horizontal space (in CSS pixels) available to the window.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetAvailWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.AvailWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.AvailHeight">
            <summary>
            <para>
            Returns the height, in CSS pixels, of the space available for Web content on the screen.
            Since Screen is exposed on the Window interface's window.screen property, you access <i>availHeight</i> using <i>window.screen.availHeight</i>.
            </para>
            <para>You can similarly use <see cref="P:BrowserAPI.Implementation.Screen.AvailWidth">Screen.availWidth</see> to get the number of pixels which are horizontally available to the browser for its use.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetAvailHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.AvailHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.ColorDepth">
            <summary>
            Returns the color depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetColorDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.ColorDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.PixelDepth">
            <summary>
            Returns the bit depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetPixelDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.PixelDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.IsExtended">
            <summary>
            <para>Returns true if the user's device has multiple screens, and false if not.</para>
            <para>
            This property is typically accessed via window.screen.isExtended,
            and can be used to test whether multiple screens are available before attempting to create a multi-window, multi-screen layout using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API">Window Management API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetIsExtended(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.IsExtended" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.OrientationType">
            <summary>
            Returns the document's current orientation type, one of:<br />
            - "portrait-primary"<br />
            - "portrait-secondary"<br />
            - "landscape-primary"<br />
            - "landscape-secondary"
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetOrientationType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.OrientationType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.Implementation.Screen.OrientationAngle">
            <summary>
            Returns the document's current orientation angle.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.GetOrientationAngle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.Implementation.Screen.OrientationAngle" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.Screen.UnlockOrientation(System.Threading.CancellationToken)">
            <summary>
            Unlocks the orientation of the containing document from its default orientation.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenBase.Dispose">
            <summary>
            Releases the <see cref="T:BrowserAPI.Implementation.ScreenBase.EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenBase.LockOrientation(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Locks the orientation of the containing document to the specified orientation.</para>
            <para>
            Typically orientation locking is only enabled on mobile devices, and when the browser context is full screen. If locking is supported, then it must work for all the parameter values listed as follows:<br />
            - "any"<br />
            - "natural"<br />
            - "landscape"<br />
            - "landscape-primary"<br />
            - "landscape-secondary"<br />
            - "portrait"<br />
            - "portrait-primary"<br />
            - "portrait-secondary"
            </para>
            </summary>
            <param name="orientation">
            An orientation lock type. One of the following:<br />
            - "any": Any of "portrait-primary", "portrait-secondary", "landscape-primary" or "landscape-secondary".<br />
            - "natural": The natural orientation of the screen from the underlying operating system: either "portrait-primary" or "landscape-primary".<br />
            - "landscape": An orientation where screen width is greater than the screen height. Depending on the platform convention, this may be "landscape-primary", "landscape-secondary", or both.<br />
            - "landscape-primary": The "primary" landscape mode. If the natural orientation is a landscape mode (screen width is greater than height), this will be the same as the natural orientation, and correspond to an angle of 0 degrees. If the natural orientation is a portrait mode, then the user agent can choose either landscape orientation as the "landscape-primary" with an angle of either 90 or 270 degrees ("landscape-secondary" will be the other orientation and angle).<br />
            - "landscape-secondary": The secondary landscape mode. If the natural orientation is a landscape mode, this orientation is upside down relative to the natural orientation, and will have an angle of 180 degrees. If the natural orientation is a portrait mode, this can be either orientation as selected by the user agent: whichever was not selected for "landscape-primary".<br />
            - "portrait": An orientation where screen height is greater than the screen width. Depending on the platform convention, this may be "portrait-primary", "portrait-secondary", or both.<br />
            - "portrait-primary": The "primary" portrait mode. If the natural orientation is a portrait mode (screen height is greater than width), this will be the same as the natural orientation, and correspond to an angle of 0 degrees. If the natural orientation is a landscape mode, then the user agent can choose either portrait orientation as the "portrait-primary" and "portrait-secondary"; one of those will be assigned the angle of 90 degrees and the other will have an angle of 270 degrees.<br />
            - "portrait-secondary": The secondary portrait orientation. If the natural orientation is a portrait mode, this will have an angle of 180 degrees (in other words, the device is upside down relative to its natural orientation). If the natural orientation is a landscape mode, this can be either orientation as selected by the user agent: whichever was not selected for "portrait-primary".<br />
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.Implementation.ScreenBase.OnChange">
            <summary>
            Fired on a specific screen when one or more of the following properties change on it:<br />
            - width<br />
            - height<br />
            - availWidth<br />
            - availHeight<br />
            - colorDepth<br />
            - orientation
            </summary>
        </member>
        <member name="E:BrowserAPI.Implementation.ScreenBase.OnOrientationChange">
            <summary>
            Fired whenever the screen changes orientation, for example when a user rotates their mobile phone.
            </summary>
        </member>
        <member name="T:BrowserAPI.Implementation.ScreenInProcess">
            <summary>
            <para>The <i>Screen</i> interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.</para>
            <para>Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            <para>The <i>Screen</i> interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.</para>
            <para>Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.Width">
            <summary>
            Returns the width of the screen in CSS pixels.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.Height">
            <summary>
            Returns the height of the screen in CSS pixels.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.AvailWidth">
            <summary>
            Returns the amount of horizontal space (in CSS pixels) available to the window.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.AvailHeight">
            <summary>
            <para>
            Returns the height, in CSS pixels, of the space available for Web content on the screen.
            Since Screen is exposed on the Window interface's window.screen property, you access <i>availHeight</i> using <i>window.screen.availHeight</i>.
            </para>
            <para>You can similarly use <see cref="P:BrowserAPI.Implementation.ScreenInProcess.AvailWidth">Screen.availWidth</see> to get the number of pixels which are horizontally available to the browser for its use.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.ColorDepth">
            <summary>
            Returns the color depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.PixelDepth">
            <summary>
            Returns the bit depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.IsExtended">
            <summary>
            <para>Returns true if the user's device has multiple screens, and false if not.</para>
            <para>
            This property is typically accessed via window.screen.isExtended,
            and can be used to test whether multiple screens are available before attempting to create a multi-window, multi-screen layout using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API">Window Management API</see>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.OrientationType">
            <summary>
            Returns the document's current orientation type, one of:<br />
            - "portrait-primary"<br />
            - "portrait-secondary"<br />
            - "landscape-primary"<br />
            - "landscape-secondary"
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.ScreenInProcess.OrientationAngle">
            <summary>
            Returns the document's current orientation angle.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ScreenInProcess.UnlockOrientation">
            <summary>
            Unlocks the orientation of the containing document from its default orientation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.WindowManagement">
            <summary>
            The <i>Window Management API</i> allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens,
            paving the way towards more effective multi-screen applications.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.WindowManagement.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>Window Management API</i> allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens,
            paving the way towards more effective multi-screen applications.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.WindowManagement.Screen">
            <summary>
            The Window property <i>screen</i> returns a reference to the screen object associated with the window.
            The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.WindowManagement.GetScreenDetails(System.Threading.CancellationToken)">
            <summary>
            The <i>getScreenDetails()</i> method of the Window interface returns a Promise that fulfills with a ScreenDetails object instance representing the details of all the screens available to the user's device.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WindowManagement.Open(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>open()</i> method of the Window interface loads a specified resource into a new or existing browsing context (that is, a tab, a window, or an iframe) under a specified name.
            </summary>
            <param name="url">
            A string indicating the URL or path of the resource to be loaded.
            If an empty string ("") is specified or this parameter is omitted, a blank page is opened into the targeted browsing context.
            </param>
            <param name="target">
            <para>
            A string, without whitespace, specifying the name of the browsing context the resource is being loaded into.<br />
            If the name doesn't identify an existing context, a new context is created and given the specified name.<br />
            The special target keywords, "<i>_self</i>", "<i>_blank</i>" (default), "<i>_parent</i>", "<i>_top</i>", and "<i>_unfencedTop</i>" can also be used.<br />
            "<i>_unfencedTop</i>" is only relevant to fenced frames.
            </para>
            <para>This name can be used as the target attribute of &lt;a&gt; or &lt;form&gt; elements.</para>
            </param>
            <param name="features">
            <para>
            A string containing a comma-separated list of window features in the form <i>name=value</i>.
            Boolean values can be set to true using one of: <i>name</i>, <i>name=yes</i>, <i>name=true</i>, or <i>name=n</i> where n is any non-zero integer.
            These features include options such as the window's default size and position, whether or not to open a minimal popup window, and so forth.
            The following options are supported:</para>
            <para>
            - "attributionsrc": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "popup": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "width" or "innerWidth": Specifies the width of the content area, including scrollbars. The minimum required value is 100.<br />
            - "height" or "innerHeight": Specifies the height of the content area, including scrollbars. The minimum required value is 100.<br />
            - "left" or "screenX": Specifies the distance in pixels from the left side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "top" or "screenY": Specifies the distance in pixels from the top side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "noopener": If this feature is set, the new window will not have access to the originating window via Window.opener and returns null. When noopener is used, non-empty target names, other than <i>_top</i>, <i>_self</i>, and <i>_parent</i>, are treated like <i>_blank</i> in terms of deciding whether to open a new browsing context.<br />
            - "noreferrer": If this feature is set, the browser will omit the Referer header, as well as set noopener to true. See rel="noreferrer" for more information.
            </para>
            <para>A null value is treated the same as the empty string ("").</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.Implementation.WindowManagementInProcess">
            <summary>
            The <i>Window Management API</i> allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens,
            paving the way towards more effective multi-screen applications.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.WindowManagementInProcess.#ctor(BrowserAPI.IModuleManager)">
            <summary>
            The <i>Window Management API</i> allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens,
            paving the way towards more effective multi-screen applications.
            </summary>
        </member>
        <member name="P:BrowserAPI.Implementation.WindowManagementInProcess.Screen">
            <summary>
            The Window property <i>screen</i> returns a reference to the screen object associated with the window.
            The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.WindowManagementInProcess.GetScreenDetails(System.Threading.CancellationToken)">
            <summary>
            The <i>getScreenDetails()</i> method of the Window interface returns a Promise that fulfills with a ScreenDetails object instance representing the details of all the screens available to the user's device.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.Implementation.WindowManagementInProcess.Open(System.String,System.String,System.String)">
            <summary>
            The <i>open()</i> method of the Window interface loads a specified resource into a new or existing browsing context (that is, a tab, a window, or an iframe) under a specified name.
            </summary>
            <param name="url">
            A string indicating the URL or path of the resource to be loaded.
            If an empty string ("") is specified or this parameter is omitted, a blank page is opened into the targeted browsing context.
            </param>
            <param name="target">
            <para>
            A string, without whitespace, specifying the name of the browsing context the resource is being loaded into.<br />
            If the name doesn't identify an existing context, a new context is created and given the specified name.<br />
            The special target keywords, "<i>_self</i>", "<i>_blank</i>" (default), "<i>_parent</i>", "<i>_top</i>", and "<i>_unfencedTop</i>" can also be used.<br />
            "<i>_unfencedTop</i>" is only relevant to fenced frames.
            </para>
            <para>This name can be used as the target attribute of &lt;a&gt; or &lt;form&gt; elements.</para>
            </param>
            <param name="features">
            <para>
            A string containing a comma-separated list of window features in the form <i>name=value</i>.
            Boolean values can be set to true using one of: <i>name</i>, <i>name=yes</i>, <i>name=true</i>, or <i>name=n</i> where n is any non-zero integer.
            These features include options such as the window's default size and position, whether or not to open a minimal popup window, and so forth.
            The following options are supported:</para>
            <para>
            - "attributionsrc": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "popup": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "width" or "innerWidth": Specifies the width of the content area, including scrollbars. The minimum required value is 100.<br />
            - "height" or "innerHeight": Specifies the height of the content area, including scrollbars. The minimum required value is 100.<br />
            - "left" or "screenX": Specifies the distance in pixels from the left side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "top" or "screenY": Specifies the distance in pixels from the top side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "noopener": If this feature is set, the new window will not have access to the originating window via Window.opener and returns null. When noopener is used, non-empty target names, other than <i>_top</i>, <i>_self</i>, and <i>_parent</i>, are treated like <i>_blank</i> in terms of deciding whether to open a new browsing context.<br />
            - "noreferrer": If this feature is set, the browser will omit the Referer header, as well as set noopener to true. See rel="noreferrer" for more information.
            </para>
            <para>A null value is treated the same as the empty string ("").</para>
            </param>
        </member>
        <member name="T:BrowserAPI.Implementation.ModuleManager">
            <summary>
            Implementation of <see cref="T:BrowserAPI.IModuleManager"/>.
            </summary>
            <param name="jsRuntime"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.#ctor(Microsoft.JSInterop.IJSRuntime)">
            <summary>
            Implementation of <see cref="T:BrowserAPI.IModuleManager"/>.
            </summary>
            <param name="jsRuntime"></param>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.Dispose">
            <summary>
            <para>Disposes the module synchronously if possible, otherwise asynchronously as fire and forget.</para>
            <para>If the download is running and not finished, the download will be aborted.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.DisposeAsync">
            <summary>
            <para>Disposes the module synchronously if possible, otherwise asynchronously.</para>
            <para>If the download is running and not finished, the download will be aborted.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.Implementation.ModuleManager.LoadModule">
            <summary>
            Implementation of <see cref="M:BrowserAPI.IModuleManager.LoadModule"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.PickerDialogStartIn">
            <summary>
            <para>
            This Struct represents a union of<br />
            - IFileHandle<br />
            - IFileHandleInProcess<br />
            - DirectoryHandle<br />
            - DirectoryHandleInProcess<br />
            - string (of a well known directory: "desktop", "documents", "downloads", "music", "pictures", "videos")
            </para>
            <para>
            The File System API has functions to open dialog pickers.
            The startIn parameter of those functions decides the initial directory the dialog opens in.
            The value of the startIn parameter can be a fileHandle/directoryHandle or a string of a well known directory.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.PickerDialogStartIn.WellKnownDirectoryOrFileHandle">
            <summary>
            string | FileHandleAPI | DirectoryHandleAPI
            </summary>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.#ctor">
            <summary>
            Creates a PickerDialogStartIn object where the value is not set (undefined).
            </summary>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IFileHandle)">
            <summary>
            Creates a PickerDialogStartIn object with the starting folder of the given fileHandle.
            </summary>
            <param name="fileHandle"></param>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.FromHandle(BrowserAPI.IFileHandle)">
            <inheritdoc cref="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IFileHandle)" />
            <param name="fileHandle"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IDirectoryHandle)">
            <summary>
            Creates a PickerDialogStartIn object starting in the directory of the given directoyHandle.
            </summary>
            <param name="directoryHandle"></param>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.FromHandle(BrowserAPI.IDirectoryHandle)">
            <inheritdoc cref="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IDirectoryHandle)" />
            <param name="directoryHandle"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IFileHandleInProcess)">
            <summary>
            Creates a PickerDialogStartIn object with the starting folder of the given fileHandle.
            </summary>
            <param name="fileHandle"></param>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.FromHandle(BrowserAPI.IFileHandleInProcess)">
            <inheritdoc cref="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IFileHandleInProcess)" />
            <param name="fileHandle"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IDirectoryHandleInProcess)">
            <summary>
            Creates a PickerDialogStartIn object starting in the directory of the given directoyHandle.
            </summary>
            <param name="directoryHandle"></param>
        </member>
        <member name="M:BrowserAPI.PickerDialogStartIn.FromHandle(BrowserAPI.IDirectoryHandleInProcess)">
            <inheritdoc cref="M:BrowserAPI.PickerDialogStartIn.#ctor(BrowserAPI.IDirectoryHandleInProcess)" />
            <param name="directoryHandle"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.PickerDialogStartIn.Desktop">
            <summary>
            Creates a PickerDialogStartIn object with "desktop" as starting folder.
            </summary>
        </member>
        <member name="P:BrowserAPI.PickerDialogStartIn.Documents">
            <summary>
            Creates a PickerDialogStartIn object with "documents" as starting folder.
            </summary>
        </member>
        <member name="P:BrowserAPI.PickerDialogStartIn.Downloads">
            <summary>
            Creates a PickerDialogStartIn object with "downloads" as starting folder.
            </summary>
        </member>
        <member name="P:BrowserAPI.PickerDialogStartIn.Music">
            <summary>
            Creates a PickerDialogStartIn object with "music" as starting folder.
            </summary>
        </member>
        <member name="P:BrowserAPI.PickerDialogStartIn.Pictures">
            <summary>
            Creates a PickerDialogStartIn object with "pictures" as starting folder.
            </summary>
        </member>
        <member name="P:BrowserAPI.PickerDialogStartIn.Videos">
            <summary>
            Creates a PickerDialogStartIn object with "videos" as starting folder.
            </summary>
        </member>
        <member name="T:BrowserAPI.GamepadButton">
            <summary>
            <para>The <i>GamepadButton</i> interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.</para>
            <para>A <i>GamepadButton</i> object is returned by querying any value of the array returned by the buttons property of the Gamepad interface.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.GamepadButton.Pressed">
            <summary>
            A boolean value indicating whether the button is currently pressed (true) or unpressed (false).
            </summary>
        </member>
        <member name="P:BrowserAPI.GamepadButton.Touched">
            <summary>
            <para>A boolean value indicating whether the button is currently touched (true) or not touched (false).</para>
            <para>
            If the button is not capable of detecting touch but can return an analog value, the property will be true if the value is greater than 0, and false otherwise.
            If the button is not capable of detecting touch and can only report a digital value, then it should mirror the GamepadButton.pressed property.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.GamepadButton.Value">
            <summary>
            <para>A double value used to represent the current state of analog buttons, such as the triggers on many modern gamepads.</para>
            <para>The values are normalized to the range 0.0 —1.0, with 0.0 representing a button that is not pressed, and 1.0 representing a button that is fully pressed.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.GeolocationCoordinates">
            <summary>
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.Latitude">
            <summary>
            Representing the position's latitude in decimal degrees.
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.Longitude">
            <summary>
            Representing the position's longitude in decimal degrees.
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.Altitude">
            <summary>
            Representing the position's altitude in meters, relative to nominal sea level.
            This value can be null if the implementation cannot provide the data.
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.Accuracy">
            <summary>
            Representing the accuracy of the latitude and longitude properties, expressed in meters.
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.AltitudeAccuracy">
            <summary>
            Representing the accuracy of the altitude expressed in meters. This value can be null if the implementation cannot provide the data.
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.Heading">
            <summary>
            Representing the direction towards which the device is facing.
            This value, specified in degrees, indicates how far off from heading true north the device is.
            0 degrees represents true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees).
            If speed is 0, heading is NaN. If the device is unable to provide heading information, this value is null.
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.Speed">
            <summary>
            Representing the velocity of the device in meters per second.
            This value can be null.
            </summary>
        </member>
        <member name="P:BrowserAPI.GeolocationCoordinates.Timestamp">
            <summary>
            A timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </summary>
        </member>
        <member name="T:BrowserAPI.DOMRect">
            <summary>
            <para>A DOMRect describes the size and position of a rectangle.</para>
            <para>
            The type of box represented by the DOMRect is specified by the method or property that returned it.
            For example, Range.getBoundingClientRect() specifies the rectangle that bounds the content of the range using such objects.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.X">
            <summary>
            The x coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Y">
            <summary>
            The y coordinate of the DOMRect's origin (typically the top-left corner of the rectangle).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Width">
            <summary>
            The width of the DOMRect.
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Height">
            <summary>
            The height of the DOMRect.
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Top">
            <summary>
            Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Bottom">
            <summary>
            Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Left">
            <summary>
            Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative).
            </summary>
        </member>
        <member name="P:BrowserAPI.DOMRect.Right">
            <summary>
            Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative).
            </summary>
        </member>
        <member name="T:BrowserAPI.TimeRange">
            <summary>
            <para>
            When loading a media resource for use by an &lt;audio&gt; or &lt;video&gt; element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered,
            the time ranges that have been played, and the time ranges that are seekable.
            </para>
            <para>
            Several members of HTMLMediaElement objects return a normalized TimeRanges object — which the spec describes as having the following characteristics:<br />
            The ranges in such an object are ordered, don't overlap, and don't touch(adjacent ranges are folded into one bigger range).
            A range can be empty(referencing just a single moment in time).
            </para>
            </summary>
            <param name="Start">The time for the start of the range.</param>
            <param name="End">The time for the end of the range.</param>
        </member>
        <member name="M:BrowserAPI.TimeRange.#ctor(System.Double,System.Double)">
            <summary>
            <para>
            When loading a media resource for use by an &lt;audio&gt; or &lt;video&gt; element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered,
            the time ranges that have been played, and the time ranges that are seekable.
            </para>
            <para>
            Several members of HTMLMediaElement objects return a normalized TimeRanges object — which the spec describes as having the following characteristics:<br />
            The ranges in such an object are ordered, don't overlap, and don't touch(adjacent ranges are folded into one bigger range).
            A range can be empty(referencing just a single moment in time).
            </para>
            </summary>
            <param name="Start">The time for the start of the range.</param>
            <param name="End">The time for the end of the range.</param>
        </member>
        <member name="P:BrowserAPI.TimeRange.Start">
            <summary>The time for the start of the range.</summary>
        </member>
        <member name="P:BrowserAPI.TimeRange.End">
            <summary>The time for the end of the range.</summary>
        </member>
        <member name="T:BrowserAPI.MediaDeviceInfo">
            <summary>
            <para>
            The MediaDeviceInfo interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see>
            contains information that describes a single media input or output device.
            </para>
            <para>
            The list of devices obtained by calling <see cref="M:BrowserAPI.IMediaDevices.EnumerateDevices(System.Threading.CancellationToken)">navigator.mediaDevices.enumerateDevices()</see>
            is an array of MediaDeviceInfo objects, one per media device.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaDeviceInfo.DeviceId">
            <summary>
            Returns a string that is an identifier for the represented device that is persisted across sessions.
            It is un-guessable by other applications and unique to the origin of the calling application.
            It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions).
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaDeviceInfo.GroupId">
            <summary>
            Returns a string that is a group identifier.
            Two devices have the same group identifier if they belong to the same physical device
            — for example a monitor with both a built-in camera and a microphone.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaDeviceInfo.Kind">
            <summary>
            Returns an enumerated value that is either<br />
            - "videoinput"<br />
            - "audioinput"<br />
            - "audiooutput"
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaDeviceInfo.Label">
            <summary>
            Returns a string describing this device (for example "External USB Webcam").
            </summary>
        </member>
        <member name="T:BrowserAPI.MediaTrackConstraints">
            <summary>
            The MediaTrackConstraints dictionary is used to describe a set of capabilities and the value or values each can take on.
            A constraints dictionary is passed into <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints">applyConstraints()</see> to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track,
            and the most recently-requested set of custom constraints can be retrieved by calling <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getConstraints">getConstraints()</see>.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.AspectRatio">
            <summary>
            A ConstrainDouble specifying the video aspect ratio or range of aspect ratios which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.AutoGainControl">
            <summary>
            A ConstrainBoolean object which specifies whether automatic gain control is preferred and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.ChannelCount">
            <summary>
            A ConstrainULong specifying the channel count or range of channel counts which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.DeviceId">
            <summary>
            A ConstrainDOMString object specifying a device ID or an array of device IDs which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.DisplaySurface">
            <summary>
            <para>
            A ConstrainDOMString which specifies the types of display surface that may be selected by the user.
            This may be a single one of the following strings, or a list of them to allow multiple source surfaces:
            </para>
            <para>
            "browser" - The stream contains the contents of a single browser tab selected by the user.<br />
            "monitor" - The stream's video track contains the entire contents of one or more of the user's screens.<br />
            "window" - The stream contains a single window selected by the user for sharing.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.EchoCancellation">
            <summary>
            A ConstrainBoolean object specifying whether or not echo cancellation is preferred and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.FacingMode">
            <summary>
            <para>
            A ConstrainDOMString object specifying a facing or an array of facings which are acceptable and/or required.<br />
            The following strings are permitted values for the facing mode.
            These may represent separate cameras, or they may represent directions in which an adjustable camera can be pointed.
            </para>
            <para>
            "user" - The video source is facing toward the user; this includes, for example, the front-facing camera on a smartphone.<br />
            "environment" - The video source is facing away from the user, thereby viewing their environment. This is the back camera on a smartphone.<br />
            "left" - The video source is facing toward the user but to their left, such as a camera aimed toward the user but over their left shoulder.<br />
            "right" - The video source is facing toward the user but to their right, such as a camera aimed toward the user but over their right shoulder.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.FrameRate">
            <summary>
            A ConstrainDouble specifying the frame rate or range of frame rates which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.GroupId">
            <summary>
            A ConstrainDOMString object specifying a group ID or an array of group IDs which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.Height">
            <summary>
            A ConstrainULong specifying the video height or range of heights which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.NoiseSuppression">
            <summary>
            A ConstrainBoolean which specifies whether noise suppression is preferred and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.SampleRate">
            <summary>
            A ConstrainULong specifying the sample rate or range of sample rates which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.SampleSize">
            <summary>
            A ConstrainULong specifying the sample size or range of sample sizes which are acceptable and/or required.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackConstraints.Width">
            <summary>
            A ConstrainULong specifying the video width or range of widths which are acceptable and/or required.
            </summary>
        </member>
        <member name="T:BrowserAPI.ConstrainBoolean">
            <summary>
            <para>
            The <i>ConstrainBoolean</i> constraint type is used to specify a constraint for a property whose value is a Boolean value.<br />
            Its value may be:
            </para>
            <para>
            <see cref="T:System.Boolean">bool</see> - a plain Boolean.<br />
            <see cref="M:BrowserAPI.ConstrainBoolean.Exact(System.Boolean)">Exact</see> - A Boolean which must be the value of the property. If the property can't be set to this value, matching will fail.<br />
            <see cref="M:BrowserAPI.ConstrainBoolean.Ideal(System.Boolean)">Ideal</see> - A Boolean specifying an ideal value for the property. If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ConstrainBoolean.op_Implicit(System.Boolean)~BrowserAPI.ConstrainBoolean">
            <summary>
            implicit conversion, so a plain bool can be used.
            </summary>
            <param name="value">a plain bool</param>
        </member>
        <member name="M:BrowserAPI.ConstrainBoolean.Exact(System.Boolean)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainBoolean"/> as an "exact" object.<br />
            If the property can't be set to this value, matching will fail.
            </summary>
            <param name="value">The required value.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainBoolean.Ideal(System.Boolean)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainBoolean"/> as an "ideal" object.<br />
            If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.
            </summary>
            <param name="value">The ideal value.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ConstrainDouble">
            <summary>
            <para>
            The <i>ConstrainDouble</i> constraint type is used to specify a constraint for a property whose value is a double-precision floating-point number.<br />
            Its value may be:
            </para>
            <para>
            <see cref="T:System.Double">double</see> - a plain Double.<br />
            <see cref="M:BrowserAPI.ConstrainDouble.Exact(System.Double)">Exact</see> - A decimal number specifying a specific, required, value the property must have to be considered acceptable.<br />
            <see cref="M:BrowserAPI.ConstrainDouble.Ideal(System.Double)">Ideal</see> - A decimal number specifying an ideal value for the property. If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.<br />
            <see cref="M:BrowserAPI.ConstrainDouble.Ideal(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">Ideal(ideal, min, max)</see> - A decimal number specifying the smallest/largest permissible value of the property it describes. If the value cannot remain equal to or greater/less than this value, matching will fail.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ConstrainDouble.op_Implicit(System.Double)~BrowserAPI.ConstrainDouble">
            <summary>
            implicit conversion, so a plain double can be used.
            </summary>
            <param name="value">a plain double</param>
        </member>
        <member name="M:BrowserAPI.ConstrainDouble.Exact(System.Double)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainDouble"/> as an "exact" object.<br />
            If the property can't be set to this value, matching will fail.
            </summary>
            <param name="value">A double specifying a specific, required, value the property must have to be considered acceptable.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainDouble.Ideal(System.Double)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainDouble"/> as an "ideal" object.<br />
            If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.
            </summary>
            <param name="value">The ideal value.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainDouble.Ideal(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainDouble"/> as an "ideal-min-max" object. Each value is optional, but at least one value should be set.<br />
            When ideal value is specified - If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.<br />
            When min value is specified - If the value cannot remain equal to or greater than than this value, matching will fail.<br />
            When max value is specified - If the value cannot remain equal to or less than than this value, matching will fail.
            </summary>
            <param name="ideal">The ideal value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ConstrainULong">
            <summary>
            <para>
            The <i>ConstrainULong</i> constraint type is used to specify a constraint for a property whose value is an integer.<br />
            Its value may be:
            </para>
            <para>
            <see cref="T:System.UInt64">ulong</see> - a plain UInt64.<br />
            <see cref="M:BrowserAPI.ConstrainULong.Exact(System.UInt64)">Exact</see> - An integer specifying a specific, required, value the property must have to be considered acceptable.<br />
            <see cref="M:BrowserAPI.ConstrainULong.Ideal(System.UInt64)">Ideal</see> - An integer specifying an ideal value for the property. If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.<br />
            <see cref="M:BrowserAPI.ConstrainULong.Ideal(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">Ideal(ideal, min, max)</see> - An integer specifying the smallest/largest permissible value of the property it describes. If the value cannot remain equal to or greater/less than this value, matching will fail.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ConstrainULong.op_Implicit(System.UInt64)~BrowserAPI.ConstrainULong">
            <summary>
            implicit conversion, so a plain ulong can be used.
            </summary>
            <param name="value">a plain ulong</param>
        </member>
        <member name="M:BrowserAPI.ConstrainULong.Exact(System.UInt64)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainULong"/> as an "exact" object.<br />
            If the property can't be set to this value, matching will fail.
            </summary>
            <param name="value">A ulong specifying a specific, required, value the property must have to be considered acceptable.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainULong.Ideal(System.UInt64)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainULong"/> as an "ideal" object.<br />
            If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.
            </summary>
            <param name="value">The ideal value.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainULong.Ideal(System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainULong"/> as an "ideal-min-max" object. Each value is optional, but at least one value should be set.<br />
            When ideal value is specified - If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.<br />
            When min value is specified - If the value cannot remain equal to or greater than than this value, matching will fail.<br />
            When max value is specified - If the value cannot remain equal to or less than than this value, matching will fail.
            </summary>
            <param name="ideal">The ideal value.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ConstrainDOMString">
            <summary>
            <para>
            The <i>ConstrainDOMString</i> constraint type is used to specify a constraint for a property whose value is a string.
            Its value may be:
            </para>
            <para>
            <see cref="T:System.String">string</see> or <see cref="T:System.String">string</see>[] - a plain String or an array of String.<br />
            <see cref="M:BrowserAPI.ConstrainDOMString.Exact(System.String)">Exact</see> - A string or an array of strings, one of which must be the value of the property. If the property can't be set to one of the listed values, matching will fail.<br />
            <see cref="M:BrowserAPI.ConstrainDOMString.Ideal(System.String)">Ideal</see> - A string or an array of strings, specifying ideal values for the property. If possible, one of the listed values will be used, but if it's not possible, the user agent will use the closest possible match.<br />
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ConstrainDOMString.op_Implicit(System.String)~BrowserAPI.ConstrainDOMString">
            <summary>
            implicit conversion, so a plain string can be used.
            </summary>
            <param name="value">a plain string</param>
        </member>
        <member name="M:BrowserAPI.ConstrainDOMString.op_Implicit(System.String[])~BrowserAPI.ConstrainDOMString">
            <summary>
            implicit conversion, so a plain string[] can be used.
            </summary>
            <param name="values">a plain string[]</param>
        </member>
        <member name="M:BrowserAPI.ConstrainDOMString.Exact(System.String)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainDOMString"/> as an "exact" object.<br />
            If the property can't be set to this value, matching will fail.
            </summary>
            <param name="value">The required value.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainDOMString.Exact(System.String[])">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainDOMString"/> as an "exact" object.<br />
            If the property can't be set to one of the listed values, matching will fail.
            </summary>
            <param name="values">The list of possible values.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainDOMString.Ideal(System.String)">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainDOMString"/> as an "ideal" object.<br />
            If possible, this value will be used, but if it's not possible, the user agent will use the closest possible match.
            </summary>
            <param name="value">The ideal value.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ConstrainDOMString.Ideal(System.String[])">
            <summary>
            Creates an <see cref="T:BrowserAPI.ConstrainDOMString"/> as an "ideal" object.<br />
            If possible, one of the listed values will be used, but if it's not possible, the user agent will use the closest possible match.
            </summary>
            <param name="values">The list of ideal values.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.MediaTrackSupportedConstraints">
            <summary>
            <para>
            The <i>MediaTrackSupportedConstraints</i> dictionary establishes the list of constrainable properties recognized by the user agent or browser in its implementation of the MediaStreamTrack object.
            An object conforming to MediaTrackSupportedConstraints is returned by <see cref="M:BrowserAPI.IMediaDevices.GetSupportedConstraints(System.Threading.CancellationToken)"/>.
            </para>
            <para>
            Because of the way interface definitions in WebIDL work, if a constraint is requested but not supported, no error will occur.
            Instead, the specified constraints will be applied, with any unrecognized constraints stripped from the request.
            That can lead to confusing and hard to debug errors, so be sure to use getSupportedConstraints() to retrieve this information before attempting to establish constraints
            if you need to know the difference between silently ignoring a constraint and a constraint being accepted.
            </para>
            <para>n actual constraint set is described using an object based on the MediaTrackConstraints dictionary.</para>
            <para>To learn more about how constraints work, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API/Constraints">Capabilities, constraints, and settings</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.AspectRatio">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.AutoGainControl">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.ChannelCount">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.DeviceId">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.DisplaySurface">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.EchoCancellation">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.FacingMode">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.FrameRate">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.GroupId">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.Height">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.NoiseSuppression">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.SampleRate">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.SampleSize">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="P:BrowserAPI.MediaTrackSupportedConstraints.Width">
            <summary>
            A Flag whose value is true if this constraint is supported in the current environment.
            </summary>
        </member>
        <member name="T:BrowserAPI.EnumerableDisposeExtensions">
            <summary>
            Extensions for collections of <see cref="T:System.IDisposable">Disposable</see> objects, including Arrays, Enumerables or tuple of Enumerables.
            </summary>
        </member>
        <member name="M:BrowserAPI.EnumerableDisposeExtensions.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Disposes all objects of the given collection.
            </summary>
            <param name="disposableList"></param>
        </member>
        <member name="M:BrowserAPI.EnumerableDisposeExtensions.DisposeAsync(System.Collections.Generic.IEnumerable{System.IAsyncDisposable})">
            <summary>
            Disposes all objects in parallel of the given collection.
            </summary>
            <param name="asyncDisposableList"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.EnumerableDisposeExtensions.Dispose(System.ValueTuple{System.Collections.Generic.IEnumerable{System.IDisposable},System.Collections.Generic.IEnumerable{System.IDisposable}})">
            <summary>
            Disposes all objects of both collections of the given tuple.
            </summary>
            <param name="tupleDisposableList"></param>
        </member>
        <member name="M:BrowserAPI.EnumerableDisposeExtensions.DisposeAsync(System.ValueTuple{System.Collections.Generic.IEnumerable{System.IAsyncDisposable},System.Collections.Generic.IEnumerable{System.IAsyncDisposable}})">
            <summary>
            Disposes all objects in parallel of both collections of the given tuple.
            </summary>
            <param name="tupleAsyncDisposableList"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.TrySyncExtensions">
            <summary>
            <para>Extensions for <see cref="T:Microsoft.JSInterop.IJSRuntime"/> and <see cref="T:Microsoft.JSInterop.IJSObjectReference"/>.</para>
            <para>This class contains <i>TrySync</i>-methods, which will use <see cref="M:Microsoft.JSInterop.IJSInProcessRuntime.Invoke``1(System.String,System.Object[])"/> if possible, otherwise <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeVoidTrySync(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <param name="jsRuntime">Represents an instance of a JavaScript runtime to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeVoidTrySync(Microsoft.JSInterop.IJSRuntime,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <param name="jsRuntime">Represents an instance of a JavaScript runtime to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeTrySync``1(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <typeparam name="TValue">The JSON-serializable return type.</typeparam>
            <param name="jsRuntime">Represents an instance of a JavaScript runtime to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name="TValue"/> obtained by JSON-deserializing the return value.</returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeTrySync``1(Microsoft.JSInterop.IJSRuntime,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <typeparam name="TValue">The JSON-serializable return type.</typeparam>
            <param name="jsRuntime">Represents an instance of a JavaScript runtime to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name="TValue"/> obtained by JSON-deserializing the return value.</returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeVoidTrySync(Microsoft.JSInterop.IJSObjectReference,System.String,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <param name="module">Represents an instance of a JavaScript module to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeVoidTrySync(Microsoft.JSInterop.IJSObjectReference,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <param name="module">Represents an instance of a JavaScript module to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeTrySync``1(Microsoft.JSInterop.IJSObjectReference,System.String,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <typeparam name="TResult">The JSON-serializable return type.</typeparam>
            <param name="module">Represents an instance of a JavaScript module to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name="TResult"/> obtained by JSON-deserializing the return value.</returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.InvokeTrySync``1(Microsoft.JSInterop.IJSObjectReference,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            <para>Invokes the specified JavaScript function synchronously if possible, otherwise asynchronously.</para>
            <para>When the specified JavaScript function returns a promise, you should use <see cref="M:Microsoft.JSInterop.IJSRuntime.InvokeAsync``1(System.String,System.Object[])"/> instead.</para>
            </summary>
            <typeparam name="TResult">The JSON-serializable return type.</typeparam>
            <param name="module">Represents an instance of a JavaScript module to which calls may be dispatched.</param>
            <param name="identifier">An identifier for the function to invoke. For example, the value <c>"someScope.someFunction"</c> will invoke the function <c>window.someScope.someFunction</c>.</param>
            <param name="cancellationToken">A cancellation token to signal the cancellation of the operation. Specifying this parameter will override any default cancellations such as due to timeouts (<see cref="P:Microsoft.JSInterop.JSRuntime.DefaultAsyncTimeout"/>) from being applied.</param>
            <param name="args">JSON-serializable arguments.</param>
            <returns>An instance of <typeparamref name="TResult"/> obtained by JSON-deserializing the return value.</returns>
        </member>
        <member name="M:BrowserAPI.TrySyncExtensions.DisposeTrySync(Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            Invokes Dispose if possible, otherwise DisposeAsync.
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IModuleManager">
            <summary>
            <para>
            The ModuleManager is responsible for the access of the JS-module at "_content/Blazor.BrowserAPI/BrowserAPI.js".<br />
            The necessary module is lazy loaded the first time when it is needed,
            but it also contains a method to start the module download manually.
            </para>
            <para>However, when *InProcess*-classes are used, the module must be loaded beforehand, otherwise an Exception is thrown.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IModuleManager.LoadModule">
            <summary>
            Starts the download of the JS module. Returns a Task that represents the download of the module. If this tasks finishes, the download finishes.
            </summary>
            <returns>A Task that represents the download of the module. If this tasks finishes, the download finishes.</returns>
        </member>
        <member name="P:BrowserAPI.IModuleManager.IsInProcess">
            <summary>
            Checks if IJSRuntime object is IJSInProcessRuntime.
            </summary>
        </member>
        <member name="T:BrowserAPI.AddBrowserAPIExtension">
            <summary>
            Contains the extension method <see cref="M:BrowserAPI.AddBrowserAPIExtension.AddBrowserAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/>
            </summary>
        </member>
        <member name="M:BrowserAPI.AddBrowserAPIExtension.AddBrowserAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            <para>
            Registers all services available in this library.<br />
            All services includes every BrowserAPI service and <see cref="T:BrowserAPI.IModuleManager"/>.
            </para>
            <para>All services will be registered as scoped.</para>
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IClipboard">
            <summary>
            The Clipboard interface implements the Clipboard API, providing—if the user grants permission—both read and write access to the contents of the system clipboard.
            </summary>
        </member>
        <member name="M:BrowserAPI.IClipboard.Write(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.writeText(text);</para>
            <para>Writes the specified text string to the system clipboard. Text may be read back using either read() or readText().</para>
            </summary>
            <param name="text">The string to be written to the clipboard.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IClipboard.Read(System.Threading.CancellationToken)">
            <summary>
            <para>navigator.clipboard.readText();</para>
            <para>Returns a Promise which resolves with a copy of the textual contents of the system clipboard.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IConsole">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox).
            The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsole.Assert(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Assert(System.Boolean,System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Assert(System.Boolean,System.String,System.Threading.CancellationToken)" />
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Clear(System.Threading.CancellationToken)">
            <summary>
            Clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Count(System.Threading.CancellationToken)">
            <summary>
            Logs the number of times that this particular call to count() has been called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Count(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Count(System.Threading.CancellationToken)" />
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label. If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.CountReset(System.Threading.CancellationToken)">
            <summary>
            Resets counter used with <see cref="M:BrowserAPI.IConsole.Count(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.CountReset(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.CountReset(System.Threading.CancellationToken)" />
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0.
            If omitted, <i>countReset()</i> resets the default counter to 0.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Debug(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Debug(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Debug(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Dir(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Dirxml(System.Object,System.Threading.CancellationToken)">
            <summary>
            Displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Error(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Error(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Error(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Group(System.Threading.CancellationToken)">
            <summary>
            Creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Group(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Group(System.Threading.CancellationToken)" />
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.GroupCollapsed(System.Threading.CancellationToken)">
            <summary>
            <para>
            Creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.IConsole.Group(System.Threading.CancellationToken)"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)"/> to back out to the parent group.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.GroupCollapsed(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.GroupCollapsed(System.Threading.CancellationToken)" />
            <param name="label">Label for the group.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.GroupEnd(System.Threading.CancellationToken)">
            <summary>
            Exits the current inline group in the Web console.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Info(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Info(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Info(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Log(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Log(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Log(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Table(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Table(System.Object,System.String[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Table(System.Object,System.Threading.CancellationToken)" />
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Time(System.Threading.CancellationToken)">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsole.TimeEnd(System.Threading.CancellationToken)"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Time(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsole.TimeEnd(System.String,System.Threading.CancellationToken)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">
            A string representing the name to give the new timer.
            This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeEnd(System.Threading.CancellationToken)">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeEnd(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">
            A string representing the name of the timer to stop.
            Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended.
            If omitted, the label "default" is used.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeLog(System.Threading.CancellationToken)">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeLog(System.String,System.Threading.CancellationToken)">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsole.Time(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.TimeLog(System.String,System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.TimeLog(System.String,System.Threading.CancellationToken)" />
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Trace(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Trace(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Trace(System.String,System.Threading.CancellationToken)" />
            <param name="objects">
            Zero or more objects to be output to console along with the trace.
            These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.IConsole.Log(System.Object[],System.Threading.CancellationToken)"/> method.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Warn(System.String,System.Threading.CancellationToken)">
            <summary>
            Outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IConsole.Warn(System.Object[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IConsole.Warn(System.String,System.Threading.CancellationToken)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IConsoleInProcess">
            <summary>
            The <i>console</i> object provides access to the browser's debugging console (e.g. the Web console in Firefox).
            The specifics of how it works varies from browser to browser, but there is a de facto set of features that are typically provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Assert(System.Boolean,System.String)">
            <summary>
            Writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.
            </summary>
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Assert(System.Boolean,System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Assert(System.Boolean,System.String)" />
            <param name="condition">Any boolean expression. If the assertion is false, the message is written to the console.</param>
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Clear">
            <summary>
            Clears the console if the console allows it.
            A graphical console, like those running on browsers, will allow it; a console displaying on the terminal, like the one running on Node, will not support it, and will have no effect (and no error).
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Count">
            <summary>
            Logs the number of times that this particular call to count() has been called.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Count(System.String)">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Count" />
            <param name="label">A string. If supplied, <i>count()</i> outputs the number of times it has been called with that label. If omitted, <i>count()</i> behaves as though it was called with the "default" label.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.CountReset">
            <summary>
            Resets counter used with <see cref="M:BrowserAPI.IConsoleInProcess.Count"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.CountReset(System.String)">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.CountReset" />
            <param name="label">A string. If supplied, <i>countReset()</i> resets the count for that label to 0. If omitted, <i>countReset()</i> resets the default counter to 0.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Debug(System.String)">
            <summary>
            Outputs a message to the web console at the "debug" log level.
            The message is only displayed to the user if the console is configured to display debug output.
            In most cases, the log level is configured within the console UI. This log level might correspond to the Debug or Verbose log level.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Debug(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Debug(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Dir(System.Object)">
            <summary>
            <para>Displays an interactive list of the properties of the specified JavaScript object. The output is presented as a hierarchical listing with disclosure triangles that let you see the contents of child objects.</para>
            <para>In other words, <i>console.dir()</i> is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</para>
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Dirxml(System.Object)">
            <summary>
            Displays an interactive tree of the descendant elements of the specified XML/HTML element.
            If it is not possible to display as an element the JavaScript Object view is shown instead.
            The output is presented as a hierarchical listing of expandable nodes that let you see the contents of child nodes.
            </summary>
            <param name="item">A JavaScript object whose properties should be output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Error(System.String)">
            <summary>
            Outputs an error message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Error(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Error(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Group">
            <summary>
            Creates a new inline group in the Web console log, causing any subsequent console messages to be indented by an additional level, until <see cref="M:BrowserAPI.IConsoleInProcess.GroupEnd"/> is called.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Group(System.String)">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Group" />
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.GroupCollapsed">
            <summary>
            <para>
            Creates a new inline group in the Web Console. Unlike <see cref="M:BrowserAPI.IConsoleInProcess.Group"/>, however, the new group is created collapsed.
            The user will need to use the disclosure button next to it to expand it, revealing the entries created in the group.
            </para>
            <para>Call <see cref="M:BrowserAPI.IConsoleInProcess.GroupEnd"/> to back out to the parent group.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.GroupCollapsed(System.String)">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.GroupCollapsed" />
            <param name="label">Label for the group.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.GroupEnd">
            <summary>
            Exits the current inline group in the Web console.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Info(System.String)">
            <summary>
            Outputs an informational message to the Web console.
            In Firefox, a small "i" icon is displayed next to these items in the Web console's log.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Info(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Info(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Log(System.String)">
            <summary>
            Outputs a message to the web console.
            The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Log(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Log(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Table(System.Object)">
            <summary>
            <para>Displays tabular data as a table.</para>
            <para>It logs data as a table. Each element in the array (or enumerable property if data is an object) will be a row in the table.</para>
            <para>
            The first column in the table will be labeled (index).
            If data is an array, then its values will be the array indices.
            If data is an object, then its values will be the property names.
            Note that (in Firefox) <i>console.table</i> is limited to displaying 1000 rows (first row is the labeled index).
            </para>
            </summary>
            <param name="data">The data to display. This must be either an array or an object.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Table(System.Object,System.String[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Table(System.Object)" />
            <param name="data">The data to display. This must be either an array or an object.</param>
            <param name="columns">An array containing the names of columns to include in the output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Time">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsoleInProcess.TimeEnd"/>, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Time(System.String)">
            <summary>
            Starts a timer you can use to track how long an operation takes.
            You give each timer a unique name, and may have up to 10,000 timers running on a given page.
            When you call <see cref="M:BrowserAPI.IConsoleInProcess.TimeEnd(System.String)"/> with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.
            </summary>
            <param name="label">
            A string representing the name to give the new timer.
            This will identify the timer; use the same name when calling console.timeEnd() to stop the timer and get the time output to the console.
            If omitted, the label "default" is used.
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeEnd">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeEnd(System.String)">
            <summary>
            Stops a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">
            A string representing the name of the timer to stop.
            Once stopped, the elapsed time is automatically displayed in the Web console along with an indicator that the time has ended.
            If omitted, the label "default" is used.
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeLog">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeLog(System.String)">
            <summary>
            Logs the current value of a timer that was previously started by calling <see cref="M:BrowserAPI.IConsoleInProcess.Time(System.String)"/>.
            </summary>
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.TimeLog(System.String,System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.TimeLog(System.String)" />
            <param name="label">The name of the timer to log to the console. If this is omitted the label "default" is used.</param>
            <param name="data">Additional values to be logged to the console after the timer output.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Trace(System.String)">
            <summary>
            Outputs a stack trace to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Trace(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Trace(System.String)" />
            <param name="objects">
            Zero or more objects to be output to console along with the trace.
            These are assembled and formatted the same way they would be if passed to the <see cref="M:BrowserAPI.IConsoleInProcess.Log(System.Object[])"/> method.
            </param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Warn(System.String)">
            <summary>
            Outputs a warning message to the Web console.
            </summary>
            <param name="message">The text that will be displayed in the console.</param>
        </member>
        <member name="M:BrowserAPI.IConsoleInProcess.Warn(System.Object[])">
            <inheritdoc cref="M:BrowserAPI.IConsoleInProcess.Warn(System.String)" />
            <param name="data">
            <para>A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.</para>
            <para>or</para>
            <para>A JavaScript string containing zero or more substitution strings: JavaScript objects with which to replace substitution strings within msg. This parameter gives you additional control over the format of the output.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.ICookieStorage">
            <summary>
            <para>The Document property cookie lets you read and write cookies associated with the document.</para>
            </summary>
            <remarks>
            Note: The CookieStorage interface is more sophisticated than the actual browser cookie interface.<br />
            It is structured similar to the <see cref="T:BrowserAPI.ILocalStorage">LocalStorage</see>/<see cref="T:BrowserAPI.ISessionStorage">SessionStorage</see> interface.
            </remarks>
        </member>
        <member name="P:BrowserAPI.ICookieStorage.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.GetAllCookies(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ICookieStorage.AllCookies" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ICookieStorage.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ICookieStorage.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.GetCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.RemoveCookie(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ICookieStorageInProcess">
            <summary>
            The Document property cookie lets you read and write cookies associated with the document.
            </summary>
            <remarks>
            Note: The CookieStorage interface is more sophisticated than the actual browser cookie interface.<br />
            It is structured similar to the <see cref="T:BrowserAPI.ILocalStorageInProcess">LocalStorage</see>/<see cref="T:BrowserAPI.ISessionStorageInProcess">SessionStorage</see> interface.
            </remarks>
        </member>
        <member name="P:BrowserAPI.ICookieStorageInProcess.AllCookies">
            <summary>
            <para>document.cookie</para>
            <para>
            Returns a string containing a semicolon-separated list of all cookies (i.e. key=value pairs).<br />
            Note that each key and value may be surrounded by whitespace (space and tab characters).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.ICookieStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of cookies stored in cookieStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in cookieStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.GetCookie(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.SetCookie(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Boolean)">
            <summary>
            When passed a key name and value, will add that key to cookieStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="expires">The expiry time in seconds. If not set, it will expire at the end of session.</param>
            <param name="path">Indicates the path that must exist in the requested URL for the browser to send the Cookie header (e.g., '/', '/mydir').<br/>Default is "/"</param>
            <param name="sameSite">SameSite prevents the browser from sending this cookie along with cross-site requests. Possible values are<br />-"lax"<br />-"strict"<br />-"none"<br/>Defailt is "none"</param>
            <param name="secure">Specifies that the cookie should only be transmitted over a secure protocol.<br/>Default is false</param>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.RemoveCookie(System.String)">
            <summary>
            When passed a key name, will remove that key from cookieStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.ICookieStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of cookieStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.IDialog">
            <summary>
            The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IDialog.Open">
            <summary>
            Reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialog.GetOpen(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IDialog.Open" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.SetOpen(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IDialog.Open" />
            <param name="value">Sets the dialog state:<br/>true = open<br/>false = close</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IDialog.ReturnValue">
            <summary>
            Gets/Sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialog.GetReturnValue(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IDialog.ReturnValue" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.SetReturnValue(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IDialog.ReturnValue" />
            <param name="returnValue">A string representing the updated value of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.Show(System.Threading.CancellationToken)">
            <summary>
            Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.ShowModal(System.Threading.CancellationToken)">
            <summary>
            Displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element.
            Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.Close(System.Threading.CancellationToken)">
            <summary>
            Closes the &lt;dialog&gt;.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDialog.Close(System.String,System.Threading.CancellationToken)">
            <summary>
            Closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.IDialog.ReturnValue"/> of the dialog.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IDialog.OnCancel">
            <summary>
            Fires on a &lt;dialog&gt; when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.
            </summary>
        </member>
        <member name="E:BrowserAPI.IDialog.OnClose">
            <summary>
            Is fired on an HTMLDialogElement object when the &lt;dialog&gt; it represents has been closed.
            </summary>
        </member>
        <member name="T:BrowserAPI.IDialogInProcess">
            <summary>
            The <i>HTMLDialogElement</i> interface provides methods to manipulate &lt;dialog&gt; elements. It inherits properties and methods from the HTMLElement interface.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="E:BrowserAPI.IDialogInProcess.OnCancel">
            <summary>
            Fires on a &lt;dialog&gt; when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.
            </summary>
        </member>
        <member name="E:BrowserAPI.IDialogInProcess.OnClose">
            <summary>
            Is fired on an HTMLDialogElement object when the &lt;dialog&gt; it represents has been closed.
            </summary>
        </member>
        <member name="P:BrowserAPI.IDialogInProcess.Open">
            <summary>
            Reflecting the open HTML attribute, indicating whether the &lt;dialog&gt; is available for interaction.
            </summary>
        </member>
        <member name="P:BrowserAPI.IDialogInProcess.ReturnValue">
            <summary>
            Gets/Sets the return value for the &lt;dialog&gt;, usually to indicate which button the user pressed to close it.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.Show">
            <summary>
            Displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.ShowModal">
            <summary>
            Displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element.
            Interaction outside the dialog is blocked and the content outside it is rendered inert.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.Close">
            <summary>
            Closes the &lt;dialog&gt;.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDialogInProcess.Close(System.String)">
            <summary>
            Closes the &lt;dialog&gt; and updates the returnValue of the dialog.
            </summary>
            <param name="returnValue">A string representing an updated value for the <see cref="P:BrowserAPI.IDialogInProcess.ReturnValue"/> of the dialog.</param>
        </member>
        <member name="T:BrowserAPI.IElementFactory">
            <summary>
            <para>An instance of this class takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and exposes an interface to interact with it.</para>
            <para>
            This factory <b>does not dispose</b> the created objects, they must disposed manually.
            So do not forget to call <see cref="M:System.IAsyncDisposable.DisposeAsync"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IElementFactory.CreateDialog(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialog"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="M:BrowserAPI.IElementFactory.CreateHTMLElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElement"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="M:BrowserAPI.IElementFactory.CreateHTMLMediaElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> and returns a <see cref="T:BrowserAPI.IHTMLMediaElement"/> interface to interact with the given element.
            </summary>
            <param name="htmlMediaElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> html tag.</param>
            <returns>An object that can be used to interact with the given <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> element.</returns>
        </member>
        <member name="T:BrowserAPI.IElementFactoryInProcess">
            <summary>
            <para>An instance of this class takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and exposes an interface to interact with it.</para>
            <para>
            This factory <b>does not dispose</b> the created objects, they must disposed manually.
            So do not forget to call <see cref="M:System.IDisposable.Dispose"/> on a htmlElement-object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IElementFactoryInProcess.CreateDialog(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of &lt;dialog&gt; and returns a <see cref="T:BrowserAPI.IDialogInProcess"/> interface to interact with the given &lt;dialog&gt;.
            </summary>
            <param name="dialog">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a &lt;dialog&gt; html tag.</param>
            <returns>An object that can be used to interact with the given &lt;dialog&gt; element.</returns>
        </member>
        <member name="M:BrowserAPI.IElementFactoryInProcess.CreateHTMLElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> and returns a <see cref="T:BrowserAPI.IHTMLElementInProcess"/> interface to interact with the given html-element.
            </summary>
            <param name="htmlElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a html tag.</param>
            <returns>An object that can be used to interact with the given html element.</returns>
        </member>
        <member name="M:BrowserAPI.IElementFactoryInProcess.CreateHTMLMediaElement(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Takes a <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> of <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> and returns a <see cref="T:BrowserAPI.IHTMLMediaElementInProcess"/> interface to interact with the given element.
            </summary>
            <param name="htmlMediaElement">An <see cref="T:Microsoft.AspNetCore.Components.ElementReference"/> referencing a <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> html tag.</param>
            <returns>An object that can be used to interact with the given <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">&lt;video&gt;</see> or <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">&lt;audio&gt;</see> element.</returns>
        </member>
        <member name="T:BrowserAPI.IDownload">
            <summary>
            Save data as a file download on the filesystem.
            <para>For file upload use the <see cref="T:Microsoft.AspNetCore.Components.Forms.InputFile">InputFile</see> component.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IDownload.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Triggers a download by adding an &lt;a&gt;-element to the document and simulate a click on it.
            </summary>
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">UTF8 encoded content of the file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDownload.DownloadAsFile(System.String,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IDownload.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)" />
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Raw data that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDownload.DownloadAsFile(System.String,Microsoft.JSInterop.DotNetStreamReference,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IDownload.DownloadAsFile(System.String,System.String,System.Threading.CancellationToken)" />
            <param name="fileName">The name of the downloaded file.</param>
            <param name="fileContent">Data stream that gets downloaded and saved in a file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IDirectoryHandle">
            <summary>
            <para>The <i>FileSystemDirectoryHandle</i> interface of the File System API provides a handle to a file system directory.</para>
            <para>
            The interface can be accessed via the following methods:<br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker">window.showDirectoryPicker()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/getDirectory">StorageManager.getDirectory()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle">DataTransferItem.getAsFileSystemHandle()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle">FileSystemDirectoryHandle.getDirectoryHandle()</see>
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IDirectoryHandle.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandle.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IDirectoryHandle.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandle.IsSameEntry(BrowserAPI.IDirectoryHandle,System.Threading.CancellationToken)">
            <summary>
            Compares two directory handles to see if the associated entries match.
            </summary>
            <param name="other">The DirectoryHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandle.GetDirectoryHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemDirectoryHandle for a subdirectory with the specified name within the directory handle on which the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the subdirectory you wish to retrieve.</param>
            <param name="create">A boolean value, which defaults to false. When set to true if the directory is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandle.GetFileHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemFileHandle for a file with the specified name, within the directory the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the file you wish to retrieve.</param>
            <param name="create">A Boolean. Default false. When set to true if the file is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandle.Values(System.Threading.CancellationToken)">
            <summary>
            Returns all entries (files, directories) located in this directory.
            </summary>
            <remarks>
            <para>
            This method uses the <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/values">values()</see> Asynchronous iterator method to create these lists.
            Since returning each entry one by one would be unnecessary slow, all entries are iterated and returned at once.
            </para>
            <para>Do not forget to call <i>DispseAsync()</i> on each single item in fileList and directoryList when you done with it.</para>
            </remarks>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IDirectoryHandle.Kind">
            <summary>
            Returns the type of entry.
            This is 'file' if the associated entry is a file or 'directory'.
            It is used to distinguish files from directories when iterating over the contents of a directory.
            </summary>
            <remarks>
            Note: This API does not have a common <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle">FileSystemHandle</see> type, so this property always returns "directory".
            </remarks>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandle.RemoveEntry(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Attempts to asynchronously remove an entry if the directory handle contains a file or directory called the name specified.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the entry you wish to remove.</param>
            <param name="recursive">A boolean value, which defaults to false. When set to true entries will be removed recursively.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IDirectoryHandleInProcess">
            <summary>
            <para>The <i>FileSystemDirectoryHandle</i> interface of the File System API provides a handle to a file system directory.</para>
            <para>
            The interface can be accessed via the following methods:<br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker">window.showDirectoryPicker()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/getDirectory">StorageManager.getDirectory()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFileSystemHandle">DataTransferItem.getAsFileSystemHandle()</see><br />
            - <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle">FileSystemDirectoryHandle.getDirectoryHandle()</see>
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IDirectoryHandleInProcess.Kind">
            <summary>
            Returns the type of entry.
            This is 'file' if the associated entry is a file or 'directory'.
            It is used to distinguish files from directories when iterating over the contents of a directory.
            </summary>
            <remarks>
            Note: This API does not have a common <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle">FileSystemHandle</see> type, so this property always returns "directory".
            </remarks>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandleInProcess.RemoveEntry(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Attempts to asynchronously remove an entry if the directory handle contains a file or directory called the name specified.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the entry you wish to remove.</param>
            <param name="recursive">A boolean value, which defaults to false. When set to true entries will be removed recursively.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IDirectoryHandleInProcess.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandleInProcess.IsSameEntry(BrowserAPI.IDirectoryHandleInProcess,System.Threading.CancellationToken)">
            <summary>
            Compares two directory handles to see if the associated entries match.
            </summary>
            <param name="other">The DirectoryHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandleInProcess.GetDirectoryHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemDirectoryHandle for a subdirectory with the specified name within the directory handle on which the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the subdirectory you wish to retrieve.</param>
            <param name="create">A boolean value, which defaults to false. When set to true if the directory is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandleInProcess.GetFileHandle(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Returns a Promise fulfilled with a FileSystemFileHandle for a file with the specified name, within the directory the method is called.
            </summary>
            <param name="name">A string representing the FileSystemHandle.name of the file you wish to retrieve.</param>
            <param name="create">A Boolean. Default false. When set to true if the file is not found, one with the specified name will be created and returned.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IDirectoryHandleInProcess.Values(System.Threading.CancellationToken)">
            <summary>
            Returns all entries (files, directories) located in this directory.
            </summary>
            <remarks>
            <para>
            This method uses the <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryHandle/values">values()</see> Asynchronous iterator method to create these lists.
            Since returning each entry one by one would be unnecessary slow, all entries are iterated and returned at once.
            </para>
            <para>Do not forget to call <i>Dispse()</i> on each single item in fileList and directoryList when you done with it.</para>
            </remarks>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IFileHandle">
            <summary>
            <para>The <i>FileSystemFileHandle</i> interface of the File System API represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.</para>
            <para>
            Note that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open.
            The queryPermission method of the FileSystemHandle interface can be used to verify permission state before accessing a file.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IFileHandle.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.IFileHandle.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IFileHandle.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileHandle.IsSameEntry(BrowserAPI.IFileHandle,System.Threading.CancellationToken)">
            <summary>
            Compares two file handles to see if the associated entries match.
            </summary>
            <param name="other">The FileHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileHandle.GetFile(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Promise which resolves to a File object representing the state on disk of the entry represented by the handle.</para>
            <para>If the file on disk changes or is removed after this method is called, the returned File object will likely be no longer readable.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileHandle.CreateWritable(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a FileSystemWritableFileStream that can be used to write to a file. The method returns a Promise which resolves to this created stream.</para>
            <para>
            Any changes made through the stream won't be reflected in the file represented by the file handle until the stream has been closed.
            This is typically implemented by writing data to a temporary file, and only replacing the file represented by file handle with the temporary file when the writable file stream is closed.
            </para>
            </summary>
            <param name="keepExistingData">A Boolean. Default false. When set to true if the file exists, the existing file is first copied to the temporary file. Otherwise the temporary file starts out empty.</param>
            <param name="mode">
            A string specifying the locking mode for the writable file stream.
            The default value is "siloed". Possible values are:<br />
            - "exclusive": Only one FileSystemWritableFileStream writer can be opened. Attempting to open subsequent writers before the first writer is closed results in a NoModificationAllowedError exception being thrown.<br />
            - "siloed": Multiple FileSystemWritableFileStream writers can be opened at the same time, each with its own swap file, for example when using the same app in multiple tabs. The last writer opened has its data written, as the data gets flushed when each writer is closed.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IFileHandle.Kind">
            <summary>
            Returns the type of entry.
            This is 'file' if the associated entry is a file or 'directory'.
            It is used to distinguish files from directories when iterating over the contents of a directory.
            </summary>
            <remarks>
            Note: This API does not have a common <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle">FileSystemHandle</see> type, so this property always returns "file".
            </remarks>
        </member>
        <member name="T:BrowserAPI.IFileHandleInProcess">
            <summary>
            <para>The <i>FileSystemFileHandle</i> interface of the File System API represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.</para>
            <para>
            Note that read and write operations depend on file-access permissions that do not persist after a page refresh if no other tabs for that origin remain open.
            The queryPermission method of the FileSystemHandle interface can be used to verify permission state before accessing a file.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IFileHandleInProcess.Kind">
            <summary>
            Returns the type of entry.
            This is 'file' if the associated entry is a file or 'directory'.
            It is used to distinguish files from directories when iterating over the contents of a directory.
            </summary>
            <remarks>
            Note: This API does not have a common <see href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle">FileSystemHandle</see> type, so this property always returns "file".
            </remarks>
        </member>
        <member name="P:BrowserAPI.IFileHandleInProcess.Name">
            <summary>
            Returns the name of the associated entry.
            </summary>
        </member>
        <member name="M:BrowserAPI.IFileHandleInProcess.IsSameEntry(BrowserAPI.IFileHandleInProcess,System.Threading.CancellationToken)">
            <summary>
            Compares two file handles to see if the associated entries match.
            </summary>
            <param name="other">The FileHandle to match against the handle on which the method is invoked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileHandleInProcess.GetFile(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Promise which resolves to a File object representing the state on disk of the entry represented by the handle.</para>
            <para>If the file on disk changes or is removed after this method is called, the returned File object will likely be no longer readable.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileHandleInProcess.CreateWritable(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a FileSystemWritableFileStream that can be used to write to a file. The method returns a Promise which resolves to this created stream.</para>
            <para>
            Any changes made through the stream won't be reflected in the file represented by the file handle until the stream has been closed.
            This is typically implemented by writing data to a temporary file, and only replacing the file represented by file handle with the temporary file when the writable file stream is closed.
            </para>
            </summary>
            <param name="keepExistingData">A Boolean. Default false. When set to true if the file exists, the existing file is first copied to the temporary file. Otherwise the temporary file starts out empty.</param>
            <param name="mode">
            A string specifying the locking mode for the writable file stream.
            The default value is "siloed". Possible values are:<br />
            - "exclusive": Only one FileSystemWritableFileStream writer can be opened. Attempting to open subsequent writers before the first writer is closed results in a NoModificationAllowedError exception being thrown.<br />
            - "siloed": Multiple FileSystemWritableFileStream writers can be opened at the same time, each with its own swap file, for example when using the same app in multiple tabs. The last writer opened has its data written, as the data gets flushed when each writer is closed.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IFileSystem">
            <summary>
            <para>
            The <i>File System API</i>
            — with extensions provided via the <see href="https://wicg.github.io/file-system-access/">File System Access API</see> to access files on the device file system —
            allows read, write and file management capabilities.
            </para>
            <para>
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API,
            the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API</see>,
            and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IFileSystem.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file and returns a handle for the file.
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to false, so a single fileHandle is returned.
            When multiple files should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystem.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file or multiple files and returns a handle for the file(s).
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to true, so a multiple fileHandles can be returned.
            When only a single file should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystem.ShowSaveFilePicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to save a file. Either by selecting an existing file, or entering a name for a new file.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="suggestedName">A String. The suggested file name.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystem.ShowDirectoryPicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Threading.CancellationToken)">
            <summary>
            Displays a directory picker which allows the user to select a directory.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="mode">A string that defaults to "read" for read-only access or "readwrite" for read and write access to the directory.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystem.StorageManagerGetDirectory(System.Threading.CancellationToken)">
            <summary>
            Is used to obtain a reference to a FileSystemDirectoryHandle object allowing access to a directory and its contents, stored in the origin private file system (OPFS).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystem.StorageManagerEstimate(System.Threading.CancellationToken)">
            <summary>
            <para>Asks the Storage Manager for how much storage the current origin takes up (usage), and how much space is available (quota).</para>
            <para>This method operates asynchronously, so it returns a Promise which resolves once the information is available. The promise's fulfillment handler is called with an object containing the usage and quota data.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystem.StorageManagerPersist(System.Threading.CancellationToken)">
            <summary>
            Requests permission to use persistent storage, and returns a Promise that resolves to true if permission is granted and bucket mode is persistent, and false otherwise.
            The browser may or may not honor the request, depending on browser-specific rules.
            (For more details, see the guide to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria#does_browser-stored_data_persist">Storage quotas and eviction criteria</see>.)
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystem.StorageManagerPersisted(System.Threading.CancellationToken)">
            <summary>
            Returns a Promise that resolves to true if your site's storage bucket is persistent.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IFileSystemInProcess">
            <summary>
            <para>
            The <i>File System API</i>
            — with extensions provided via the <see href="https://wicg.github.io/file-system-access/">File System Access API</see> to access files on the device file system —
            allows read, write and file management capabilities.
            </para>
            <para>
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API#relationship_to_other_file-related_apis">Relationship to other file-related APIs</see> for a comparison between this API,
            the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API">File and Directory Entries API</see>,
            and the <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API">File API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.StorageManagerEstimate(System.Threading.CancellationToken)">
            <summary>
            <para>Asks the Storage Manager for how much storage the current origin takes up (usage), and how much space is available (quota).</para>
            <para>This method operates asynchronously, so it returns a Promise which resolves once the information is available. The promise's fulfillment handler is called with an object containing the usage and quota data.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.StorageManagerPersist(System.Threading.CancellationToken)">
            <summary>
            Requests permission to use persistent storage, and returns a Promise that resolves to true if permission is granted and bucket mode is persistent, and false otherwise.
            The browser may or may not honor the request, depending on browser-specific rules.
            (For more details, see the guide to <see href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria#does_browser-stored_data_persist">Storage quotas and eviction criteria</see>.)
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.StorageManagerPersisted(System.Threading.CancellationToken)">
            <summary>
            Returns a Promise that resolves to true if your site's storage bucket is persistent.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file and returns a handle for the file.
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to false, so a single fileHandle is returned.
            When multiple files should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.ShowOpenFilePickerMultipleFiles(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to select a file or multiple files and returns a handle for the file(s).
            </summary>
            <remarks>
            <para>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</para>
            <para>
            This method sets the parameter <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker#multiple">multiple</see> to true, so a multiple fileHandles can be returned.
            When only a single file should be selectable use the method <see cref="M:BrowserAPI.IFileSystem.ShowOpenFilePicker(System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.ShowSaveFilePicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Boolean,System.ValueTuple{System.String,System.ValueTuple{System.String,System.String[]}[]}[],System.Threading.CancellationToken)">
            <summary>
            Shows a file picker that allows a user to save a file. Either by selecting an existing file, or entering a name for a new file.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="suggestedName">A String. The suggested file name.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="excludeAcceptAllOption">A boolean value that defaults to false. By default the picker should include an option to not apply any file type filters (instigated with the type option below). Setting this option to true means that option is not available.</param>
            <param name="types">
            An Array of allowed file types to pick. Each item is an object with the following options:<br />
            - description: An optional description of the category of files types allowed. Defaults to an empty string.<br />
            - accept: An Object with the keys set to the MIME type and the values an Array of file extensions.<br />
            e.g.
            <code>
            var types = [
                ("Images", [
                    ("image/*", [".png", ".gif", ".jpeg", ".jpg"])
                ])
            ];
            </code>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.ShowDirectoryPicker(System.String,System.String,BrowserAPI.PickerDialogStartIn,System.Threading.CancellationToken)">
            <summary>
            Displays a directory picker which allows the user to select a directory.
            </summary>
            <remarks>When the user clicks on the cancel button or just closes the dialog picker, an Exception is thrown.</remarks>
            <exception cref="T:Microsoft.JSInterop.JSException"></exception>
            <param name="mode">A string that defaults to "read" for read-only access or "readwrite" for read and write access to the directory.</param>
            <param name="id">By specifying an ID, the browser can remember different directories for different IDs. If the same ID is used for another picker, the picker opens in the same directory.</param>
            <param name="startIn">A <see cref="T:BrowserAPI.IFileHandle">FileSystemHandle</see> or a well known directory ("desktop", "documents", "downloads", "music", "pictures", or "videos") to open the dialog in.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFileSystemInProcess.StorageManagerGetDirectory(System.Threading.CancellationToken)">
            <summary>
            Is used to obtain a reference to a FileSystemDirectoryHandle object allowing access to a directory and its contents, stored in the origin private file system (OPFS).
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IFile">
            <summary>
            <para>The <i>File</i> interface provides information about files and allows JavaScript in a web page to access their content.</para>
            <para>File objects are generally retrieved from a FileList object returned as a result of a user selecting files using the &lt;input&gt; element, or from a drag and drop operation's DataTransfer object.</para>
            <para>
            A File object is a specific kind of Blob, and can be used in any context that a Blob can.In particular, the following APIs accept both Blobs and File objects:<br />
            - FileReader<br />
            - URL.createObjectURL()<br />
            - Window.createImageBitmap() and WorkerGlobalScope.createImageBitmap()<br />
            - the body option to fetch()<br />
            - XMLHttpRequest.send()
            </para>
            <para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications">Using files from web applications</see> for more information and examples.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IFile.Name">
            <summary>
            Returns the name of the file referenced by the File object.
            </summary>
        </member>
        <member name="M:BrowserAPI.IFile.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IFile.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IFile.Size">
            <summary>
            The size, in bytes, of the data contained in the Blob object.
            </summary>
        </member>
        <member name="M:BrowserAPI.IFile.GetSize(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IFile.Size" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IFile.Type">
            <summary>
            A string indicating the MIME type of the data contained in the Blob. If the type is unknown, this string is empty.
            </summary>
        </member>
        <member name="M:BrowserAPI.IFile.GetType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IFile.Type" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IFile.LastModified">
            <summary>
            Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).
            </summary>
        </member>
        <member name="M:BrowserAPI.IFile.GetLastModified(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IFile.LastModified" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IFile.WebkitRelativePath">
            <summary>
            Returns the path the URL of the File is relative to.
            </summary>
        </member>
        <member name="M:BrowserAPI.IFile.GetWebkitRelativePath(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IFile.WebkitRelativePath" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IFile.Text(System.Threading.CancellationToken)">
            <summary>
            Returns a promise that resolves with a string containing the entire contents of the Blob interpreted as UTF-8 text.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IFileInProcess">
            <summary>
            <para>The <i>File</i> interface provides information about files and allows JavaScript in a web page to access their content.</para>
            <para>File objects are generally retrieved from a FileList object returned as a result of a user selecting files using the &lt;input&gt; element, or from a drag and drop operation's DataTransfer object.</para>
            <para>
            A File object is a specific kind of Blob, and can be used in any context that a Blob can.In particular, the following APIs accept both Blobs and File objects:<br />
            - FileReader<br />
            - URL.createObjectURL()<br />
            - Window.createImageBitmap() and WorkerGlobalScope.createImageBitmap()<br />
            - the body option to fetch()<br />
            - XMLHttpRequest.send()
            </para>
            <para>See <see href="https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications">Using files from web applications</see> for more information and examples.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.IFileInProcess.Text(System.Threading.CancellationToken)">
            <summary>
            Returns a promise that resolves with a string containing the entire contents of the Blob interpreted as UTF-8 text.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IFileInProcess.Name">
            <summary>
            Returns the name of the file referenced by the File object.
            </summary>
        </member>
        <member name="P:BrowserAPI.IFileInProcess.Size">
            <summary>
            The size, in bytes, of the data contained in the Blob object.
            </summary>
        </member>
        <member name="P:BrowserAPI.IFileInProcess.Type">
            <summary>
            A string indicating the MIME type of the data contained in the Blob. If the type is unknown, this string is empty.
            </summary>
        </member>
        <member name="P:BrowserAPI.IFileInProcess.LastModified">
            <summary>
            Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).
            </summary>
        </member>
        <member name="P:BrowserAPI.IFileInProcess.WebkitRelativePath">
            <summary>
            Returns the path the URL of the File is relative to.
            </summary>
        </member>
        <member name="T:BrowserAPI.IWritableFileStream">
            <summary>
            The <i>FileSystemWritableFileStream</i> interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
            The interface is accessed through the FileSystemFileHandle.createWritable() method.
            </summary>
            <remarks>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</para>
            <para>Disposing does <b>not</b> call <see cref="M:BrowserAPI.IWritableFileStream.Close(System.Threading.CancellationToken)"/>. Before disposing this stream should be closed.</para>
            </remarks>
        </member>
        <member name="P:BrowserAPI.IWritableFileStream.Locked">
            <summary>
            A boolean indicating whether the WritableStream is locked to a writer.
            </summary>
        </member>
        <member name="M:BrowserAPI.IWritableFileStream.GetLocked(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IWritableFileStream.Locked" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStream.Write(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Writes content into the file the method is called on, at the current file cursor offset.</para>
            <para>
            No changes are written to the actual file on disk until the stream has been closed.
            Changes are typically written to a temporary file instead.
            This method can also be used to seek to a byte point within the stream and truncate to modify the total bytes the file contains.
            </para>
            </summary>
            <param name="data">The file data to write</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStream.Write(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IWritableFileStream.Write(System.String,System.Threading.CancellationToken)" />
            <param name="data">The file data to write</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStream.Seek(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates the current file cursor offset to the position (in bytes) specified.
            </summary>
            <param name="position">A number specifying the byte position from the beginning of the file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStream.Truncate(System.Int32,System.Threading.CancellationToken)">
            <summary>
            <para>Resizes the file associated with the stream to be the specified size in bytes.</para>
            <para>If the size specified is larger than the current file size the file is padded with 0x00 bytes.</para>
            <para>
            The file cursor is also updated when truncate() is called.
            If the offset is smaller than the size, it remains unchanged.
            If the offset is larger than size, the offset is set to that size.
            This ensures that subsequent writes do not error.
            </para>
            <para>No changes are written to the actual file on disk until the stream has been closed. Changes are typically written to a temporary file instead.</para>
            </summary>
            <param name="size">A number specifying the number of bytes to resize the stream to.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStream.Abort(System.Object,System.Threading.CancellationToken)">
            <summary>
            Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be immediately moved to an error state, with any queued writes discarded.
            </summary>
            <param name="reason">A string providing a human-readable reason for the abort.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStream.Close(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the associated stream. All chunks written before this method is called are sent before the returned promise is fulfilled.</para>
            <para>This is equivalent to getting a WritableStreamDefaultWriter with getWriter(), calling close() on it.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IWritableFileStreamInProcess">
            <summary>
            The <i>FileSystemWritableFileStream</i> interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
            The interface is accessed through the FileSystemFileHandle.createWritable() method.
            </summary>
            <remarks>
            <para>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</para>
            <para>Disposing does <b>not</b> call <see cref="M:BrowserAPI.IWritableFileStreamInProcess.Close(System.Threading.CancellationToken)"/>. Before disposing this stream should be closed.</para>
            </remarks>
        </member>
        <member name="M:BrowserAPI.IWritableFileStreamInProcess.Write(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Writes content into the file the method is called on, at the current file cursor offset.</para>
            <para>
            No changes are written to the actual file on disk until the stream has been closed.
            Changes are typically written to a temporary file instead.
            This method can also be used to seek to a byte point within the stream and truncate to modify the total bytes the file contains.
            </para>
            </summary>
            <param name="data">The file data to write</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStreamInProcess.Write(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IWritableFileStreamInProcess.Write(System.String,System.Threading.CancellationToken)" />
            <param name="data">The file data to write</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStreamInProcess.Seek(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates the current file cursor offset to the position (in bytes) specified.
            </summary>
            <param name="position">A number specifying the byte position from the beginning of the file.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStreamInProcess.Truncate(System.Int32,System.Threading.CancellationToken)">
            <summary>
            <para>Resizes the file associated with the stream to be the specified size in bytes.</para>
            <para>If the size specified is larger than the current file size the file is padded with 0x00 bytes.</para>
            <para>
            The file cursor is also updated when truncate() is called.
            If the offset is smaller than the size, it remains unchanged.
            If the offset is larger than size, the offset is set to that size.
            This ensures that subsequent writes do not error.
            </para>
            <para>No changes are written to the actual file on disk until the stream has been closed. Changes are typically written to a temporary file instead.</para>
            </summary>
            <param name="size">A number specifying the number of bytes to resize the stream to.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStreamInProcess.Abort(System.Object,System.Threading.CancellationToken)">
            <summary>
            Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be immediately moved to an error state, with any queued writes discarded.
            </summary>
            <param name="reason">A string providing a human-readable reason for the abort.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWritableFileStreamInProcess.Close(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the associated stream. All chunks written before this method is called are sent before the returned promise is fulfilled.</para>
            <para>This is equivalent to getting a WritableStreamDefaultWriter with getWriter(), calling close() on it.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IWritableFileStreamInProcess.Locked">
            <summary>
            A boolean indicating whether the WritableStream is locked to a writer.
            </summary>
        </member>
        <member name="T:BrowserAPI.IGamepadAPI">
            <summary>
            The <i>Gamepad API</i> is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way.
            It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected,
            and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepadAPI.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepadAPI.GetGamepads(System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of <see cref="T:BrowserAPI.IGamepad"/> objects, one for each connected gamepad.</para>
            <para>Elements in the array may be <i>null</i> if a gamepad disconnects during a session, so that the remaining gamepads retain the same index.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IGamepadAPI.OnGamepadConnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the connected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IGamepadAPI.OnGamepadDisconnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been disconnected.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the disconnected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IGamepadAPIInProcess">
            <summary>
            The <i>Gamepad API</i> is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way.
            It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected,
            and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepadAPIInProcess.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepadAPIInProcess.GetGamepads">
            <summary>
            <para>Returns an array of <see cref="T:BrowserAPI.IGamepadInProcess"/> objects, one for each connected gamepad.</para>
            <para>Elements in the array may be <i>null</i> if a gamepad disconnects during a session, so that the remaining gamepads retain the same index.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadConnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been connected or the first time a button/axis of the gamepad is used.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the connected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadDisconnected">
            <summary>
            <para>
            Is fired when the browser detects that a gamepad has been disconnected.<br />
            The event will not fire if disallowed by the document's gamepad Permissions Policy.<br />
            This event is not cancelable and does not bubble.
            </para>
            <para>
            Parameter is the disconnected Gamepad.<br />
            Note: Dispose the given Gamepad object when you are done with it.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IGamepad">
            <summary>
            <para>The <i>Gamepad</i> interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.</para>
            <para>
            A Gamepad object can be returned in one of two ways:
            via the gamepad property of the <see cref="E:BrowserAPI.IGamepadAPI.OnGamepadConnected">gamepadconnected</see> and <see cref="E:BrowserAPI.IGamepadAPI.OnGamepadDisconnected">gamepaddisconnected</see> events,
            or by grabbing any position in the array returned by the <see cref="M:BrowserAPI.IGamepadAPI.GetGamepads(System.Threading.CancellationToken)">Navigator.getGamepads()</see> method.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IGamepad.Axes">
            <summary>
            <para>An array representing the controls with axes present on the device (e.g., analog thumb sticks).</para>
            <para>Each entry in the array is a floating point value in the range -1.0 – 1.0, representing the axis position from the lowest value (-1.0) to the highest value (1.0).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetAxes(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.Axes" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepad.Buttons">
            <summary>
            <para>An array of <see cref="T:BrowserAPI.GamepadButton"/> objects representing the buttons present on the device.</para>
            <para>Each entry in the array is 0 if the button is not pressed, and non-zero (typically 1.0) if the button is pressed.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetButtons(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.Buttons" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepad.Connected">
            <summary>
            <para>A boolean indicating whether the gamepad is still connected to the system.</para>
            <para>If the gamepad is connected, the value is true; if not, it is false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetConnected(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.Connected" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepad.Id">
            <summary>
            <para>A string containing identifying information about the controller.</para>
            <para>
            The exact syntax is not strictly specified, but in Firefox it will contain three pieces of information separated by dashes (-):<br />
            - Two 4-digit hexadecimal strings containing the USB vendor and product id of the controller<br />
            - The name of the controller as provided by the driver.<br />
            For example, a PS2 controller returned <i>810-3-USB Gamepad</i>.
            </para>
            <para>This information is intended to allow you to find a mapping for the controls on the device as well as display useful feedback to the user.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetId(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.Id" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepad.Index">
            <summary>
            <para>An integer that is auto-incremented to be unique for each device currently connected to the system.</para>
            <para>This can be used to distinguish multiple controllers; a gamepad that is disconnected and reconnected will retain the same index.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.Index" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepad.Mapping">
            <summary>
            <para>A string indicating whether the browser has remapped the controls on the device to a known layout.</para>
            <para>
            The currently supported known layouts are:<br />
            - "standard" for the <see href="https://w3c.github.io/gamepad/#remapping">standard gamepad</see>.<br />
            - "xr-standard for the <see href="https://immersive-web.github.io/webxr-gamepads-module/#xr-standard-heading">standard XR gamepad</see>. See also <see href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/gamepad">XRInputSource.gamepad</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetMapping(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.Mapping" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepad.Timestamp">
            <summary>
            <para>A <see href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp">DOMHighResTimeStamp</see> representing the last time the data for this gamepad was updated.</para>
            <para>
            The idea behind this is to allow developers to determine if the axes and button data have been updated from the hardware.
            The value must be relative to the navigationStart attribute of the PerformanceTiming interface.Values are monotonically increasing,
            meaning that they can be compared to determine the ordering of updates, as newer values will always be greater than or equal to older values.</para>
            <para>Note: This property is not currently supported anywhere.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetTimestamp(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.Timestamp" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepad.VibrationActuatorEffects">
            <summary>
            <para>Returns an array of enumerated values representing the different haptic effects that the actuator supports.</para>
            <para>
            Possible included values are:<br />
            - "dual-rumble": A positional rumbling effect created by dual vibration motors in each handle of a controller, which can be vibrated independently.<br />
            - "trigger-rumble": Localized rumbling effects on the surface of a controller's trigger buttons created by vibrational motors located in each button. These buttons most commonly take the form of spring-loaded triggers.<br />
            - "vibration": Simple vibration hardware, which creates a rumbling effect.
            </para>
            <para>If no vibration is supported, an empty array is returned.</para>
            <remarks>Browser support: If the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/vibrationActuator">vibrationActuator</see> property is not supported, an empty array is returned.
            If <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/effects">effects</see> property is not supported, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/type">type</see> property is used instead.</remarks>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepad.GetVibrationActuatorEffects(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGamepad.VibrationActuatorEffects" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IGamepad.PlayVibrationActuatorEffect(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Threading.CancellationToken)">
            <summary>
            Causes the hardware to play a specific vibration effect.
            </summary>
            <param name="type">
            A string representing the desired effect.
            Possible values are "dual-rumble" and "trigger-rumble", and their effects can vary depending on the hardware type.
            Use <i>VibrationActuatorEffects</i> to get the effect types.
            </param>
            <param name="duration">The duration of the effect in milliseconds. Defaults to 0.</param>
            <param name="startDelay">The delay in milliseconds before the effect is started. Defaults to 0.</param>
            <param name="strongMagnitude">The rumble intensity of the low-frequency (strong) rumble motors, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="weakMagnitude">The rumble intensity of the high-frequency (weak) rumble motors, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="leftTrigger">The rumble intensity of the bottom-left front trigger, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="rightTrigger">The rumble intensity of the bottom-right front trigger, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="cancellationToken"></param>
            <returns>
            A promise that resolves with<br />
            - "complete": When the effect successfully completes.<br />
            - "preempted": If the current effect is stopped or replaced by another effect.<br />
            - "none": If vibration is not supported.
            </returns>
        </member>
        <member name="M:BrowserAPI.IGamepad.ResetVibrationActuator(System.Threading.CancellationToken)">
            <summary>
            Stops the hardware from playing an active vibration effect.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            A promise that resolves with<br />
            - "complete": If the effect is successfully reset.<br />
            - "preempted": If the effect was stopped or replaced by another effect.<br />
            - "none": If vibration is not supported.
            </returns>
        </member>
        <member name="T:BrowserAPI.IGamepadInProcess">
            <summary>
            <para>The <i>Gamepad</i> interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.</para>
            <para>
            A Gamepad object can be returned in one of two ways:
            via the gamepad property of the <see cref="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadConnected">gamepadconnected</see> and <see cref="E:BrowserAPI.IGamepadAPIInProcess.OnGamepadDisconnected">gamepaddisconnected</see> events,
            or by grabbing any position in the array returned by the <see cref="M:BrowserAPI.IGamepadAPIInProcess.GetGamepads">Navigator.getGamepads()</see> method.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IGamepadInProcess.PlayVibrationActuatorEffect(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Threading.CancellationToken)">
            <summary>
            Causes the hardware to play a specific vibration effect.
            </summary>
            <param name="type">
            A string representing the desired effect.
            Possible values are "dual-rumble" and "trigger-rumble", and their effects can vary depending on the hardware type.
            Use <i>VibrationActuatorEffects</i> to get the effect types.
            </param>
            <param name="duration">The duration of the effect in milliseconds. Defaults to 0.</param>
            <param name="startDelay">The delay in milliseconds before the effect is started. Defaults to 0.</param>
            <param name="strongMagnitude">The rumble intensity of the low-frequency (strong) rumble motors, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="weakMagnitude">The rumble intensity of the high-frequency (weak) rumble motors, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="leftTrigger">The rumble intensity of the bottom-left front trigger, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="rightTrigger">The rumble intensity of the bottom-right front trigger, normalized to the range between 0.0 and 1.0. Defaults to 0.0.</param>
            <param name="cancellationToken"></param>
            <returns>
            A promise that resolves with<br />
            - "complete": When the effect successfully completes.<br />
            - "preempted": If the current effect is stopped or replaced by another effect.<br />
            - "none": If vibration is not supported.
            </returns>
        </member>
        <member name="M:BrowserAPI.IGamepadInProcess.ResetVibrationActuator(System.Threading.CancellationToken)">
            <summary>
            Stops the hardware from playing an active vibration effect.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            A promise that resolves with<br />
            - "complete": If the effect is successfully reset.<br />
            - "preempted": If the effect was stopped or replaced by another effect.<br />
            - "none": If vibration is not supported.
            </returns>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.Axes">
            <summary>
            <para>An array representing the controls with axes present on the device (e.g., analog thumb sticks).</para>
            <para>Each entry in the array is a floating point value in the range -1.0 – 1.0, representing the axis position from the lowest value (-1.0) to the highest value (1.0).</para>
            </summary>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.Buttons">
            <summary>
            <para>An array of <see cref="T:BrowserAPI.GamepadButton"/> objects representing the buttons present on the device.</para>
            <para>Each entry in the array is 0 if the button is not pressed, and non-zero (typically 1.0) if the button is pressed.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.Connected">
            <summary>
            <para>A boolean indicating whether the gamepad is still connected to the system.</para>
            <para>If the gamepad is connected, the value is true; if not, it is false.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.Id">
            <summary>
            <para>A string containing identifying information about the controller.</para>
            <para>
            The exact syntax is not strictly specified, but in Firefox it will contain three pieces of information separated by dashes (-):<br />
            - Two 4-digit hexadecimal strings containing the USB vendor and product id of the controller<br />
            - The name of the controller as provided by the driver.<br />
            For example, a PS2 controller returned <i>810-3-USB Gamepad</i>.
            </para>
            <para>This information is intended to allow you to find a mapping for the controls on the device as well as display useful feedback to the user.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.Index">
            <summary>
            <para>An integer that is auto-incremented to be unique for each device currently connected to the system.</para>
            <para>This can be used to distinguish multiple controllers; a gamepad that is disconnected and reconnected will retain the same index.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.Mapping">
            <summary>
            <para>A string indicating whether the browser has remapped the controls on the device to a known layout.</para>
            <para>
            The currently supported known layouts are:<br />
            - "standard" for the <see href="https://w3c.github.io/gamepad/#remapping">standard gamepad</see>.<br />
            - "xr-standard for the <see href="https://immersive-web.github.io/webxr-gamepads-module/#xr-standard-heading">standard XR gamepad</see>. See also <see href="https://developer.mozilla.org/en-US/docs/Web/API/XRInputSource/gamepad">XRInputSource.gamepad</see>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.Timestamp">
            <summary>
            <para>A <see href="https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp">DOMHighResTimeStamp</see> representing the last time the data for this gamepad was updated.</para>
            <para>
            The idea behind this is to allow developers to determine if the axes and button data have been updated from the hardware.
            The value must be relative to the navigationStart attribute of the PerformanceTiming interface.Values are monotonically increasing,
            meaning that they can be compared to determine the ordering of updates, as newer values will always be greater than or equal to older values.</para>
            <para>Note: This property is not currently supported anywhere.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IGamepadInProcess.VibrationActuatorEffects">
            <summary>
            <para>Returns an array of enumerated values representing the different haptic effects that the actuator supports.</para>
            <para>
            Possible included values are:<br />
            - "dual-rumble": A positional rumbling effect created by dual vibration motors in each handle of a controller, which can be vibrated independently.<br />
            - "trigger-rumble": Localized rumbling effects on the surface of a controller's trigger buttons created by vibrational motors located in each button. These buttons most commonly take the form of spring-loaded triggers.<br />
            - "vibration": Simple vibration hardware, which creates a rumbling effect.
            </para>
            <para>If no vibration is supported, an empty array is returned.</para>
            <remarks>Browser support: If the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Gamepad/vibrationActuator">vibrationActuator</see> property is not supported, an empty array is returned.
            If <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/effects">effects</see> property is not supported, the <see href="https://developer.mozilla.org/en-US/docs/Web/API/GamepadHapticActuator/type">type</see> property is used instead.</remarks>
            </summary>
        </member>
        <member name="T:BrowserAPI.IGeolocation">
            <summary>
            The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGeolocation.GetCurrentPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Is used to get the current position of the device.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).<br />
            The timestamp is also included.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IGeolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Is used to register a handler function that will be called automatically each time the position of the device changes.
            You can also, optionally, specify an error handling callback function.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </para>
            <para>
            timestamp:<br />
            Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <param name="cancellationToken"></param>
            <returns>WatchId - can be used to <see cref="M:BrowserAPI.IGeolocation.ClearWatch(System.Int32,System.Threading.CancellationToken)">clear</see> this registration.</returns>
        </member>
        <member name="M:BrowserAPI.IGeolocation.ClearWatch(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Is used to unregister location/error monitoring handlers previously installed using <see cref="M:BrowserAPI.IGeolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="watchId">The id of the registration from <see cref="M:BrowserAPI.IGeolocation.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IGeolocation.GetCurrentPositionAsync(System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Is used to get the current position of the device.
            </summary>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <param name="cancellationToken"></param>
            <returns>
            <para>If successful, a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </para>
            <para>
            timestamp:<br />
            Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </para>
            <para>If error, an object is returned containing an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </returns>
        </member>
        <member name="T:BrowserAPI.IGeolocationInProcess">
            <summary>
            The Geolocation API allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGeolocationInProcess.GetCurrentPositionAsync(System.Int64,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Is used to get the current position of the device.
            </summary>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <param name="cancellationToken"></param>
            <returns>
            <para>If successful, a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </para>
            <para>
            timestamp:<br />
            Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </para>
            <para>If error, an object is returned containing an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IGeolocationInProcess.GetCurrentPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)">
            <summary>
            Is used to get the current position of the device.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).<br />
            The timestamp is also included.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IGeolocationInProcess.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)">
            <summary>
            Is used to register a handler function that will be called automatically each time the position of the device changes.
            You can also, optionally, specify an error handling callback function.
            </summary>
            <param name="successCallback">
            <para>A callback function that takes a <see cref="T:BrowserAPI.GeolocationCoordinates"/> object and a <see cref="T:System.Int64"/> timestamp  as its input parameter.</para>
            <para>
            GeolocationCoordinates:<br />
            The GeolocationCoordinates interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
            The geographic position information is provided in terms of World Geodetic System coordinates (WGS84).
            </para>
            <para>
            timestamp:<br />
            Returns a timestamp, given as Unix time in milliseconds, representing the time at which the location was retrieved.
            </para>
            </param>
            <param name="errorCallback">
            <para>An optional callback function that takes an <see cref="T:System.Int32"/> errorCode and <see cref="T:System.String"/> message as its input parameter.</para>
            <para>
            errorCode:<br />
            Returns an unsigned short representing the error code.
            The following values are possible:<br />
            1: PERMISSION_DENIED - The acquisition of the geolocation information failed because the page didn't have the necessary permissions, for example because it is blocked by a Permissions Policy<br />
            2: POSITION_UNAVAILABLE - The acquisition of the geolocation failed because at least one internal source of position returned an internal error.<br />
            3: TIMEOUT - The time allowed to acquire the geolocation was reached before the information was obtained.
            </para>
            <para>
            message:<br />
            Returns a human-readable string describing the details of the error.
            Specifications note that this is primarily intended for debugging use and not to be shown directly in a user interface.
            </para>
            </param>
            <param name="maximumAge">
            A positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return.
            If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position.
            If set to a value less than zero the device must return a cached position regardless of its age.
            Default: 0.
            </param>
            <param name="timeout">
            A positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position.
            The default value is -1, meaning that getCurrentPosition() won't return until the position is available.
            </param>
            <param name="enableHighAccuracy">
            A boolean value that indicates the application would like to receive the best possible results.
            If true and if the device is able to provide a more accurate position, it will do so.
            Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example).
            On the other hand, if false, the device can take the liberty to save resources by responding more quickly and/or using less power.
            Default: false.
            </param>
            <returns>WatchId - can be used to <see cref="M:BrowserAPI.IGeolocationInProcess.ClearWatch(System.Int32)">clear</see> this registration.</returns>
        </member>
        <member name="M:BrowserAPI.IGeolocationInProcess.ClearWatch(System.Int32)">
            <summary>
            Is used to unregister location/error monitoring handlers previously installed using <see cref="M:BrowserAPI.IGeolocationInProcess.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)"/>.
            </summary>
            <param name="watchId">The id of the registration from <see cref="M:BrowserAPI.IGeolocationInProcess.WatchPosition(System.Action{BrowserAPI.GeolocationCoordinates},System.Action{System.Int32,System.String},System.Int64,System.Int64,System.Boolean)"/></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IHistory">
            <summary>
            <para>The <i>History</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</see> allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.</para>
            <para>There is only one instance of history (It is a singleton.) accessible via the global object <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">history</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHistory.Length">
            <summary>
            Returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHistory.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHistory.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHistory.ScrollRestoration">
            <summary>
            <para>Allows web applications to explicitly set default scroll restoration behavior on history navigation.</para>
            <para>This property can be either "auto" or "manual".</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHistory.GetScrollRestoration(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHistory.ScrollRestoration" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistory.SetScrollRestoration(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHistory.ScrollRestoration" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHistory.State">
            <summary>
            Returns an <i>any</i> value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a <i>popstate</i> event.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHistory.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHistory.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistory.Forward(System.Threading.CancellationToken)">
            <summary>
            <para>This asynchronous method goes to the next page in session history, the same action as when the user clicks the browser's <i>Forward</i> button; this is equivalent to <i>history.go(1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistory.Back(System.Threading.CancellationToken)">
            <summary>
            <para>This asynchronous method goes to the previous page in session history, the same action as when the user clicks the browser's <i>Back</i> button. Equivalent to <i>history.go(-1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistory.Go(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1 for the next page.
            If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect.
            Calling <i>go()</i> without parameters or a value of 0 reloads the current page.
            </summary>
            <param name="delta">
            The position in the history to which you want to move, relative to the current page.
            A negative value moves backwards, a positive value moves forwards.
            So, for example, history.go(2) moves forward two pages and history.go(-2) moves back two pages.
            If no value is passed or if delta equals 0, it has the same result as calling location.reload().</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistory.PushState(System.Object,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Pushes the given data onto the session history stack with the specified title (and, if provided, URL).
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API">Working with the History API</see>.
            </summary>
            <param name="data">
            <para>
            The state object is a JavaScript object which is associated with the new history entry created by pushState().
            Whenever the user navigates to the new state, a popstate event is fired, and the state property of the event contains a copy of the history entry's state object.
            </para>
            <para>The state object can be anything that can be serialized.</para>
            </param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing an empty string is safe against future changes to the method. (Safari uses it as title though)</param>
            <param name="url">
            The new history entry's URL.
            Note that the browser won't attempt to load this URL after a call to pushState(), but it may attempt to load the URL later, for instance, after the user restarts the browser.
            The new URL does not need to be absolute; if it's relative, it's resolved relative to the current URL.
            The new URL must be of the same origin as the current URL; otherwise, pushState() will throw an exception.
            If this parameter isn't specified, it's set to the document's current URL.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistory.ReplaceState(System.Object,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL.
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API">Working with the History API</see>.
            </summary>
            <param name="data">An object which is associated with the history entry passed to the replaceState() method. The state object can be null.</param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing the empty string is traditional, and safe against future changes to the method.</param>
            <param name="url">The URL of the history entry. The new URL must be of the same origin as the current URL; otherwise the replaceState() method throws an exception.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistory.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHistory.OnPopState">
            <summary>
            <para>
            Is fired when the active history entry changes while the user navigates the session history.
            It changes the current history entry to that of the last page the user visited or,
            if <i>history.pushState()</i> has been used to add a history entry to the history stack, that history entry is used instead.
            </para>
            <para>Parameter is the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History/state">state</see> value as JSON.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IHistoryInProcess">
            <summary>
            <para>The <i>History</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">History API</see> allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.</para>
            <para>There is only one instance of history (It is a singleton.) accessible via the global object <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">history</see>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHistoryInProcess.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHistoryInProcess.OnPopState">
            <summary>
            <para>
            Is fired when the active history entry changes while the user navigates the session history.
            It changes the current history entry to that of the last page the user visited or,
            if <i>history.pushState()</i> has been used to add a history entry to the history stack, that history entry is used instead.
            </para>
            <para>Parameter is the <see href="https://developer.mozilla.org/en-US/docs/Web/API/History/state">state</see> value as JSON.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHistoryInProcess.Length">
            <summary>
            Returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHistoryInProcess.ScrollRestoration">
            <summary>
            <para>Allows web applications to explicitly set default scroll restoration behavior on history navigation.</para>
            <para>This property can be either "auto" or "manual".</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHistoryInProcess.State">
            <summary>
            Returns an <i>any</i> value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a <i>popstate</i> event.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHistoryInProcess.Forward">
            <summary>
            <para>This asynchronous method goes to the next page in session history, the same action as when the user clicks the browser's <i>Forward</i> button; this is equivalent to <i>history.go(1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistoryInProcess.Back">
            <summary>
            <para>This asynchronous method goes to the previous page in session history, the same action as when the user clicks the browser's <i>Back</i> button. Equivalent to <i>history.go(-1)</i>.</para>
            <para>Calling this method to go forward beyond the most recent page in the session history has no effect and doesn't raise an exception.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistoryInProcess.Go(System.Int32)">
            <summary>
            Asynchronously loads a page from the session history, identified by its relative location to the current page, for example -1 for the previous page or 1 for the next page.
            If you specify an out-of-bounds value (for instance, specifying -1 when there are no previously-visited pages in the session history), this method silently has no effect.
            Calling <i>go()</i> without parameters or a value of 0 reloads the current page.
            </summary>
            <param name="delta">
            The position in the history to which you want to move, relative to the current page.
            A negative value moves backwards, a positive value moves forwards.
            So, for example, history.go(2) moves forward two pages and history.go(-2) moves back two pages.
            If no value is passed or if delta equals 0, it has the same result as calling location.reload().</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistoryInProcess.PushState(System.Object,System.String,System.String)">
            <summary>
            Pushes the given data onto the session history stack with the specified title (and, if provided, URL).
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API">Working with the History API</see>.
            </summary>
            <param name="data">
            <para>
            The state object is a JavaScript object which is associated with the new history entry created by pushState().
            Whenever the user navigates to the new state, a popstate event is fired, and the state property of the event contains a copy of the history entry's state object.
            </para>
            <para>The state object can be anything that can be serialized.</para>
            </param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing an empty string is safe against future changes to the method. (Safari uses it as title though)</param>
            <param name="url">
            The new history entry's URL.
            Note that the browser won't attempt to load this URL after a call to pushState(), but it may attempt to load the URL later, for instance, after the user restarts the browser.
            The new URL does not need to be absolute; if it's relative, it's resolved relative to the current URL.
            The new URL must be of the same origin as the current URL; otherwise, pushState() will throw an exception.
            If this parameter isn't specified, it's set to the document's current URL.
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHistoryInProcess.ReplaceState(System.Object,System.String,System.String)">
            <summary>
            Updates the most recent entry on the history stack to have the specified data, title, and, if provided, URL.
            The data is treated as opaque by the DOM; you may specify any JavaScript object that can be serialized.
            Note that all browsers but Safari currently ignore the title parameter.
            For more information, see Working with the History API.
            </summary>
            <param name="data">An object which is associated with the history entry passed to the replaceState() method. The state object can be null.</param>
            <param name="title">This parameter exists for historical reasons, and cannot be omitted; passing the empty string is traditional, and safe against future changes to the method.</param>
            <param name="url">The URL of the history entry. The new URL must be of the same origin as the current URL; otherwise the replaceState() method throws an exception.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IHTMLElement">
            <summary>
            The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AccessKey">
            <summary>
            Sets the keystroke which a user can press to jump to a given element.
            </summary>
            <remarks>
            Note: The HTMLElement.accessKey property is seldom used because of its multiple conflicts with already present key bindings in browsers.
            To work around this, browsers implement accesskey behavior if the keys are pressed with other "qualifying" keys (such as Alt + accesskey).
            </remarks>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAccessKey(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AccessKey" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAccessKey(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AccessKey" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AccessKeyLabel">
            <summary>
            Returns a string containing the element's browser-assigned access key (if any); otherwise it returns an empty string.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAccessKeyLabel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AccessKeyLabel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AttributeStyleMap">
            <summary>
            <para>
            Returns a live StylePropertyMap object that contains a list of style properties of the element that are defined in the element's inline style attribute,
            or assigned using the style property of the HTMLElement interface via script.
            </para>
            <para>Shorthand properties are expanded. If you set "border-top: 1px solid black", the longhand properties ("border-top-color", "border-top-style", and "border-top-width") are set instead.</para>
            <para>
            The main difference between <see cref="P:BrowserAPI.IHTMLElement.Style">style</see> property and <i>attributeStyleMap</i> is that, the <see cref="P:BrowserAPI.IHTMLElement.Style">style</see> property gets/sets all styles as a string,
            while <i>attributeStyleMap</i> handles styles in a Dictionary&lt;string, string&gt;.
            </para>
            <para>Though this property itself is not writable, you can write and remove inline styles through <see cref="M:BrowserAPI.IHTMLElement.SetAttributeStyleMap(System.String,System.String,System.Threading.CancellationToken)"/> and <see cref="M:BrowserAPI.IHTMLElement.RemoveAttributeStyleMap(System.String,System.Threading.CancellationToken)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAttributeStyleMap(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AttributeStyleMap" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAttributeStyleMap(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sets the given css property name to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a css property, use <see cref="M:BrowserAPI.IHTMLElement.RemoveAttributeStyleMap(System.String,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="name">name of the css property</param>
            <param name="value">value for the given css property</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RemoveAttributeStyleMap(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the given css property.
            </summary>
            <param name="name">css property name</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Autocapitalize">
            <summary>
            <para>
            Represents the element's capitalization behavior for user input. It is available on all HTML elements, though it doesn't affect all of them, including:<br />
            - &lt;input&lt; and &lt;textarea&lt; elements.<br />
            - Any element with <i>contenteditable</i> set on it.
            </para>
            <para>
            The value is a string that represents the element's capitalization behavior for user input. Valid values are as follows:<br />
            - "none" or "off": No autocapitalization should be applied, that is, all letters should default to lowercase.<br />
            - "sentences" or "on": The first letter of each sentence should default to a capital letter; all other letters should default to lowercase.<br />
            - "words": The first letter of each word should default to a capital letter; all other letters should default to lowercase.<br />
            - "characters": All letters should default to uppercase.
            </para>
            <para>
            <i>autocapitalize</i> doesn't affect behavior when typing on a physical keyboard.
            It affects the behavior of other input mechanisms such as virtual keyboards on mobile devices and voice input.
            This can assist users by making data entry quicker and easier, for example by automatically capitalizing the first letter of each sentence.
            </para>
            <para>It reflects the value of the autocapitalize HTML global attribute.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAutocapitalize(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Autocapitalize" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAutocapitalize(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Autocapitalize" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Autofocus">
            <summary>
            <para>
            Represents a boolean value reflecting the autofocus HTML global attribute, which indicates whether the control should be focused when the page loads,
            or when dialog or popover become shown if specified in an element inside &lt;dialog&gt; elements or elements whose popover attribute is set.
            </para>
            <para>
            Only one form-associated element inside a document, or a &lt;dialog&gt; element, or an element whose popover attribute is set, can have this attribute specified.
            If there are several, the first element with the attribute set inserted, usually the first such element on the page, gets the initial focus.
            </para>
            </summary>
            <remarks>
            Note: Setting this property doesn't set the focus to the associated element:
            it merely tells the browser to focus to it when the element is inserted in the document.
            Setting it after the insertion, that is most of the time after the document load, has no visible effect.
            </remarks>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAutofocus(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Autofocus" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAutofocus(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Autofocus" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ContentEditable">
            <summary>
            <para>
            Specifies whether or not the element is editable. This enumerated attribute can have the following values:<br />
            - "true" indicates that the element is contenteditable.<br />
            - "false" indicates that the element cannot be edited.<br />
            - "plaintext-only" indicates that the element's raw text is editable, but rich text formatting is disabled.
            </para>
            <para>You can use the <see cref="P:BrowserAPI.IHTMLElement.IsContentEditable"/> property to test the computed boolean value of this property.</para>
            <para>If the attribute is missing or its value is invalid, its value is inherited from its parent element: so the element is editable (or not) based on the parent element.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetContentEditable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ContentEditable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetContentEditable(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ContentEditable" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Dataset">
            <summary>
            <para>Provides read/write access to custom data attributes (data-*) on elements. It exposes a map of strings (DOMStringMap) with an entry for each data-* attribute.</para>
            <para>
            The property name of a custom data attribute is the same as the HTML attribute without the data- prefix.
            Single dashes (-) are removed, and the next ASCII character after a removed dash is capitalized to form the property's camel-cased name.
            </para>
            <para>For writing or removing elements use <see cref="M:BrowserAPI.IHTMLElement.SetDataset(System.String,System.String,System.Threading.CancellationToken)"/> or <see cref="M:BrowserAPI.IHTMLElement.RemoveDataset(System.String,System.Threading.CancellationToken)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetDataset(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Dataset" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetDataset(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sets the given data-attribute to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a data-attribute, use <see cref="M:BrowserAPI.IHTMLElement.RemoveDataset(System.String,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="name">name of the data-attribute without data- prefix</param>
            <param name="value">value for the given data-attribute</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RemoveDataset(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the given data-attribute.
            </summary>
            <param name="name">data-attribute name</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Dir">
            <summary>
            <para>
            Indicates the text writing directionality of the content of the current element. Possible values are<br />
            - "ltr": Left-to-right writing direction.<br />
            - "rtl": Right-to-left writing direction.<br />
            - "auto": The direction of the element must be determined based on the contents of the element.<br />
            - "": The default value; the directionality is inherited from the parent element.
            </para>
            <para>
            Note that if the dir attribute is unspecified, the element itself may still inherit directionality from its parent.
            However, that inherited directionality is not reflected by this property's value.
            </para>
            <para>
            The text writing directionality of an element is which direction that text goes (for support of different language systems).
            Arabic languages and Hebrew are typical languages using the RTL directionality.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetDir(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Dir" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetDir(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Dir" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Draggable">
            <summary>
            A boolean value indicating if the element can be dragged. It reflects the value of the draggable HTML global attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetDraggable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Draggable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetDraggable(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Draggable" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.EnterKeyHint">
            <summary>
            <para>
            An enumerated property defining what action label (or icon) to present for the enter key on virtual keyboards.
            It reflects the enterkeyhint HTML global attribute and is an enumerated property, only accepting the following values as a string:<br />
            - "enter": Typically indicating inserting a new line.<br />
            - "done": Typically meaning there is nothing more to input and the input method editor (IME) will be closed.<br />
            - "go": Typically meaning to take the user to the target of the text they typed.<br />
            - "next": Typically taking the user to the next field that will accept text.<br />
            - "previous": Typically taking the user to the previous field that will accept text.<br />
            - "search": Typically taking the user to the results of searching for the text they have typed.<br />
            - "send": Typically delivering the text to its target.
            </para>
            <para>If no <i>enterKeyHint</i> value has been specified or if it was set to a different value than the allowed ones, it will return an empty string.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetEnterKeyHint(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.EnterKeyHint" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetEnterKeyHint(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.EnterKeyHint" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Hidden">
            <summary>
            Reflects the value of the element's hidden attribute.<br />
            true - The element is hidden.<br />
            false - The element is not hidden. This is the default value for the attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetHidden(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Hidden" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetHidden(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Hidden" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Inert">
            <summary>
            <para>
            Reflects the value of the element's inert attribute.
            It is a boolean value that, when present, makes the browser "ignore" user input events for the element, including focus events and events from assistive technologies.
            The browser may also ignore page search and text selection in the element.
            This can be useful when building UIs such as modals where you would want to "trap" the focus inside the modal when it's visible.
            </para>
            <para>
            Note that if the inert attribute is unspecified, the element itself may still inherit inertness from its parent.
            However, that inherited inertness is not reflected by this property's value.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetInert(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Inert" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetInert(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Inert" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.InnerText">
            <summary>
            <para>Represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetInnerText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.InnerText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetInnerText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.InnerText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.InputMode">
            <summary>
            <para>
            Reflects the value of the element's inputmode attribute.<br />
            It provides a hint about the type of data that might be entered by the user while editing the element or its contents. This allows the browser to display an appropriate virtual keyboard.<br />
            It is used primarily on &lt;input&gt; elements, but is usable on any element in <see cref="P:BrowserAPI.IHTMLElement.ContentEditable">contenteditable</see> mode.
            </para>
            <para>
            This attribute may have one of the following values:<br />
            - "decimal": Fractional numeric input keyboard that contains the digits and decimal separator for the user's locale (typically . or ,).<br />
            - "email": A virtual keyboard optimized for entering email addresses. Typically includes the @character as well as other optimizations.<br />
            - "none": No virtual keyboard. This is used when the page implements its own keyboard input control.<br />
            - "numeric": Numeric input keyboard that only requires the digits 0–9. Devices may or may not show a minus key.<br />
            - "search": A virtual keyboard optimized for search input. For instance, the return/submit key may be labeled "Search".<br />
            - "tel": A telephone keypad input that includes the digits 0–9, the asterisk (*), and the pound (#) key.<br />
            - "text": Standard input keyboard for the user's current locale.<br />
            - "url": A keypad optimized for entering URLs. This may have the / key more prominent, for example.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetInputMode(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.InputMode" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetInputMode(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.InputMode" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.IsContentEditable">
            <summary>
            It is true if the contents of the element are editable; otherwise it returns false.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetIsContentEditable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.IsContentEditable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Lang">
            <summary>
            <para>
            Indicates the base language of an element's attribute values and text content, in the form of a RFC 5646: BCP 47 language identifier tag.
            It reflects the element's lang attribute; the xml:lang attribute does not affect this property.
            </para>
            <para>
            Note that if the lang attribute is unspecified, the element itself may still inherit the language from its parent.
            However, that inherited language is not reflected by this property's value.
            </para>
            <para>Common examples include "en" for English, "ja" for Japanese, "es" for Spanish and so on. If unspecified, the value is an empty string.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetLang(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Lang" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetLang(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Lang" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Nonce">
            <summary>
            <para>Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.</para>
            <para>In later implementations, elements only expose their nonce attribute to scripts (and not to side-channels like CSS attribute selectors).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetNonce(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Nonce" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetNonce(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Nonce" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetWidth">
            <summary>
            <para>Returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OffsetWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetHeight">
            <summary>
            <para>Returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OffsetHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetLeft">
            <summary>
            <para>Returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetLeft(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OffsetLeft" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetTop">
            <summary>
            Returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent, the closest positioned ancestor element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetTop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OffsetTop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OffsetParent">
            <summary>
            <para>Returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOffsetParent(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OffsetParent" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OuterText">
            <summary>
            <para>
            Returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.IHTMLElement.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOuterText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OuterText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetOuterText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OuterText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Popover">
            <summary>
            <para>Gets/Sets an element's popover state via JavaScript ("auto", "hint", or "manual"), and can be used for feature detection. It reflects the value of the popover global HTML attribute.</para>
            <para>
            Possible values are:<br />
            - "auto": auto popovers can be "light dismissed" — this means that you can hide the popover by clicking outside it or pressing the Esc key.
            Usually, only one auto popover can be shown at a time — showing a second popover when one is already shown will hide the first one.
            The exception to this rule is when you have nested auto popovers.
            See Nested popovers for more details.<br />
            - "hint": hint popovers do not close auto popovers when they are displayed, but will close other hint popovers.
            They can be light dismissed and will respond to close requests.
            Usually they are shown and hidden in response to non-click JavaScript events such as mouseover/mouseout and focus/blur.
            Clicking a button to open a hint popover would cause an open auto popover to light-dismiss.<br />
            - "manual": manual popovers cannot be "light dismissed" and are not automatically closed.
            Popovers must explicitly be displayed and closed using declarative show/hide/toggle buttons or JavaScript.
            Multiple independent manual popovers can be shown simultaneously.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetPopover(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Popover" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetPopover(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Popover" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Spellcheck">
            <summary>
            Represents a boolean value that controls the spell-checking hint. It is available on all HTML elements, though it doesn't affect all of them.
            It reflects the value of the spellcheck HTML global attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetSpellcheck(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Spellcheck" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetSpellcheck(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Spellcheck" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>Returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetStyle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Style" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetStyle(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Style" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.TabIndex">
            <summary>
            <para>
            Represents the tab order of the current element. Tab order is as follows:<br />
            1. Elements with a positive tabIndex. Elements that have identical tabIndex values should be navigated in the order they appear. Navigation proceeds from the lowest tabIndex to the highest tabIndex.<br />
            2. Elements that do not support the tabIndex attribute or support it and assign tabIndex to 0, in the order they appear.<br />
            Elements that are disabled do not participate in the tabbing order.
            </para>
            <para>Values don't need to be sequential, nor must they begin with any particular value. They may even be negative, though each browser trims very large values.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetTabIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.TabIndex" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetTabIndex(System.Int64,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.TabIndex" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Title">
            <summary>
            Represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetTitle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Title" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetTitle(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Title" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Translate">
            <summary>
            Indicates whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.
            It reflects the value of the translate HTML global attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetTranslate(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Translate" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetTranslate(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Translate" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetHasFocus(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.HasFocus" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Click(System.Threading.CancellationToken)">
            <summary>
            <para>Simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Focus(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Sets focus on the specified element, if it can be focused. The focused element is the element that will receive keyboard and similar events by default.</para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Blur(System.Threading.CancellationToken)">
            <summary>
            Removes keyboard focus from the current element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ShowPopover(System.Threading.CancellationToken)">
            <summary>
            <para>Shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HidePopover(System.Threading.CancellationToken)">
            <summary>
            <para>Hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.TogglePopover(System.Threading.CancellationToken)">
            <summary>
            <para>Toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.TogglePopover(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IHTMLElement.TogglePopover(System.Threading.CancellationToken)" />
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
            <param name="cancellationToken"></param>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnCommand">
            <summary>
            <para>
            Fires on an element that is controlled via a button with valid commandForElement and command values, whenever the button is interacted with (e.g., it is clicked).
            </para>
            <para>
            <b>Parameters</b><br />
            - IHTMLElement <i>source</i>: An HTMLButtonElement representing the button that caused this invocation.<br />
            - string <i>command</i>: Representing the command value of the source button.
            </para>
            </summary>
            <remarks>
            Note: Dispose the given IHTMLElement object when you are done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnDrag">
            <summary>
            <para>
            Is fired every few hundred milliseconds as an element or text selection is being dragged by the user.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnDragStart">
            <summary>
            <para>
            Is fired when the user starts dragging an element or text selection.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnDragEnd">
            <summary>
            <para>
            Is fired when a drag operation ends (by releasing a mouse button or hitting the escape key).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnDragEnter">
            <summary>
            <para>
            Is fired when a dragged element or text selection enters a valid drop target.
            The target object is the immediate user selection (the element directly indicated by the user as the drop target), or the &lt;body&gt; element.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnDragLeave">
            <summary>
            <para>
            Is fired when a dragged element or text selection leaves a valid drop target.<br />
            This event is not cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnDragOver">
            <summary>
            <para>
            Is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnDrop">
            <summary>
            <para>
            Is fired when an element or text selection is dropped on a valid drop target.
            To ensure that the drop event always fires as expected, you should always include a preventDefault() call in the part of your code which handles the dragover event.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFile[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>DispseAsync()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Attributes">
            <summary>
            Returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAttributes(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Attributes" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClassList">
            <summary>
            <para>Returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClassList(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ClassList" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClassName">
            <summary>
            Gets/Sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClassName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ClassName" />
            <param name="cancellationToken"></param>
            <returns>A string variable representing the class or space-separated classes of the current element.</returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetClassName(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ClassName" />
            <param name="value">A string variable representing the class or space-separated classes of the current element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientWidth">
            <summary>
            <para>
            Is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ClientWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientHeight">
            <summary>
            <para>
            Is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ClientHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientLeft(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ClientLeft" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientTop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ClientTop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.CurrentCSSZoom">
            <summary>
            <para>Provides the "effective" CSS zoom of an element, taking into account the zoom applied to the element and all its parent elements.</para>
            <para>
            The value calculated by multiplying the CSS zoom values of the element and all of its parents.
            For example, if three elements with zoom values of 2, 1.5, and 3, are nested within each other, the most deeply nested element will have a currentCSSZoom value of 9.
            If the element doesn't have a CSS box, for example because display: none is set on the element or one of its parents, then the currentCSSZoom is set to 1.
            </para>
            <para>
            Note that some methods, such as Element.getBoundingClientRect(), return dimensions and position that are relative to the viewport, and hence include the effects of CSS zoom.
            Other properties and methods return values that are relative to the element itself, and do not include the effects of zooming.
            These include, for example, client* properties such as Element.clientHeight, scroll*() methods like Element.scroll(), and offset* properties such as HTMLElement.offsetHeight.
            The currentCSSZoom property can be used to scale these values to adjust for the effects of zooming.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetCurrentCSSZoom(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.CurrentCSSZoom" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Id">
            <summary>
            <para>Represents the element's identifier, reflecting the id global attribute.</para>
            <para>If the id value is not the empty string, it must be unique in a document.</para>
            <para>The id is often used with getElementById() to retrieve a particular element. Another common case is to use an element's ID as a selector when styling the document with CSS.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetId(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Id" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetId(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Id" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.IsConnected">
            <summary>
            A boolean indicating whether the node is connected (directly or indirectly) to a Document object.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetIsConnected(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.IsConnected" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.InnerHTML">
            <summary>
            <para>Gets/Sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetInnerHTML(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.InnerHTML" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetInnerHTML(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.InnerHTML" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.OuterHTML">
            <summary>
            <para>
            Gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetOuterHTML(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OuterHTML" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetOuterHTML(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.OuterHTML" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Part">
            <summary>
            Represents the part identifier(s) of the element (i.e., set using the part attribute), returned as a DOMTokenList. These can be used to style parts of a shadow DOM, via the ::part pseudo-element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetPart(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Part" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollWidth">
            <summary>
            <para>Is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ScrollWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollHeight">
            <summary>
            <para>Is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ScrollHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollLeft">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollLeft(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ScrollLeft" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetScrollLeft(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ScrollLeft" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ScrollTop">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetScrollTop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ScrollTop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetScrollTop(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ScrollTop" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Slot">
            <summary>
            Returns the name of the shadow DOM slot the element is inserted in.<br />
            A slot is a placeholder inside a web component that users can fill with their own markup (see Using templates and slots for more information).
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetSlot(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Slot" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetSlot(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Slot" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.LocalName">
            <summary>
            The local part of the qualified name of an element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetLocalName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.LocalName" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.NamespaceURI">
            <summary>
            The namespace URI of the element, or null if the element is not in a namespace.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetNamespaceURI(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.NamespaceURI" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Prefix">
            <summary>
            The namespace prefix of the specified element, or null if no prefix is specified.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetPrefix(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Prefix" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.BaseURI">
            <summary>
            <para>The absolute base URL of the document containing the node.</para>
            <para>
            The base URL is used to resolve relative URLs when the browser needs to obtain an absolute URL,
            for example when processing the HTML &lt;img&gt; element's src attribute or the xlink:href Deprecated or href attributes in SVG.
            </para>
            <para>Although this property is read-only, its value is determined by an algorithm each time the property is accessed, and may change if the conditions changed.</para>
            <para>
            The base URL is determined as follows:<br />
            1. By default, the base URL is the location of the document (as determined by window.location).<br />
            2. If it is an HTML Document and there is a &lt;Base&gt; element in the document, the href value of the first Base element with such an attribute is used instead.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetBaseURI(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.BaseURI" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.TagName">
            <summary>
            <para>The tag name of the element on which it's called.</para>
            <para>
            For example, if the element is an &lt;img&gt;, its tagName property is IMG (for HTML documents; it may be cased differently for XML/XHTML documents).
            Note: You can use the localName property to access the Element's local name — which for the case in the example is img (lowercase).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetTagName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.TagName" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.NodeName">
            <summary>
            <para>The name of the current node as a string.</para>
            <para>
            Values for the different types of nodes are:<br />
            - Attr: The value of Attr.name, that is the qualified name of the attribute<br />
            - CDATASection: The string "#cdata-section"<br />
            - Comment: The string "#comment"<br />
            - Document: The string "#document"<br />
            - DocumentFragment: The string "#document-fragment"<br />
            - DocumentType: The value of DocumentType.name<br />
            - Element: The value of Element.tagName, that is the uppercase name of the element tag if an HTML element, or the lowercase element tag if an XML element (like a SVG or MathML element)<br />
            - ProcessingInstruction: The value of ProcessingInstruction.target<br />
            - Text: The string "#text"
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetNodeName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.NodeName" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.NodeType">
            <summary>
            <para>An integer that identifies what the node is. It distinguishes different kind of nodes from each other, such as elements, text and comments.</para>
            <para>
            Possible values are:<br />
            - 1: ELEMENT_NODE - An Element node like &lt;p&gt; or &lt;div&gt;.<br />
            - 2: ATTRIBUTE_NODE - An Attribute of an Element.<br />
            - 3: TEXT_NODE - The actual Text inside an Element or Attr.<br />
            - 4: CDATA_SECTION_NODE - A CDATASection, such as &lt;!CDATA[[ … ]]&gt;<br />
            - 7: PROCESSING_INSTRUCTION_NODE - A ProcessingInstruction of an XML document, such as &lt;?xml-stylesheet … ?&gt;.<br />
            - 8: COMMENT_NODE - A Comment node, such as &lt;!-- … --&gt;.<br />
            - 9: DOCUMENT_NODE - A Document node.<br />
            - 10: DOCUMENT_TYPE_NODE - A DocumentType node, such as &lt;!doctype html&gt;.<br />
            - 11: DOCUMENT_FRAGMENT_NODE - A DocumentFragment node.
            </para>
            <para>
            The following constants have been deprecated and are not in use anymore:<br />
            - 5: ENTITY_REFERENCE_NODE<br />
            - 6: ENTITY_NODE<br />
            - 12: NOTATION_NODE
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetNodeType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.NodeType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ChildElementCount">
            <summary>
            Returns the number of child elements of this element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetChildElementCount(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ChildElementCount" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Children">
            <summary>
            <para>Returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetChildren(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Children" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.FirstElementChild">
            <summary>
            <para>Returns an element's first child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetFirstElementChild(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.FirstElementChild" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.LastElementChild">
            <summary>
            <para>Returns an element's last child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetLastElementChild(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.LastElementChild" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.PreviousElementSibling">
            <summary>
            Returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetPreviousElementSibling(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.PreviousElementSibling" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.NextElementSibling">
            <summary>
            Returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetNextElementSibling(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.NextElementSibling" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.ParentElement">
            <summary>
            Returns the DOM node's parent Element, or null if the node either has no parent,or its parent isn't a DOM Element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetParentElement(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.ParentElement" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaAtomic">
            <summary>
            <para>Reflects the value of the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.</para>
            <para>
            Value is one of the following values:<br />
            - "false": Assistive technologies will present only the changed node or nodes.<br />
            - "true": Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaAtomic(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaAtomic" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaAtomic(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaAtomic" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaAutoComplete">
            <summary>
            <para>Reflects the value of the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.</para>
            <para>
            Value is one of the following values:<br />
            - "inline": When a user is providing input, text suggesting one way to complete the provided input may be dynamically inserted after the caret.<br />
            - "list": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed.<br />
            - "both": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.<br />
            - "none": When a user is providing input, there is no display of an automatic suggestion that attempts to predict how the user intends to complete the input.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaAutoComplete(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaAutoComplete" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaAutoComplete(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaAutoComplete" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaBrailleLabel">
            <summary>
            Reflects the value of the aria-braillelabel attribute, which defines the ARIA braille label of the element.
            This element label may be used by assistive technologies that can present content in braille, but should only be set if a braille-specific label would improve the user experience.
            The aria-braillelabel contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaBrailleLabel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaBrailleLabel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaBrailleLabel(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaBrailleLabel" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaBrailleRoleDescription">
            <summary>
            Reflects the value of the aria-brailleroledescription attribute, which defines the ARIA braille role description of the element.
            This property may be used to provide an abbreviated version of the aria-roledescription value.
            It should only be used if aria-roledescription is present and in the rare case where it is too verbose for braille.
            The aria-brailleroledescription contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaBrailleRoleDescription(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaBrailleRoleDescription" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaBrailleRoleDescription(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaBrailleRoleDescription" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaBusy">
            <summary>
            <para>Reflects the value of the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is being updated.<br />
            - "false": There are no expected updates for the element.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaBusy(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaBusy" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaBusy(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaBusy" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaChecked">
            <summary>
            <para>Reflects the value of the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is checked.<br />
            - "mixed": Indicates a mixed mode value for a tri-state checkbox or menuitemcheckbox.<br />
            - "false": There are no expected updates for the element.<br />
            - "undefined": The element does not support being checked.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaChecked(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaChecked" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaChecked(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaChecked" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaColCount">
            <summary>
            <para>Reflects the value of the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaColCount(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColCount" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaColCount(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColCount" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaColIndex">
            <summary>
            <para>Reflects the value of the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaColIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColIndex" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaColIndex(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColIndex" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaColIndexText">
            <summary>
            Reflects the value of the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaColIndexText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColIndexText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaColIndexText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColIndexText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaColSpan">
            <summary>
            <para>Reflects the value of the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaColSpan(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColSpan" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaColSpan(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaColSpan" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaCurrent">
            <summary>
            <para>Reflects the value of the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.</para>
            <para>
            Value is one of the following values:<br />
            - "page": Represents the current page within a set of pages.<br />
            - "step": Represents the current step within a process.<br />
            - "location": Represents the current location, for example the current page in a breadcrumbs hierarchy.<br />
            - "date": Represents the current date within a collection of dates.<br />
            - "time": Represents the current time within a set of times.<br />
            - "true": Represents the current item within a set.<br />
            - "false": Does not represent the current item within a set.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaCurrent(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaCurrent" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaCurrent(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaCurrent" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaDescription">
            <summary>
            Reflects the value of the aria-description attribute, which defines a string value that describes or annotates the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaDescription(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaDescription" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaDescription(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaDescription" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaDisabled">
            <summary>
            <para>Reflects the value of the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element and all focusable descendants are disabled, but perceivable, and their values cannot be changed by the user.<br />
            - "false": The element is enabled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaDisabled(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaDisabled" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaDisabled(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaDisabled" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaExpanded">
            <summary>
            <para>Reflects the value of the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The grouping element this element owns or controls is expanded.<br />
            - "false": The grouping element this element owns or controls is collapsed.<br />
            - "undefined": The element does not own or control a grouping element that is expandable.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaExpanded(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaExpanded" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaExpanded(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaExpanded" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaHasPopup">
            <summary>
            <para>Reflects the value of the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.</para>
            <para>
            Value is one of the following values:<br />
            - "false": The element does not have a popup.<br />
            - "true": The element has a popup that is a menu.<br />
            - "menu":The element has a popup that is a menu. <br />
            - "listbox": The element has a popup that is a listbox.<br />
            - "tree": The element has a popup that is a tree.<br />
            - "grid": The element has a popup that is a grid.<br />
            - "dialog": The element has a popup that is a dialog.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaHasPopup(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaHasPopup" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaHasPopup(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaHasPopup" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaHidden">
            <summary>
            <para>Reflects the value of the aria-hidden) attribute, which indicates whether the element is exposed to an accessibility API.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is hidden from the accessibility API.<br />
            - "false": The element is exposed to the accessibility API as if it were rendered.<br />
            - "undefined": The element's hidden state is determined by the user agent based on whether it is rendered.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaHidden(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Hidden" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaHidden(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaHidden" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaInvalid">
            <summary>
            <para>
            Reflects the value of the aria-invalid attribute.
            Relevant for the application, checkbox, combobox, gridcell, listbox, radiogroup, slider, spinbutton, textbox, and tree roles,
            it indicates to the accessibility API whether the entered value does not conform to the format expected by the application.
            </para>
            <para>
            If the attribute is not present, or is set to the empty string, assistive technology will treat the value as if it were set to false.
            If the attribute is present but set to a value other than false, grammar, spelling or the empty string (""), assistive technology treats the value as true.
            The property reflects the attribute value as set, not as handled by assistive technology.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is invalid.<br />
            - "false": The element is not in an invalid state.<br />
            - "grammar": The element is in an invalid state because grammatical error was detected.<br />
            - "spelling": The element is in an invalid state because spelling error was detected.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaInvalid(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaInvalid" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaInvalid(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaInvalid" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaKeyShortcuts">
            <summary>
            Reflects the value of the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaKeyShortcuts(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaKeyShortcuts" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaKeyShortcuts(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaKeyShortcuts" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaLabel">
            <summary>
            Reflects the value of the aria-label attribute, which defines a string value that labels the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaLabel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaLabel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaLabel(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaLabel" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaLevel">
            <summary>
            <para>Reflects the value of the aria-level attribute, which defines the hierarchical level of an element within a structure.</para>
            <para>Note: Where possible use an HTML h1 or other correct heading level as these have built in semantics and do not require ARIA attributes.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaLevel(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaLevel" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaLevel(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaLevel" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaLive">
            <summary>
            <para>
            Reflects the value of the aria-live attribute, which indicates that an element will be updated,
            and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.
            </para>
            <para>
            Value is one of the following values:<br />
            - "assertive": Indicates that updates to the region have the highest priority and should be presented to the user immediately.<br />
            - "off": Indicates that updates to the region should not be presented to the user unless the user is currently focused on that region.<br />
            - "polite": Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaLive(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaLive" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaLive(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaLive" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaModal">
            <summary>
            <para>
            Reflects the value of the aria-modal attribute, which indicates whether an element is modal when displayed.
            Applying the aria-modal property to an element with role="dialog" replaces the technique of using aria-hidden on the background for informing assistive technologies that content outside a dialog is inert.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is modal.<br />
            - "false": The element is not modal.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaModal(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaModal" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaModal(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaModal" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaMultiline">
            <summary>
            <para>Reflects the value of the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": This is a multi-line text box.<br />
            - "false": This is a single-line text box.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaMultiline(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaMultiline" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaMultiline(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaMultiline" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaMultiSelectable">
            <summary>
            <para>Reflects the value of the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.</para>
            <para>Note: Where possible use an HTML &lt;select&gt; element as this has built in semantics and does not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": More than one item may be selected at a time.<br />
            - "false": Only one item may be selected.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaMultiSelectable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaMultiSelectable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaMultiSelectable(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaMultiSelectable" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaOrientation">
            <summary>
            <para>Reflects the value of the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.</para>
            <para>
            Value is one of the following values:<br />
            - "horizontal": The element is horizontal.<br />
            - "vertical": The element is vertical.<br />
            - "undefined": The element's orientation is unknown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaOrientation(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaOrientation" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaOrientation(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaOrientation" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaPlaceholder">
            <summary>
            <para>Reflects the value of the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaPlaceholder(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaPlaceholder" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaPlaceholder(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaPlaceholder" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaPosInSet">
            <summary>
            <para>Reflects the value of the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaPosInSet(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaPosInSet" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaPosInSet(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaPosInSet" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaPressed">
            <summary>
            <para>Reflects the value of the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="button" or the &lt;button&gt; element as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is pressed.<br />
            - "false": The element supports being pressed but is not currently pressed.<br />
            - "mixed": Indicates a mixed mode value for a tri-state toggle button.<br />
            - "undefined": The element does not support being pressed.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaPressed(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaPressed" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaPressed(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaPressed" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaReadOnly">
            <summary>
            <para>Reflects the value of the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The user cannot change the value of the element.<br />
            - "false": The user can set the value of the element.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaReadOnly(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaReadOnly" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaReadOnly(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaReadOnly" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaRequired">
            <summary>
            <para>Reflects the value of the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": Users need to provide input on an element before a form is submitted.<br />
            - "false": User input is not necessary to submit the form.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaRequired(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRequired" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaRequired(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRequired" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaRoleDescription">
            <summary>
            Rreflects the value of the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaRoleDescription(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRoleDescription" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaRoleDescription(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRoleDescription" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaRowCount">
            <summary>
            <para>Reflects the value of the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaRowCount(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowCount" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaRowCount(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowCount" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaRowIndex">
            <summary>
            <para>Reflects the value of the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaRowIndex(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowIndex" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaRowIndex(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowIndex" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaRowIndexText">
            <summary>
            Reflects the value of the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaRowIndexText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowIndexText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaRowIndexText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowIndexText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaRowSpan">
            <summary>
            <para>Reflects the value of the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaRowSpan(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowSpan" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaRowSpan(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaRowSpan" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaSelected">
            <summary>
            <para>Reflects the value of the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The item is selected.<br />
            - "false": The item is not selected.<br />
            - "undefined": The item is not selectable.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaSelected(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaSelected" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaSelected(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaSelected" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaSetSize">
            <summary>
            <para>Reflects the value of the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaSetSize(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaSetSize" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaSetSize(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaSetSize" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaSort">
            <summary>
            <para>Reflects the value of the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.</para>
            <para>
            Value is one of the following values:<br />
            - "ascending": Items are sorted in ascending order by this column.<br />
            - "descending": Items are sorted in descending order by this column.<br />
            - "none": There is no defined sort applied to the column.<br />
            - "other": A sort algorithm other than ascending or descending has been applied.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaSort(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaSort" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaSort(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaSort" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaValueMax">
            <summary>
            <para>Reflects the value of the aria-valuemax attribute, which defines the maximum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaValueMax(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueMax" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaValueMax(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueMax" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaValueMin">
            <summary>
            <para>Reflects the value of the aria-valuemin attribute, which defines the minimum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaValueMin(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueMin" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaValueMin(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueMin" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaValueNow">
            <summary>
            <para>Reflects the value of the aria-valuenow attribute, which defines the current value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaValueNow(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueNow" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaValueNow(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueNow" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.AriaValueText">
            <summary>
            Reflects the value of the aria-valuetext attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAriaValueText(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueText" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAriaValueText(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.AriaValueText" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLElement.Role">
            <summary>
            <para>Returns the explicitly set WAI-ARIA role for the element.</para>
            <para>
            All HTML elements have an implicit ARIA role, even if that role is generic.
            This semantic association allows tools to present and support interaction with the object in a manner that is consistent with user expectations about other objects of that type.
            The role attribute is used to explicitly set the element's ARIA role, overriding the implicit role.
            For example, a &lt;ul&gt;, which has an implicit list role, might have role="treegrid" explicitly set.
            The role property reflects the explicitly set value of the role attribute—in this case treegrid; it does not return the element's implicit list role unless explicitly set.
            </para>
            <para>The full list of defined ARIA roles can be found on the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles">ARIA roles</see> reference page.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetRole(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Role" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetRole(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLElement.Role" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.CheckVisibility(System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            Checks whether the element is visible. The method returns false in either of the following situations:<br />
            - The element doesn't have an associated box, for example because the CSS display property is set to 'none' or 'contents'.<br />
            - The element is not being rendered because the element or an ancestor element sets the 'content-visibility' property to 'hidden'.
            </para>
            <para>
            The optional parameter enables additional checks to test for other interpretations of what "visible" means.
            For example, you can further check whether an element has an opacity of 0, if the value of the element visibility property makes it invisible,
            or if the element content-visibility property has a value of auto and its rendering is currently being skipped.
            </para>
            </summary>
            <param name="contentVisibilityAuto">true to check if the element content-visibility property has (or inherits) the value auto, and it is currently skipping its rendering. false by default.</param>
            <param name="opacityProperty">true to check if the element opacity property has (or inherits) a value of 0. false by default.</param>
            <param name="visibilityProperty">true to check if the element is invisible due to the value of its visibility property. false by default.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ComputedStyleMap(System.Threading.CancellationToken)">
            <summary>
            Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetBoundingClientRect(System.Threading.CancellationToken)">
            <summary>
            Returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetClientRects(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Matches(System.String,System.Threading.CancellationToken)">
            <summary>
            Tests whether the element would be selected by the specified CSS selector.
            </summary>
            <param name="selectors">A string containing valid CSS selectors to test the Element against.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.IsDefaultNamespace(System.String,System.Threading.CancellationToken)">
            <summary>
            Accepts a namespace URI as an argument. It returns a boolean value that is true if the namespace is the default namespace on the given node and false if not.
            </summary>
            <param name="namespaceURI">A string representing the namespace against which the element will be checked.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.LookupPrefix(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a string containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the first prefix is returned.</para>
            <para>If the node is a <i>DocumentType</i> or a <i>DocumentFragment</i>, it returns null.</para>
            </summary>
            <param name="namespace">A string containing the namespace to look the prefix up.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.LookupNamespaceURI(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            Takes a prefix as parameter and returns the namespace URI associated with it on the given node if found (and null if not).
            This method's existence allows Node objects to be passed as a namespace resolver to <i>XPathEvaluator.createExpression()</i> and <i>XPathEvaluator.evaluate()</i>.
            </para>
            <para>
            It returns a string containing the namespace URI corresponding to the prefix.<br />
            - Always returns null if the node is a DocumentFragment, DocumentType, Document with no documentElement, or Attr with no associated element.<br />
            - If prefix is "xml", the return value is always "http://www.w3.org/XML/1998/namespace".<br />
            - If prefix is "xmlns", the return value is always "http://www.w3.org/2000/xmlns/".<br />
            - If the prefix is null, the return value is the default namespace URI.<br />
            - If the prefix is not found, the return value is null.
            </para>
            </summary>
            <param name="prefix">The prefix to look for.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Normalize(System.Threading.CancellationToken)">
            <summary>
            Puts the specified node and all of its sub-tree into a normalized form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>
            Is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReleasePointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.IHTMLElement.SetPointerCapture(System.Int64,System.Threading.CancellationToken)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HasPointerCapture(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Scroll(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ScrollTo(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Scrolls to a particular set of coordinates inside a given element.
            </summary>
            <param name="x">The pixel along the horizontal axis of the element that you want displayed in the upper left.</param>
            <param name="y">The pixel along the vertical axis of the element that you want displayed in the upper left.</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly. This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ScrollBy(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ScrollIntoView(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will be null.
            </summary>
            <param name="qualifiedName">The name of the attribute whose value you want to get.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAttributeNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>
            Returns the string value of the attribute with the specified namespace and name.
            If the named attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.
            </para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <remarks>
            Note: Earlier versions of the DOM specification had this method described as returning an empty string for non-existent attributes, but it was not typically implemented this way since null makes more sense.
            The DOM4 specification now says this method should return null for non-existent attributes.
            </remarks>
            <param name="namespace">The namespace in which to look for the specified attribute.</param>
            <param name="qualifiedName">The name of the attribute to look for.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetAttributeNames(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.</para>
            <para>Using <i>getAttributeNames()</i> along with <see cref="M:BrowserAPI.IHTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)"/>, is a memory-efficient and performant alternative to <see cref="P:BrowserAPI.IHTMLElement.Attributes"/>.</para>
            <para>
            The names returned by <i>getAttributeNames()</i> are qualified attribute names,
            meaning that attributes with a namespace prefix have their names returned with that namespace prefix (not the actual namespace), followed by a colon, followed by the attribute name (for example, xlink:href),
            while any attributes which have no namespace prefix have their names returned as-is (for example, href).
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAttribute(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.</para>
            <para>To get the current value of an attribute, use <see cref="M:BrowserAPI.IHTMLElement.GetAttribute(System.String,System.Threading.CancellationToken)"/>; to remove an attribute, call <see cref="M:BrowserAPI.IHTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)"/>.</para>
            <para>Boolean attributes are considered to be true if they're present on the element at all. You should set value to the empty string ("") or the attribute's name, with no leading or trailing whitespace.</para>
            <para>
            Since the specified value gets converted into a string, specifying null doesn't necessarily do what you expect.
            Instead of removing the attribute or setting its value to be null, it instead sets the attribute's value to the string "null".
            If you wish to remove an attribute, call <see cref="M:BrowserAPI.IHTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)"/>.
            </para>
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute whose value is to be set.
            The attribute name is automatically converted to all lower-case when setAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="value">A string containing the value to assign to the attribute. Any non-string value specified is converted automatically into a string.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.SetAttributeNS(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Adds a new attribute or changes the value of an attribute with the given namespace and name.</para>
            <para>f you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElement.SetAttribute(System.String,System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">A string identifying the attribute by its qualified name; that is, a namespace prefix followed by a colon followed by a local name.</param>
            <param name="value">The desired string value of the new attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ToggleAttribute(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute to be toggled.
            The attribute name is automatically converted to all lower-case when toggleAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="force">
            A boolean value which has the following effects:<br />
            - if not specified at all, the toggleAttribute method "toggles" the attribute named name — removing it if it is present, or else adding it if it is not present<br />
            - if true, the toggleAttribute method adds an attribute named name<br />
            - if false, the toggleAttribute method removes the attribute named name
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the attribute with the specified name from the element.
            </summary>
            <param name="qualifiedName">A string specifying the name of the attribute to remove from the element. If the specified attribute does not exist, removeAttribute() returns without generating an error.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RemoveAttributeNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified attribute with the specified namespace from an element.</para>
            <para>If you are working with HTML and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElement.RemoveAttribute(System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <param name="namespace">A string that contains the namespace of the attribute.</param>
            <param name="qualifiedName">A string that names the attribute to be removed from the current node.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HasAttribute(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="qualifiedName">A string representing the name of the attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HasAttributeNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a boolean value indicating whether the current element has the specified attribute with the specified namespace.</para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElement.HasAttribute(System.String,System.Threading.CancellationToken)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">The name of the attribute.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.HasAttributes(System.Threading.CancellationToken)">
            <summary>
            Returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetElementsByClassName(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array which contains every descendant element which has the specified class name or names.</para>
            <para>The method getElementsByClassName() on the Document interface works essentially the same way, except it acts on the entire document, starting at the document root.</para>
            </summary>
            <param name="className">A string containing one or more class names to match on, separated by whitespace.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetElementsByTagName(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of elements with the given tag name. All descendants of the specified element are searched, but not the element itself.</para>
            <para>
            When called on an HTML element in an HTML document, getElementsByTagName lower-cases the argument before searching for it.
            This is undesirable when trying to match camel-cased SVG elements (such as &lt;linearGradient&gt;) in an HTML document.
            Instead, use <see cref="M:BrowserAPI.IHTMLElement.GetElementsByTagNameNS(System.String,System.String,System.Threading.CancellationToken)"/>, which preserves the capitalization of the tag name.
            </para>
            <para>Element.getElementsByTagName is similar to Document.getElementsByTagName(), except that it only searches for elements that are descendants of the specified element.</para>
            </summary>
            <param name="qualifiedName">The qualified name to look for. The special string "*" represents all elements. For compatibility with XHTML, lower-case should be used.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.GetElementsByTagNameNS(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an array of elements with the given tag name belonging to the given namespace.
            It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.
            </summary>
            <param name="namespace">
            The namespace URI of elements to look for (see Element.namespaceURI and Attr.namespaceURI).
            For example, if you need to look for XHTML elements, use the XHTML namespace URI, http://www.w3.org/1999/xhtml.
            </param>
            <param name="qualifiedName">Either the local name of elements to look for or the special value "*", which matches all elements (see Element.localName and Attr.localName).</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.QuerySelector(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.QuerySelectorAll(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an array representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector#escaping_attribute_values">Escaping attribute values</see> for an example.
            </para>
            <para>
            The selectors are applied to the entire document, not just the particular element on which querySelectorAll() is called.
            To restrict the selector to the element on which querySelectorAll() is called, include the :scope pseudo-class at the start of the selector.
            See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll#selector_scope">selector scope</see> example.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Closest(System.String,System.Threading.CancellationToken)">
            <summary>
            Traverses the element and its parents (heading toward the document root) until it finds a node that matches the specified CSS selector.
            </summary>
            <param name="selectors">A string of valid CSS selectors to match the Element and its ancestors against.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Before(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings in the children list of this Element's parent, just before this Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Before(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects in the children list of this Element's parent, just before this Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.After(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings in the children list of the Element's parent, just after the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.After(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects in the children list of the Element's parent, just after the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Prepend(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings before the first child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Prepend(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects before the first child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.AppendChild(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            <para>Adds a node to the end of the list of children of a specified parent node.</para>
            <para>Note: If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position.</para>
            <para>If the given child is a DocumentFragment, the entire contents of the DocumentFragment are moved into the child list of the specified parent node.</para>
            <para>appendChild() returns the newly appended node, or if the child is a DocumentFragment, the emptied fragment.</para>
            <para>Note: Unlike this method, the Element.append() method supports multiple arguments and appending strings. You can prefer using it if your node is an element.</para>
            </summary>
            <param name="node">The node to append to the given parent node</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Append(System.String[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of strings after the last child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Append(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Inserts a set of Node objects after the last child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.InsertAdjacentElement(System.String,BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Inserts a given element node at a given position relative to the element it is invoked upon.
            </summary>
            <param name="position">
            A string representing the position relative to the targetElement; must match (case-insensitively) one of the following strings:<br />
            - "beforebegin": Before the targetElement itself.<br />
            - "afterbegin": Just inside the targetElement, before its first child.<br />
            - "beforeend": Just inside the targetElement, after its last child.<br />
            - "afterend": After the targetElement itself.
            </param>
            <param name="htmlElement">The element to be inserted into the tree.</param>
            <param name="cancellationToken"></param>
            <returns>true if element was inserted, false if the insertion failed.</returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.InsertAdjacentHTML(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Parses the specified input as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position.
            </summary>
            <remarks>
            Warning: This method parses its input as HTML or XML, writing the result into the DOM.
            APIs like this are known as injection sinks, and are potentially a vector for cross-site-scripting (XSS) attacks, if the input originally came from an attacker.
            </remarks>
            <param name="position">
            A string representing the position relative to the element. Must be one of the following strings:<br />
            - "beforebegin": Before the element. Only valid if the element is in the DOM tree and has a parent element.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element. Only valid if the element is in the DOM tree and has a parent element.
            </param>
            <param name="html">A TrustedHTML instance or string defining the HTML or XML to be parsed.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.InsertAdjacentText(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Given a relative position and a string, inserts a new text node at the given position relative to the element it is called from.
            </summary>
            <param name="position">
            A string representing the position relative to the element the method is called from; must be one of the following strings:<br />
            - "beforebegin": Before the element itself.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element itself.
            </param>
            <param name="data">A string from which to create a new text node to insert at the given position where relative to the element the method is called from.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RemoveChild(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Removes a child node from the DOM.
            </summary>
            <remarks>
            Note: As long as a reference is kept on the removed child, it still exists in memory, but is no longer part of the DOM. It can still be reused later in the code.
            If the return value of removeChild() is not stored, and no other reference is kept, it will be automatically deleted from memory after a short time.
            </remarks>
            <param name="node">A Node that is the child node to be removed from the DOM.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Remove(System.Threading.CancellationToken)">
            <summary>
            Removes the element from its parent node.
            If it has no parent node, calling remove() does nothing.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReplaceChild(BrowserAPI.IHTMLElement,BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <remarks>
            Note: The parameter order, new before old, is unusual. <see cref="M:BrowserAPI.IHTMLElement.ReplaceWith(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)"/>, applying only to nodes that are elements, may be easier to read and use.
            </remarks>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChild">The child to be replaced.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReplaceChild(BrowserAPI.IHTMLElement,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChildIndex">The zero based index of the child to be replaced.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReplaceWith(System.String[],System.Threading.CancellationToken)">
            <summary>
            Replaces this Element in the children list of its parent with a set of strings. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to replace.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReplaceWith(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Replaces this Element in the children list of its parent with a set of Node objects.
            </summary>
            <param name="nodes">A set of Node objects to replace.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReplaceChildren(System.String[],System.Threading.CancellationToken)">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of strings to replace the Element's existing children with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.ReplaceChildren(BrowserAPI.IHTMLElement[],System.Threading.CancellationToken)">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of Node objects to replace the Element's existing children with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.CloneNode(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a duplicate of the node on which this method was called. Its parameter controls if the subtree contained in a node is also cloned or not.</para>
            <para>
            Cloning a node copies all of its attributes and their values, including intrinsic (inline) listeners.
            It does not copy event listeners added using addEventListener() or those assigned to element properties (e.g., node.onclick = someFunction).
            Additionally, for a &lt;canvas&gt; element, the painted image is not copied.
            </para>
            </summary>
            <remarks>
            Warning: cloneNode() may lead to duplicate element IDs in a document!
            If the original node has an id attribute, and the clone will be placed in the same document, then you should modify the clone's ID to be unique.
            Also, name attributes may need to be modified, depending on whether duplicate names are expected.</remarks>
            <param name="deep">
            <para>If true, then the node and its whole subtree, including text that may be in child Text nodes, is also copied.</para>
            <para>If false, only the node will be cloned. The subtree, including any text that the node contains, is not cloned.</para>
            <para>Note that deep has no effect on void elements, such as the &lt;img&gt; and &lt;input&gt; elements.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.IsSameNode(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Is a legacy alias the for the === strict equality operator. That is, it tests whether two nodes are the same (in other words, whether they reference the same object).
            </summary>
            <param name="other">The Node to test against.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.IsEqualNode(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Tests whether two nodes are equal.
            Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on.
            The specific set of data points that must match varies depending on the types of the nodes.
            </summary>
            <param name="other">The Node to compare equality with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.Contains(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            Returns a boolean value indicating whether a node is a descendant of a given node, that is the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.
            </summary>
            <remarks>Note: A node is contained inside itself.</remarks>
            <param name="other">The Node to test with.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.CompareDocumentPosition(BrowserAPI.IHTMLElement,System.Threading.CancellationToken)">
            <summary>
            <para>Reports the position of its argument node relative to the node on which it is called.</para>
            <para>
            It returns an integer value representing otherNode's position relative to node as a bitmask combining the following constant properties of Node:<br />
            - 1 (Node.DOCUMENT_POSITION_DISCONNECTED): Both nodes are in different documents or different trees in the same document.<br />
            - 2 (Node.DOCUMENT_POSITION_PRECEDING): otherNode precedes the node in either a pre-order depth-first traversal of a tree containing both (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 4 (Node.DOCUMENT_POSITION_FOLLOWING): otherNode follows the node in either a pre-order depth-first traversal of a tree containing both (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 8 (Node.DOCUMENT_POSITION_CONTAINS): otherNode is an ancestor of the node.<br />
            - 16 (Node.DOCUMENT_POSITION_CONTAINED_BY): otherNode is a descendant of the node.<br />
            - 32 (Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC): The result relies upon arbitrary and/or implementation-specific behavior and is not guaranteed to be portable.
            </para>
            <para>
            Zero or more bits can be set, depending on which scenarios apply.
            For example, if otherNode is located earlier in the document and contains the node on which compareDocumentPosition() was called,
            then both the DOCUMENT_POSITION_CONTAINS and DOCUMENT_POSITION_PRECEDING bits would be set, producing a value of 10 (0x0A).
            </para>
            </summary>
            <param name="other">The Node for which position should be reported, relative to the node.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RequestFullscreen(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Issues an asynchronous request to make the element be displayed in fullscreen mode.</para>
            <para>
            It's not guaranteed that the element will be put into full screen mode.
            If permission to enter full screen mode is granted, the returned Promise will resolve and the element will receive a fullscreenchange event to let it know that it's now in full screen mode.
            If permission is denied, the promise is rejected and the element receives a fullscreenerror event instead.
            If the element has been detached from the original document, then the document receives these events instead.
            </para>
            </summary>
            <param name="navigationUI">
            Controls whether or not to show navigation UI while the element is in fullscreen mode.
            The default value is "auto", which indicates that the browser should decide what to do.<br />
            - "hide": The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.<br />
            - "show": The browser will present page navigation controls and possibly other user interface;
                      the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface..<br />
            - "auto": The browser will choose which of the above settings to apply. This is the default value.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElement.RequestPointerLock(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Lets you asynchronously ask for the pointer to be locked on the given element.
            To track the success or failure of the request, it is necessary to listen for the pointerlockchange and pointerlockerror events at the Document level.
            </summary>
            <param name="unadjustedMovement">Disables OS-level adjustment for mouse acceleration, and accesses raw mouse input instead. The default value is false; setting it to true will disable mouse acceleration.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnChange">
            <summary>
            <para>
            Is fired for &lt;input&gt;, &lt;select&gt;, and &lt;textarea&gt; elements when the user modifies the element's value.
            Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.
            </para>
            <para>
            Depending on the kind of element being changed and the way the user interacts with the element, the change event fires at a different moment:<br />
            - When a &lt;input type="checkbox"&gt; element is checked or unchecked (by clicking or using the keyboard);<br />
            - When a &lt;input type="radio"&gt; element is checked (but not when unchecked);<br />
            - When the user commits the change explicitly (e.g., by selecting a value from a &lt;select&gt;'s dropdown with a mouse click, by selecting a date from a date picker for &lt;input type="date"&gt;, by selecting a file in the file picker for &lt;input type="file"&gt;, etc.);<br />
            - When the element loses focus after its value was changed: for elements where the user's interaction is typing rather than selection, such as a &lt;textarea&gt; or the text, search, url, tel, email, or password types of the &lt;input&gt; element.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnLoad">
            <summary>
            <para>
            Fires for elements containing a resource when the resource has successfully loaded.
            Currently, the list of supported HTML elements are: &lt;body&gt;, &lt;embed&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;link&gt;, &lt;object&gt;, &lt;script&gt;, &lt;style&gt;, and &lt;track&gt;.
            </para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
            <remarks>
            Note: The load event on HTMLBodyElement is actually an alias for the window.onload event.
            Therefore, the load event will only fire on the &lt;body&gt; element once all of the document's resources have loaded or errored.
            However, for the sake of clarity, it is recommended that the event handler is attached to the window object directly rather than on HTMLBodyElement.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnError">
            <summary>
            <para>Is fired on an element when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.</para>
            <para>This event is not cancelable and does not bubble.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnToggle">
            <summary>
            <para>
            Fires on a popover element, &lt;dialog&gt; element, or &lt;details&gt; element just after it is shown or hidden.<br />
            - If the element is transitioning from hidden to showing, the event.oldState property will be set to closed and the event.newState property will be set to open.<br />
            - If the element is transitioning from showing to hidden, then event.oldState will be open and event.newState will be closed.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>oldState</i>: either "open" or "closed", representing the state the element is transitioning to.<br />
            - string <i>newState</i>: either "open" or "closed", representing the state the element is transitioning from.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnBeforeToggle">
            <summary>
            <para>
            Fires on a popover or &lt;dialog&gt; element just before it is shown or hidden.<br />
            - If the element is transitioning from hidden to showing, the event.oldState property will be set to closed and the event.newState property will be set to open.<br />
            - If the element is transitioning from showing to hidden, then event.oldState will be open and event.newState will be closed.
            </para>
            <para>This event is cancelable when an element is toggled to open ("show") but not when the element is closing.</para>
            <para>
            Among other things, this event can be used to:<br />
            - prevent an element from being shown.<br />
            - add or remove classes or properties from the element or associated elements, for example to control the animation behavior of a dialog as it is opened and closed.<br />
            - clear the state of the element before it is opened or after it is hidden, for example to reset a dialog form and return value to an empty state, or hide any nested manual popovers when reopening a popup.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>oldState</i>: either "open" or "closed", representing the state the element is transitioning to.<br />
            - string <i>newState</i>: either "open" or "closed", representing the state the element is transitioning from.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitionStart">
            <summary>
            <para>Is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitionEnd">
            <summary>
            <para>
            Is fired when a CSS transition has completed.
            In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
            </para>
            <para>
            The <i>transitionend</i> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state.
            If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired.
            If the transitioncancel event is fired, the transitionend event will not fire.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitionRun">
            <summary>
            <para>Is fired when a CSS transition is first created, i.e. before any transition-delay has begun.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnTransitionCancel">
            <summary>
            <para>Is fired when a CSS transition is canceled.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationStart">
            <summary>
            <para>
            Is fired when a CSS Animation has started.
            If there is an animation-delay, this event will fire once the delay period has expired.
            A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationEnd">
            <summary>
            <para>
            Is fired when a CSS Animation has completed.
            If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationIteration">
            <summary>
            <para>
            Is fired when an iteration of a CSS Animation ends, and another one begins.
            This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElement.OnAnimationCancel">
            <summary>
            <para>
            Is fired when a CSS Animation unexpectedly aborts.
            In other words, any time it stops running without sending an animationend event.
            This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS.
            Therefore, either directly or because any of its containing nodes are hidden.
            </para>
            <para>An event handler for this event can be added by setting the onanimationcancel property, or using addEventListener().</para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IHTMLElementInProcess">
            <summary>
            The <i>HTMLElement</i> interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RequestFullscreen(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Issues an asynchronous request to make the element be displayed in fullscreen mode.</para>
            <para>
            It's not guaranteed that the element will be put into full screen mode.
            If permission to enter full screen mode is granted, the returned Promise will resolve and the element will receive a fullscreenchange event to let it know that it's now in full screen mode.
            If permission is denied, the promise is rejected and the element receives a fullscreenerror event instead.
            If the element has been detached from the original document, then the document receives these events instead.
            </para>
            </summary>
            <param name="navigationUI">
            Controls whether or not to show navigation UI while the element is in fullscreen mode.
            The default value is "auto", which indicates that the browser should decide what to do.<br />
            - "hide": The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.<br />
            - "show": The browser will present page navigation controls and possibly other user interface;
                      the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface..<br />
            - "auto": The browser will choose which of the above settings to apply. This is the default value.
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RequestPointerLock(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Lets you asynchronously ask for the pointer to be locked on the given element.
            To track the success or failure of the request, it is necessary to listen for the pointerlockchange and pointerlockerror events at the Document level.
            </summary>
            <param name="unadjustedMovement">Disables OS-level adjustment for mouse acceleration, and accesses raw mouse input instead. The default value is false; setting it to true will disable mouse acceleration.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnChange">
            <summary>
            <para>
            Is fired for &lt;input&gt;, &lt;select&gt;, and &lt;textarea&gt; elements when the user modifies the element's value.
            Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.
            </para>
            <para>
            Depending on the kind of element being changed and the way the user interacts with the element, the change event fires at a different moment:<br />
            - When a &lt;input type="checkbox"&gt; element is checked or unchecked (by clicking or using the keyboard);<br />
            - When a &lt;input type="radio"&gt; element is checked (but not when unchecked);<br />
            - When the user commits the change explicitly (e.g., by selecting a value from a &lt;select&gt;'s dropdown with a mouse click, by selecting a date from a date picker for &lt;input type="date"&gt;, by selecting a file in the file picker for &lt;input type="file"&gt;, etc.);<br />
            - When the element loses focus after its value was changed: for elements where the user's interaction is typing rather than selection, such as a &lt;textarea&gt; or the text, search, url, tel, email, or password types of the &lt;input&gt; element.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnLoad">
            <summary>
            <para>
            Fires for elements containing a resource when the resource has successfully loaded.
            Currently, the list of supported HTML elements are: &lt;body&gt;, &lt;embed&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;link&gt;, &lt;object&gt;, &lt;script&gt;, &lt;style&gt;, and &lt;track&gt;.
            </para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
            <remarks>
            Note: The load event on HTMLBodyElement is actually an alias for the window.onload event.
            Therefore, the load event will only fire on the &lt;body&gt; element once all of the document's resources have loaded or errored.
            However, for the sake of clarity, it is recommended that the event handler is attached to the window object directly rather than on HTMLBodyElement.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnError">
            <summary>
            <para>Is fired on an element when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.</para>
            <para>This event is not cancelable and does not bubble.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnToggle">
            <summary>
            <para>
            Fires on a popover element, &lt;dialog&gt; element, or &lt;details&gt; element just after it is shown or hidden.<br />
            - If the element is transitioning from hidden to showing, the event.oldState property will be set to closed and the event.newState property will be set to open.<br />
            - If the element is transitioning from showing to hidden, then event.oldState will be open and event.newState will be closed.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>oldState</i>: either "open" or "closed", representing the state the element is transitioning to.<br />
            - string <i>newState</i>: either "open" or "closed", representing the state the element is transitioning from.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnBeforeToggle">
            <summary>
            <para>
            Fires on a popover or &lt;dialog&gt; element just before it is shown or hidden.<br />
            - If the element is transitioning from hidden to showing, the event.oldState property will be set to closed and the event.newState property will be set to open.<br />
            - If the element is transitioning from showing to hidden, then event.oldState will be open and event.newState will be closed.
            </para>
            <para>This event is cancelable when an element is toggled to open ("show") but not when the element is closing.</para>
            <para>
            Among other things, this event can be used to:<br />
            - prevent an element from being shown.<br />
            - add or remove classes or properties from the element or associated elements, for example to control the animation behavior of a dialog as it is opened and closed.<br />
            - clear the state of the element before it is opened or after it is hidden, for example to reset a dialog form and return value to an empty state, or hide any nested manual popovers when reopening a popup.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>oldState</i>: either "open" or "closed", representing the state the element is transitioning to.<br />
            - string <i>newState</i>: either "open" or "closed", representing the state the element is transitioning from.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitionStart">
            <summary>
            <para>Is fired when a CSS transition has actually started, i.e., after any transition-delay has ended.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitionEnd">
            <summary>
            <para>
            Is fired when a CSS transition has completed.
            In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to none, then the event will not be generated.
            </para>
            <para>
            The <i>transitionend</i> event is fired in both directions - as it finishes transitioning to the transitioned state, and when it fully reverts to the default or non-transitioned state.
            If there is no transition delay or duration, if both are 0s or neither is declared, there is no transition, and none of the transition events are fired.
            If the transitioncancel event is fired, the transitionend event will not fire.
            </para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitionRun">
            <summary>
            <para>Is fired when a CSS transition is first created, i.e. before any transition-delay has begun.</para>
            <para>This event is not cancelable.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnTransitionCancel">
            <summary>
            <para>Is fired when a CSS transition is canceled.</para>
            <para>
            <b>Parameters</b><br />
            - string <i>propertyName</i>: A string containing the name CSS property associated with the transition.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the transition has been running, in seconds, when this event fired. This value is not affected by the transition-delay property.<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationStart">
            <summary>
            <para>
            Is fired when a CSS Animation has started.
            If there is an animation-delay, this event will fire once the delay period has expired.
            A negative delay will cause the event to fire with an elapsedTime equal to the absolute value of the delay (and, correspondingly, the animation will begin playing at that time index into the sequence).
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationEnd">
            <summary>
            <para>
            Is fired when a CSS Animation has completed.
            If the animation aborts before reaching completion, such as if the element is removed from the DOM or the animation is removed from the element, the animationend event is not fired.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationIteration">
            <summary>
            <para>
            Is fired when an iteration of a CSS Animation ends, and another one begins.
            This event does not occur at the same time as the animationend event, and therefore does not occur for animations with an animation-iteration-count of one.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnAnimationCancel">
            <summary>
            <para>
            Is fired when a CSS Animation unexpectedly aborts.
            In other words, any time it stops running without sending an animationend event.
            This might happen when the animation-name is changed such that the animation is removed, or when the animating node is hidden using CSS.
            Therefore, either directly or because any of its containing nodes are hidden.
            </para>
            <para>An event handler for this event can be added by setting the onanimationcancel property, or using addEventListener().</para>
            <para>
            <b>Parameters</b><br />
            - string <i>animationName</i>: A string containing the value of the animation-name that generated the animation.<br />
            - double <i>elapsedTime</i>: A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
            For an animationstart event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay).<br />
            - string <i>pseudoElement</i>: A string, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AccessKey">
            <summary>
            Sets the keystroke which a user can press to jump to a given element.
            </summary>
            <remarks>
            Note: The HTMLElement.accessKey property is seldom used because of its multiple conflicts with already present key bindings in browsers.
            To work around this, browsers implement accesskey behavior if the keys are pressed with other "qualifying" keys (such as Alt + accesskey).
            </remarks>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AccessKeyLabel">
            <summary>
            Returns a string containing the element's browser-assigned access key (if any); otherwise it returns an empty string.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AttributeStyleMap">
            <summary>
            <para>
            Returns a live StylePropertyMap object that contains a list of style properties of the element that are defined in the element's inline style attribute,
            or assigned using the style property of the HTMLElement interface via script.
            </para>
            <para>Shorthand properties are expanded. If you set "border-top: 1px solid black", the longhand properties ("border-top-color", "border-top-style", and "border-top-width") are set instead.</para>
            <para>
            The main difference between <see cref="P:BrowserAPI.IHTMLElementInProcess.Style">style</see> property and <i>attributeStyleMap</i> is that, the <see cref="P:BrowserAPI.IHTMLElementInProcess.Style">style</see> property gets/sets all styles as a string,
            while <i>attributeStyleMap</i> handles styles in a Dictionary&lt;string, string&gt;.
            </para>
            <para>Though this property itself is not writable, you can write and remove inline styles through <see cref="M:BrowserAPI.IHTMLElementInProcess.SetAttributeStyleMap(System.String,System.String)"/> and <see cref="M:BrowserAPI.IHTMLElementInProcess.RemoveAttributeStyleMap(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.SetAttributeStyleMap(System.String,System.String)">
            <summary>
            <para>Sets the given css property name to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a css property, use <see cref="M:BrowserAPI.IHTMLElementInProcess.RemoveAttributeStyleMap(System.String)"/>.
            </para>
            </summary>
            <param name="name">name of the css property</param>
            <param name="value">value for the given css property</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RemoveAttributeStyleMap(System.String)">
            <summary>
            Removes the given css property.
            </summary>
            <param name="name">css property name</param>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Autocapitalize">
            <summary>
            <para>
            Represents the element's capitalization behavior for user input. It is available on all HTML elements, though it doesn't affect all of them, including:<br />
            - &lt;input&lt; and &lt;textarea&lt; elements.<br />
            - Any element with <i>contenteditable</i> set on it.
            </para>
            <para>
            The value is a string that represents the element's capitalization behavior for user input. Valid values are as follows:<br />
            - "none" or "off": No autocapitalization should be applied, that is, all letters should default to lowercase.<br />
            - "sentences" or "on": The first letter of each sentence should default to a capital letter; all other letters should default to lowercase.<br />
            - "words": The first letter of each word should default to a capital letter; all other letters should default to lowercase.<br />
            - "characters": All letters should default to uppercase.
            </para>
            <para>
            <i>autocapitalize</i> doesn't affect behavior when typing on a physical keyboard.
            It affects the behavior of other input mechanisms such as virtual keyboards on mobile devices and voice input.
            This can assist users by making data entry quicker and easier, for example by automatically capitalizing the first letter of each sentence.
            </para>
            <para>It reflects the value of the autocapitalize HTML global attribute.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Autofocus">
            <summary>
            <para>
            Represents a boolean value reflecting the autofocus HTML global attribute, which indicates whether the control should be focused when the page loads,
            or when dialog or popover become shown if specified in an element inside &lt;dialog&gt; elements or elements whose popover attribute is set.
            </para>
            <para>
            Only one form-associated element inside a document, or a &lt;dialog&gt; element, or an element whose popover attribute is set, can have this attribute specified.
            If there are several, the first element with the attribute set inserted, usually the first such element on the page, gets the initial focus.
            </para>
            </summary>
            <remarks>
            Note: Setting this property doesn't set the focus to the associated element:
            it merely tells the browser to focus to it when the element is inserted in the document.
            Setting it after the insertion, that is most of the time after the document load, has no visible effect.
            </remarks>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ContentEditable">
            <summary>
            <para>
            Specifies whether or not the element is editable. This enumerated attribute can have the following values:<br />
            - "true" indicates that the element is contenteditable.<br />
            - "false" indicates that the element cannot be edited.<br />
            - "plaintext-only" indicates that the element's raw text is editable, but rich text formatting is disabled.
            </para>
            <para>You can use the <see cref="P:BrowserAPI.IHTMLElementInProcess.IsContentEditable"/> property to test the computed boolean value of this property.</para>
            <para>If the attribute is missing or its value is invalid, its value is inherited from its parent element: so the element is editable (or not) based on the parent element.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Dataset">
            <summary>
            <para>Provides read/write access to custom data attributes (data-*) on elements. It exposes a map of strings (DOMStringMap) with an entry for each data-* attribute.</para>
            <para>
            The property name of a custom data attribute is the same as the HTML attribute without the data- prefix.
            Single dashes (-) are removed, and the next ASCII character after a removed dash is capitalized to form the property's camel-cased name.
            </para>
            <para>For writing or removing elements use <see cref="M:BrowserAPI.IHTMLElementInProcess.SetDataset(System.String,System.String)"/> or <see cref="M:BrowserAPI.IHTMLElementInProcess.RemoveDataset(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.SetDataset(System.String,System.String)">
            <summary>
            <para>Sets the given data-attribute to the given value.</para>
            <para>
            If the name does not exist, it will be added.<br />
            If the name does already exist, the value will be updated.<br />
            To remove a data-attribute, use <see cref="M:BrowserAPI.IHTMLElementInProcess.RemoveDataset(System.String)"/>.
            </para>
            </summary>
            <param name="name">name of the data-attribute without data- prefix</param>
            <param name="value">value for the given data-attribute</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RemoveDataset(System.String)">
            <summary>
            Removes the given data-attribute.
            </summary>
            <param name="name">data-attribute name</param>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Dir">
            <summary>
            <para>
            Indicates the text writing directionality of the content of the current element. Possible values are<br />
            - "ltr": Left-to-right writing direction.<br />
            - "rtl": Right-to-left writing direction.<br />
            - "auto": The direction of the element must be determined based on the contents of the element.<br />
            - "": The default value; the directionality is inherited from the parent element.
            </para>
            <para>
            Note that if the dir attribute is unspecified, the element itself may still inherit directionality from its parent.
            However, that inherited directionality is not reflected by this property's value.
            </para>
            <para>
            The text writing directionality of an element is which direction that text goes (for support of different language systems).
            Arabic languages and Hebrew are typical languages using the RTL directionality.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Draggable">
            <summary>
            A boolean value indicating if the element can be dragged. It reflects the value of the draggable HTML global attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.EnterKeyHint">
            <summary>
            <para>
            An enumerated property defining what action label (or icon) to present for the enter key on virtual keyboards.
            It reflects the enterkeyhint HTML global attribute and is an enumerated property, only accepting the following values as a string:<br />
            - "enter": Typically indicating inserting a new line.<br />
            - "done": Typically meaning there is nothing more to input and the input method editor (IME) will be closed.<br />
            - "go": Typically meaning to take the user to the target of the text they typed.<br />
            - "next": Typically taking the user to the next field that will accept text.<br />
            - "previous": Typically taking the user to the previous field that will accept text.<br />
            - "search": Typically taking the user to the results of searching for the text they have typed.<br />
            - "send": Typically delivering the text to its target.
            </para>
            <para>If no <i>enterKeyHint</i> value has been specified or if it was set to a different value than the allowed ones, it will return an empty string.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Hidden">
            <summary>
            Reflects the value of the element's hidden attribute.<br />
            true - The element is hidden.<br />
            false - The element is not hidden. This is the default value for the attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Inert">
            <summary>
            <para>
            Reflects the value of the element's inert attribute.
            It is a boolean value that, when present, makes the browser "ignore" user input events for the element, including focus events and events from assistive technologies.
            The browser may also ignore page search and text selection in the element.
            This can be useful when building UIs such as modals where you would want to "trap" the focus inside the modal when it's visible.
            </para>
            <para>
            Note that if the inert attribute is unspecified, the element itself may still inherit inertness from its parent.
            However, that inherited inertness is not reflected by this property's value.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.InnerText">
            <summary>
            <para>Represents the rendered text content of a node and its descendants.</para>
            <para>
            As a getter, it approximates the text the user would get if they highlighted the contents of the element with the cursor and then copied it to the clipboard.
            As a setter this will replace the element's children with the given value, converting any line breaks into &lt;br&gt; elements.
            </para>
            <para>
            Note: innerText is easily confused with Node.textContent, but there are important differences between the two.
            Basically, innerText is aware of the rendered appearance of text, while textContent is not.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.InputMode">
            <summary>
            <para>
            Reflects the value of the element's inputmode attribute.<br />
            It provides a hint about the type of data that might be entered by the user while editing the element or its contents. This allows the browser to display an appropriate virtual keyboard.<br />
            It is used primarily on &lt;input&gt; elements, but is usable on any element in <see cref="P:BrowserAPI.IHTMLElementInProcess.ContentEditable">contenteditable</see> mode.
            </para>
            <para>
            This attribute may have one of the following values:<br />
            - "decimal": Fractional numeric input keyboard that contains the digits and decimal separator for the user's locale (typically . or ,).<br />
            - "email": A virtual keyboard optimized for entering email addresses. Typically includes the @character as well as other optimizations.<br />
            - "none": No virtual keyboard. This is used when the page implements its own keyboard input control.<br />
            - "numeric": Numeric input keyboard that only requires the digits 0–9. Devices may or may not show a minus key.<br />
            - "search": A virtual keyboard optimized for search input. For instance, the return/submit key may be labeled "Search".<br />
            - "tel": A telephone keypad input that includes the digits 0–9, the asterisk (*), and the pound (#) key.<br />
            - "text": Standard input keyboard for the user's current locale.<br />
            - "url": A keypad optimized for entering URLs. This may have the / key more prominent, for example.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.IsContentEditable">
            <summary>
            It is true if the contents of the element are editable; otherwise it returns false.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Lang">
            <summary>
            <para>
            Indicates the base language of an element's attribute values and text content, in the form of a RFC 5646: BCP 47 language identifier tag.
            It reflects the element's lang attribute; the xml:lang attribute does not affect this property.
            </para>
            <para>
            Note that if the lang attribute is unspecified, the element itself may still inherit the language from its parent.
            However, that inherited language is not reflected by this property's value.
            </para>
            <para>Common examples include "en" for English, "ja" for Japanese, "es" for Spanish and so on. If unspecified, the value is an empty string.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Nonce">
            <summary>
            <para>Returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.</para>
            <para>In later implementations, elements only expose their nonce attribute to scripts (and not to side-channels like CSS attribute selectors).</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetWidth">
            <summary>
            <para>Returns the layout width of an element as an integer.</para>
            <para>
            Typically, offsetWidth is a measurement in pixels of the element's CSS width, including any borders, padding, and vertical scrollbars (if rendered).
            It does not include the width of pseudo-elements such as ::before or ::after.
            </para>
            <para>If the element is hidden (for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetHeight">
            <summary>
            <para>Returns the height of an element, including vertical padding and borders, as an integer.</para>
            <para>
            Typically, offsetHeight is a measurement in pixels of the element's CSS height, including any borders, padding, and horizontal scrollbars (if rendered).
            It does not include the height of pseudo-elements such as ::before or ::after. For the document body object, the measurement includes total linear content height instead of the element's CSS height.Floated elements extending below other linear content are ignored.
            </para>
            <para>If the element is hidden(for example, by setting style.display on the element or one of its ancestors to "none"), then 0 is returned.</para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetLeft">
            <summary>
            <para>Returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.</para>
            <para>For block-level elements, offsetTop, offsetLeft, offsetWidth, and offsetHeight describe the border box of an element relative to the offsetParent.</para>
            <para>
            However, for inline-level elements (such as span) that can wrap from one line to the next, offsetTop and offsetLeft describe the positions of the first border box
            (use Element.getClientRects() to get its width and height), while offsetWidth and offsetHeight describe the dimensions of the bounding border box(use Element.getBoundingClientRect() to get its position).
            Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetTop">
            <summary>
            Returns the distance from the outer border of the current element (including its margin) to the top padding edge of the offsetParent,
            the closest positioned ancestor element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OffsetParent">
            <summary>
            <para>Returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.</para>
            <para>
            A positioned ancestor is either:<br />
            - an element with a non-static position, or<br />
            - td, th, table in case the element itself is static positioned.<br />
            If there is no positioned ancestor element, the body is returned.
            </para>
            <para>
            Note: <i>offsetParent</i> returns null in the following situations:<br />
            - The element or any ancestor has the display property set to none.<br />
            - The element has the position property set to fixed (Firefox returns &lt;body&gt;).<br />
            - The element is &lt;body&gt; or &lt;html&gt;.
            </para>
            <para><i>offsetParent</i> is useful because offsetTop and offsetLeft are relative to its padding edge.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OuterText">
            <summary>
            <para>
            Returns the same value as HTMLElement.innerText.
            When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).
            </para>
            <para>See <see cref="P:BrowserAPI.IHTMLElementInProcess.InnerText">HTMLElement.innerText</see> for more information and examples showing how both properties are used as getters.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Popover">
            <summary>
            <para>Gets/Sets an element's popover state via JavaScript ("auto", "hint", or "manual"), and can be used for feature detection. It reflects the value of the popover global HTML attribute.</para>
            <para>
            Possible values are:<br />
            - "auto": auto popovers can be "light dismissed" — this means that you can hide the popover by clicking outside it or pressing the Esc key.
            Usually, only one auto popover can be shown at a time — showing a second popover when one is already shown will hide the first one.
            The exception to this rule is when you have nested auto popovers.
            See Nested popovers for more details.<br />
            - "hint": hint popovers do not close auto popovers when they are displayed, but will close other hint popovers.
            They can be light dismissed and will respond to close requests.
            Usually they are shown and hidden in response to non-click JavaScript events such as mouseover/mouseout and focus/blur.
            Clicking a button to open a hint popover would cause an open auto popover to light-dismiss.<br />
            - "manual": manual popovers cannot be "light dismissed" and are not automatically closed.
            Popovers must explicitly be displayed and closed using declarative show/hide/toggle buttons or JavaScript.
            Multiple independent manual popovers can be shown simultaneously.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Spellcheck">
            <summary>
            Represents a boolean value that controls the spell-checking hint. It is available on all HTML elements, though it doesn't affect all of them.
            It reflects the value of the spellcheck HTML global attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Style">
            <summary>
            <para>JS-property: style.cssText</para>
            <para>Returns or sets the text of the element's inline style declaration only.</para>
            <para>To be able to set a stylesheet rule dynamically, see <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">Using dynamic styling information</see>.</para>
            <para>Not to be confused with stylesheet style-rule <see href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule/cssText">CSSRule.cssText</see>.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.TabIndex">
            <summary>
            <para>
            Represents the tab order of the current element. Tab order is as follows:<br />
            1. Elements with a positive tabIndex. Elements that have identical tabIndex values should be navigated in the order they appear. Navigation proceeds from the lowest tabIndex to the highest tabIndex.<br />
            2. Elements that do not support the tabIndex attribute or support it and assign tabIndex to 0, in the order they appear.<br />
            Elements that are disabled do not participate in the tabbing order.
            </para>
            <para>Values don't need to be sequential, nor must they begin with any particular value. They may even be negative, though each browser trims very large values.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Title">
            <summary>
            Represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Translate">
            <summary>
            Indicates whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.
            It reflects the value of the translate HTML global attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.HasFocus">
            <summary>
            <para>htmlElement === document.activeElement;</para>
            <para>If true, the htmlElement has focus, otherwise false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Click">
            <summary>
            <para>Simulates a mouse click on an element.</para>
            <para>
            When click() is used with supported elements(such as an &lt;input&gt;), it fires the element's click event.
            This event then bubbles up to elements higher in the document tree (or event chain) and fires their click events.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Focus(System.Boolean)">
            <summary>
            <para>Sets focus on the specified element, if it can be focused. The focused element is the element that will receive keyboard and similar events by default.</para>
            <para>
            By default the browser will scroll the element into view after focusing it, and it may also provide visible indication of the focused element(typically by displaying a "focus ring" around the element).
            Parameter options are provided to disable the default scrolling and force visible indication on elements.
            </para>
            </summary>
            <param name="preventScroll">
            A boolean value indicating whether or not the browser should scroll the document to bring the newly-focused element into view.
            A value of false for preventScroll (the default) means that the browser will scroll the element into view after focusing it.
            If preventScroll is set to true, no scrolling will occur.
            </param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Blur">
            <summary>
            Removes keyboard focus from the current element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ShowPopover">
            <summary>
            <para>Shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.</para>
            <para>
            When <i>showPopover()</i> is called on an element with the popover attribute that is currently hidden, a beforetoggle event will be fired, followed by the popover showing, and then the toggle event firing.
            If the element is already showing, an error will be thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HidePopover">
            <summary>
            <para>Hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.</para>
            <para>
            When <i>hidePopover()</i> is called on a showing element with the popover attribute, a beforetoggle event will be fired, followed by the popover being hidden, and then the toggle event firing.
            If the element is already hidden, an error is thrown.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.TogglePopover">
            <summary>
            <para>Toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.</para>
            <para>
            When <i>togglePopover()</i> is called on an element with the popover attribute:<br />
            1. A beforetoggle event is fired.<br />
            2. The popover toggles between hidden and showing:<br />
            - i. If it was initially showing, it toggles to hidden.<br />
            - ii. If it was initially hidden, it toggles to showing.<br />
            3. A toggle event is fired.
            </para>
            </summary>
            <returns>
            <para>true if the popup is open after the call, and false otherwise.</para>
            <para>None(undefined) may be returned in older browser versions(see browser compatibility).</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.TogglePopover(System.Boolean)">
            <inheritdoc cref="M:BrowserAPI.IHTMLElementInProcess.TogglePopover" />
            <param name="force">
            <para>A boolean, which causes togglePopover() to behave like showPopover() or hidePopover(), except that it doesn't throw an exception if the popover is already in the target state.</para>
            <para>- If set to true, the popover is shown if it was initially hidden.If it was initially shown, nothing happens.</para>
            <para>- If set to false, the popover is hidden if it was initially shown. If it was initially hidden, nothing happens.</para>
            </param>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnCommand">
            <summary>
            <para>
            Fires on an element that is controlled via a button with valid commandForElement and command values, whenever the button is interacted with (e.g., it is clicked).
            </para>
            <para>
            <b>Parameters</b><br />
            - IHTMLElementInProcess <i>source</i>: An HTMLButtonElement representing the button that caused this invocation.<br />
            - string <i>command</i>: Representing the command value of the source button.
            </para>
            </summary>
            <remarks>
            Note: Dispose the given IHTMLElementInProcess object when you are done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnDrag">
            <summary>
            <para>
            Is fired every few hundred milliseconds as an element or text selection is being dragged by the user.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnDragStart">
            <summary>
            <para>
            Is fired when the user starts dragging an element or text selection.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnDragEnd">
            <summary>
            <para>
            Is fired when a drag operation ends (by releasing a mouse button or hitting the escape key).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnDragEnter">
            <summary>
            <para>
            Is fired when a dragged element or text selection enters a valid drop target.
            The target object is the immediate user selection (the element directly indicated by the user as the drop target), or the &lt;body&gt; element.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnDragLeave">
            <summary>
            <para>
            Is fired when a dragged element or text selection leaves a valid drop target.<br />
            This event is not cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnDragOver">
            <summary>
            <para>
            Is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="E:BrowserAPI.IHTMLElementInProcess.OnDrop">
            <summary>
            <para>
            Is fired when an element or text selection is dropped on a valid drop target.
            To ensure that the drop event always fires as expected, you should always include a preventDefault() call in the part of your code which handles the dragover event.<br />
            This event is cancelable and may bubble up to the Document and Window objects.
            </para>
            <para>
            <b>Parameters</b><br />
            - string <i>dropEffect</i>: Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. The value must be "none", "copy", "link" or "move".<br />
            - string <i>effectAllowed</i>: Provides all of the types of operations that are possible. Must be one of "none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all" or "uninitialized".<br />
            - string[] <i>types</i>: Giving the formats that were set in the dragstart event.<br />
            - IFileInProcess[] <i>files</i>: Contains a list of all the local files available on the data transfer. If the drag operation doesn't involve dragging files, this property is an empty list.
            </para>
            </summary>
            <remarks>
            Note: Do not forget to call <i>Dispse()</i> on each single item in files when you done with it.
            </remarks>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Attributes">
            <summary>
            Returns a live collection of all attribute nodes registered to the specified node.
            It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers.
            To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClassList">
            <summary>
            <para>Returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.</para>
            <üara>Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via <i>element.className</i>.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClassName">
            <summary>
            Gets/Sets the value of the class attribute of the specified element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientWidth">
            <summary>
            <para>
            Is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
            It includes padding but excludes borders, margins, and vertical scrollbars (if present).
            </para>
            <para>
            When clientWidth is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's width (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientwidth">This is a special case of clientWidth</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientHeight">
            <summary>
            <para>
            Is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
            It includes padding but excludes borders, margins, and horizontal scrollbars (if present).
            </para>
            <para>clientHeight can be calculated as: CSS height + CSS padding - height of horizontal scrollbar(if present).</para>
            <para>
            When clientHeight is used on the root element(the &lt;html&gt; element), (or on &lt;body&gt; if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-clientheight">This is a special case of clientHeight</see>.
            </para>
            <para>Note: This property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientLeft">
            <summary>
            <para>
            The width of the left border of an element in pixels.
            It includes the width of the vertical scrollbar if the text direction of the element is right-to-left and if there is an overflow causing a left vertical scrollbar to be rendered.
            clientLeft does not include the left margin or the left padding. clientLeft is read-only.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            <para>Note: When an element has display: inline, clientLeft returns 0 regardless of the element's border.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ClientTop">
            <summary>
            <para>The width of the top border of an element in pixels. It is a read-only, integer property of element.</para>
            <para>
            As it happens, all that lies between the two locations (offsetTop and client area top) is the element's border.
            This is because the offsetTop indicates the location of the top of the border (not the margin) while the client area starts immediately below the border, (client area includes padding.)
            Therefore, the clientTop value will always equal the integer portion of the .getComputedStyle() value for "border-top-width". (Actually might be Math.round(parseFloat()).)
            For example, if the computed "border-top-width" is zero, then clientTop is also zero.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.CurrentCSSZoom">
            <summary>
            <para>Provides the "effective" CSS zoom of an element, taking into account the zoom applied to the element and all its parent elements.</para>
            <para>
            The value calculated by multiplying the CSS zoom values of the element and all of its parents.
            For example, if three elements with zoom values of 2, 1.5, and 3, are nested within each other, the most deeply nested element will have a currentCSSZoom value of 9.
            If the element doesn't have a CSS box, for example because display: none is set on the element or one of its parents, then the currentCSSZoom is set to 1.
            </para>
            <para>
            Note that some methods, such as Element.getBoundingClientRect(), return dimensions and position that are relative to the viewport, and hence include the effects of CSS zoom.
            Other properties and methods return values that are relative to the element itself, and do not include the effects of zooming.
            These include, for example, client* properties such as Element.clientHeight, scroll*() methods like Element.scroll(), and offset* properties such as HTMLElement.offsetHeight.
            The currentCSSZoom property can be used to scale these values to adjust for the effects of zooming.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Id">
            <summary>
            <para>Represents the element's identifier, reflecting the id global attribute.</para>
            <para>If the id value is not the empty string, it must be unique in a document.</para>
            <para>The id is often used with getElementById() to retrieve a particular element. Another common case is to use an element's ID as a selector when styling the document with CSS.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.IsConnected">
            <summary>
            A boolean indicating whether the node is connected (directly or indirectly) to a Document object.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.InnerHTML">
            <summary>
            <para>Gets/Sets the HTML or XML markup contained within the element.</para>
            <para>To insert the HTML into the document rather than replace the contents of an element, use the method insertAdjacentHTML().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.OuterHTML">
            <summary>
            <para>
            Gets the serialized HTML fragment describing the element including its descendants.
            It can also be set to replace the element with nodes parsed from the given string.
            </para>
            <para>To only obtain the HTML representation of the contents of an element, or to replace the contents of an element, use the innerHTML property instead.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Part">
            <summary>
            Represents the part identifier(s) of the element (i.e., set using the part attribute), returned as a DOMTokenList. These can be used to style parts of a shadow DOM, via the ::part pseudo-element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollWidth">
            <summary>
            <para>Is a measurement of the width of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The scrollWidth value is equal to the minimum width the element would require in order to fit all the content in the viewport without using a horizontal scrollbar.
            The width is measured in the same way as clientWidth: it includes the element's padding, but not its border, margin or vertical scrollbar (if present).
            It can also include the width of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for horizontal scrollbar, its scrollWidth is equal to clientWidth.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollHeight">
            <summary>
            <para>Is a measurement of the height of an element's content, including content not visible on the screen due to overflow.</para>
            <para>
            The user's viewport is an element with four regions labeled padding-top, border-top, border-bottom, padding-bottom.
            The scroll height goes from the container's padding top to the end of the padding bottom, well beyond the top and bottom of the viewport.
            </para>
            <para>
            The scrollHeight value is equal to the minimum height the element would require in order to fit all the content in the viewport without using a vertical scrollbar.
            The height is measured in the same way as clientHeight: it includes the element's padding, but not its border, margin or horizontal scrollbar (if present).
            It can also include the height of pseudo-elements such as ::before or ::after.
            If the element's content can fit without a need for vertical scrollbar, its scrollHeight is equal to clientHeight.
            </para>
            <para>Note: This property will round the value to an integer.If you need a fractional value, use Element.getBoundingClientRect().</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollLeft">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled from its left edge.</para>
            <para>
            If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position (at the start of the scrolled content),
            and then increasingly negative as you scroll towards the end of the content.
            </para>
            <para>
            It can be specified as any integer value.However:<br />
            - If the element can't be scrolled (e.g., it has no overflow), scrollLeft is set to 0.<br />
            - If specified as a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0.<br />
            - If specified as a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.
            </para>
            <para>Warning: On systems using display scaling, scrollLeft may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ScrollTop">
            <summary>
            <para>Gets/Sets the number of pixels that an element's content is scrolled vertically.</para>
            <para>
            An element's scrollTop value is a measurement of the distance from the element's top to its topmost visible content.
            When an element's content does not generate a vertical scrollbar, then its scrollTop value is 0.
            </para>
            <para>
            scrollTop can be set to any integer value, with certain caveats:<br />
            - If the element can't be scrolled (e.g. it has no overflow or if the element has a property of "non-scrollable"), scrollTop is 0.<br />
            - scrollTop doesn't respond to negative values; instead, it sets itself back to 0.<br />
            - If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.
            </para>
            <para>
            When scrollTop is used on the root element (the &lt;html&gt; element), the scrollY of the window is returned.
            <see href="https://www.w3.org/TR/2016/WD-cssom-view-1-20160317/#dom-element-scrolltop">This is a special case of scrollTop</see>.
            </para>
            <para>Warning: On systems using display scaling, scrollTop may give you a decimal value. (It will be rounded down to the next integer.)</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Slot">
            <summary>
            Returns the name of the shadow DOM slot the element is inserted in.<br />
            A slot is a placeholder inside a web component that users can fill with their own markup (see Using templates and slots for more information).
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.LocalName">
            <summary>
            The local part of the qualified name of an element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.NamespaceURI">
            <summary>
            The namespace URI of the element, or null if the element is not in a namespace.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Prefix">
            <summary>
            The namespace prefix of the specified element, or null if no prefix is specified.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.BaseURI">
            <summary>
            <para>The absolute base URL of the document containing the node.</para>
            <para>
            The base URL is used to resolve relative URLs when the browser needs to obtain an absolute URL,
            for example when processing the HTML &lt;img&gt; element's src attribute or the xlink:href Deprecated or href attributes in SVG.
            </para>
            <para>Although this property is read-only, its value is determined by an algorithm each time the property is accessed, and may change if the conditions changed.</para>
            <para>
            The base URL is determined as follows:<br />
            1. By default, the base URL is the location of the document (as determined by window.location).<br />
            2. If it is an HTML Document and there is a &lt;Base&gt; element in the document, the href value of the first Base element with such an attribute is used instead.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.TagName">
            <summary>
            <para>The tag name of the element on which it's called.</para>
            <para>
            For example, if the element is an &lt;img&gt;, its tagName property is IMG (for HTML documents; it may be cased differently for XML/XHTML documents).
            Note: You can use the localName property to access the Element's local name — which for the case in the example is img (lowercase).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.NodeName">
            <summary>
            <para>The name of the current node as a string.</para>
            <para>
            Values for the different types of nodes are:<br />
            - Attr: The value of Attr.name, that is the qualified name of the attribute<br />
            - CDATASection: The string "#cdata-section"<br />
            - Comment: The string "#comment"<br />
            - Document: The string "#document"<br />
            - DocumentFragment: The string "#document-fragment"<br />
            - DocumentType: The value of DocumentType.name<br />
            - Element: The value of Element.tagName, that is the uppercase name of the element tag if an HTML element, or the lowercase element tag if an XML element (like a SVG or MathML element)<br />
            - ProcessingInstruction: The value of ProcessingInstruction.target<br />
            - Text: The string "#text"
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.NodeType">
            <summary>
            <para>An integer that identifies what the node is. It distinguishes different kind of nodes from each other, such as elements, text and comments.</para>
            <para>
            Possible values are:<br />
            - 1: ELEMENT_NODE - An Element node like &lt;p&gt; or &lt;div&gt;.<br />
            - 2: ATTRIBUTE_NODE - An Attribute of an Element.<br />
            - 3: TEXT_NODE - The actual Text inside an Element or Attr.<br />
            - 4: CDATA_SECTION_NODE - A CDATASection, such as &lt;!CDATA[[ … ]]&gt;<br />
            - 7: PROCESSING_INSTRUCTION_NODE - A ProcessingInstruction of an XML document, such as &lt;?xml-stylesheet … ?&gt;.<br />
            - 8: COMMENT_NODE - A Comment node, such as &lt;!-- … --&gt;.<br />
            - 9: DOCUMENT_NODE - A Document node.<br />
            - 10: DOCUMENT_TYPE_NODE - A DocumentType node, such as &lt;!doctype html&gt;.<br />
            - 11: DOCUMENT_FRAGMENT_NODE - A DocumentFragment node.
            </para>
            <para>
            The following constants have been deprecated and are not in use anymore:<br />
            - 5: ENTITY_REFERENCE_NODE<br />
            - 6: ENTITY_NODE<br />
            - 12: NOTATION_NODE
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ChildElementCount">
            <summary>
            Returns the number of child elements of this element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Children">
            <summary>
            <para>Returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.</para>
            <üara>Element.children includes only element nodes.To get all child nodes, including non-element nodes like text and comment nodes, use Node.childNodes.</üara>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.FirstElementChild">
            <summary>
            <para>Returns an element's first child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.LastElementChild">
            <summary>
            <para>Returns an element's last child Element, or null if there are no child elements.</para>
            <para>It includes only element nodes.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.PreviousElementSibling">
            <summary>
            Returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.NextElementSibling">
            <summary>
            Returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.ParentElement">
            <summary>
            Returns the DOM node's parent Element, or null if the node either has no parent,or its parent isn't a DOM Element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaAtomic">
            <summary>
            <para>Reflects the value of the aria-atomic attribute, which indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.</para>
            <para>
            Value is one of the following values:<br />
            - "false": Assistive technologies will present only the changed node or nodes.<br />
            - "true": Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaAutoComplete">
            <summary>
            <para>Reflects the value of the aria-autocomplete attribute, which indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.</para>
            <para>
            Value is one of the following values:<br />
            - "inline": When a user is providing input, text suggesting one way to complete the provided input may be dynamically inserted after the caret.<br />
            - "list": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed.<br />
            - "both": When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.<br />
            - "none": When a user is providing input, there is no display of an automatic suggestion that attempts to predict how the user intends to complete the input.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaBrailleLabel">
            <summary>
            Reflects the value of the aria-braillelabel attribute, which defines the ARIA braille label of the element.
            This element label may be used by assistive technologies that can present content in braille, but should only be set if a braille-specific label would improve the user experience.
            The aria-braillelabel contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaBrailleRoleDescription">
            <summary>
            Reflects the value of the aria-brailleroledescription attribute, which defines the ARIA braille role description of the element.
            This property may be used to provide an abbreviated version of the aria-roledescription value.
            It should only be used if aria-roledescription is present and in the rare case where it is too verbose for braille.
            The aria-brailleroledescription contains additional information about when the property should be set.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaBusy">
            <summary>
            <para>Reflects the value of the aria-busy attribute, which indicates whether an element is being modified, as assistive technologies may want to wait until the modifications are complete before exposing them to the user.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is being updated.<br />
            - "false": There are no expected updates for the element.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaChecked">
            <summary>
            <para>Reflects the value of the aria-checked attribute, which indicates the current "checked" state of checkboxes, radio buttons, and other widgets that have a checked state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is checked.<br />
            - "mixed": Indicates a mixed mode value for a tri-state checkbox or menuitemcheckbox.<br />
            - "false": There are no expected updates for the element.<br />
            - "undefined": The element does not support being checked.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaColCount">
            <summary>
            <para>Reflects the value of the aria-colcount attribute, which defines the number of columns in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaColIndex">
            <summary>
            <para>Reflects the value of the aria-colindex attribute, which defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaColIndexText">
            <summary>
            Reflects the value of the aria-colindextext attribute, which defines a human readable text alternative of aria-colindex.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaColSpan">
            <summary>
            <para>Reflects the value of the aria-colspan attribute, which defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaCurrent">
            <summary>
            <para>Reflects the value of the aria-current attribute, which indicates the element that represents the current item within a container or set of related elements.</para>
            <para>
            Value is one of the following values:<br />
            - "page": Represents the current page within a set of pages.<br />
            - "step": Represents the current step within a process.<br />
            - "location": Represents the current location, for example the current page in a breadcrumbs hierarchy.<br />
            - "date": Represents the current date within a collection of dates.<br />
            - "time": Represents the current time within a set of times.<br />
            - "true": Represents the current item within a set.<br />
            - "false": Does not represent the current item within a set.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaDescription">
            <summary>
            Reflects the value of the aria-description attribute, which defines a string value that describes or annotates the current element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaDisabled">
            <summary>
            <para>Reflects the value of the aria-disabled attribute, which indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element and all focusable descendants are disabled, but perceivable, and their values cannot be changed by the user.<br />
            - "false": The element is enabled.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaExpanded">
            <summary>
            <para>Reflects the value of the aria-expanded attribute, which indicates whether a grouping element owned or controlled by this element is expanded or collapsed.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The grouping element this element owns or controls is expanded.<br />
            - "false": The grouping element this element owns or controls is collapsed.<br />
            - "undefined": The element does not own or control a grouping element that is expandable.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaHasPopup">
            <summary>
            <para>Reflects the value of the aria-haspopup attribute, which indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.</para>
            <para>
            Value is one of the following values:<br />
            - "false": The element does not have a popup.<br />
            - "true": The element has a popup that is a menu.<br />
            - "menu":The element has a popup that is a menu. <br />
            - "listbox": The element has a popup that is a listbox.<br />
            - "tree": The element has a popup that is a tree.<br />
            - "grid": The element has a popup that is a grid.<br />
            - "dialog": The element has a popup that is a dialog.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaHidden">
            <summary>
            <para>Reflects the value of the aria-hidden) attribute, which indicates whether the element is exposed to an accessibility API.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is hidden from the accessibility API.<br />
            - "false": The element is exposed to the accessibility API as if it were rendered.<br />
            - "undefined": The element's hidden state is determined by the user agent based on whether it is rendered.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaInvalid">
            <summary>
            <para>
            Reflects the value of the aria-invalid attribute.
            Relevant for the application, checkbox, combobox, gridcell, listbox, radiogroup, slider, spinbutton, textbox, and tree roles,
            it indicates to the accessibility API whether the entered value does not conform to the format expected by the application.
            </para>
            <para>
            If the attribute is not present, or is set to the empty string, assistive technology will treat the value as if it were set to false.
            If the attribute is present but set to a value other than false, grammar, spelling or the empty string (""), assistive technology treats the value as true.
            The property reflects the attribute value as set, not as handled by assistive technology.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is invalid.<br />
            - "false": The element is not in an invalid state.<br />
            - "grammar": The element is in an invalid state because grammatical error was detected.<br />
            - "spelling": The element is in an invalid state because spelling error was detected.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaKeyShortcuts">
            <summary>
            Reflects the value of the aria-keyshortcuts attribute, which indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaLabel">
            <summary>
            Reflects the value of the aria-label attribute, which defines a string value that labels the current element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaLevel">
            <summary>
            <para>Reflects the value of the aria-level attribute, which defines the hierarchical level of an element within a structure.</para>
            <para>Note: Where possible use an HTML h1 or other correct heading level as these have built in semantics and do not require ARIA attributes.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaLive">
            <summary>
            <para>
            Reflects the value of the aria-live attribute, which indicates that an element will be updated,
            and describes the types of updates the user agents, assistive technologies,and user can expect from the live region.
            </para>
            <para>
            Value is one of the following values:<br />
            - "assertive": Indicates that updates to the region have the highest priority and should be presented to the user immediately.<br />
            - "off": Indicates that updates to the region should not be presented to the user unless the user is currently focused on that region.<br />
            - "polite": Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaModal">
            <summary>
            <para>
            Reflects the value of the aria-modal attribute, which indicates whether an element is modal when displayed.
            Applying the aria-modal property to an element with role="dialog" replaces the technique of using aria-hidden on the background for informing assistive technologies that content outside a dialog is inert.
            </para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is modal.<br />
            - "false": The element is not modal.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaMultiline">
            <summary>
            <para>Reflects the value of the aria-multiline attribute, which indicates whether a text box accepts multiple lines of input or only a single line.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": This is a multi-line text box.<br />
            - "false": This is a single-line text box.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaMultiSelectable">
            <summary>
            <para>Reflects the value of the aria-multiselectable attribute, which indicates that the user may select more than one item from the current selectable descendants.</para>
            <para>Note: Where possible use an HTML &lt;select&gt; element as this has built in semantics and does not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": More than one item may be selected at a time.<br />
            - "false": Only one item may be selected.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaOrientation">
            <summary>
            <para>Reflects the value of the aria-orientation attribute, which indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.</para>
            <para>
            Value is one of the following values:<br />
            - "horizontal": The element is horizontal.<br />
            - "vertical": The element is vertical.<br />
            - "undefined": The element's orientation is unknown.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaPlaceholder">
            <summary>
            <para>Reflects the value of the aria-placeholder attribute, which defines a short hint intended to aid the user with data entry when the control has no value.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaPosInSet">
            <summary>
            <para>Reflects the value of the aria-posinset attribute, which defines an element's number or position in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaPressed">
            <summary>
            <para>Reflects the value of the aria-pressed attribute, which indicates the current "pressed" state of toggle buttons.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="button" or the &lt;button&gt; element as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The element is pressed.<br />
            - "false": The element supports being pressed but is not currently pressed.<br />
            - "mixed": Indicates a mixed mode value for a tri-state toggle button.<br />
            - "undefined": The element does not support being pressed.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaReadOnly">
            <summary>
            <para>Reflects the value of the aria-readonly attribute, which indicates that the element is not editable, but is otherwise operable.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The user cannot change the value of the element.<br />
            - "false": The user can set the value of the element.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaRequired">
            <summary>
            <para>Reflects the value of the aria-required attribute, which indicates that user input is required on the element before a form may be submitted.</para>
            <para>Note: Where possible use an HTML &lt;input&gt; element with type="text" or a &lt;textarea&gt; as these have built in semantics and do not require ARIA attributes.</para>
            <para>
            Value is one of the following values:<br />
            - "true": Users need to provide input on an element before a form is submitted.<br />
            - "false": User input is not necessary to submit the form.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaRoleDescription">
            <summary>
            Rreflects the value of the aria-roledescription attribute, which defines a human-readable, author-localized description for the role of an element.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaRowCount">
            <summary>
            <para>Reflects the value of the aria-rowcount attribute, which defines the total number of rows in a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaRowIndex">
            <summary>
            <para>Reflects the value of the aria-rowindex attribute, which defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaRowIndexText">
            <summary>
            Reflects the value of the aria-rowindextext attribute, which defines a human readable text alternative of aria-rowindex.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaRowSpan">
            <summary>
            <para>Reflects the value of the aria-rowspan attribute, which defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.</para>
            <para>Value is a string which contains an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaSelected">
            <summary>
            <para>Reflects the value of the aria-selected attribute, which indicates the current "selected" state of elements that have a selected state.</para>
            <para>
            Value is one of the following values:<br />
            - "true": The item is selected.<br />
            - "false": The item is not selected.<br />
            - "undefined": The item is not selectable.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaSetSize">
            <summary>
            <para>Reflects the value of the aria-setsize attribute, which defines the number of items in the current set of listitems or treeitems.</para>
            <para>Value is a string containing an integer.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaSort">
            <summary>
            <para>Reflects the value of the aria-sort attribute, which indicates if items in a table or grid are sorted in ascending or descending order.</para>
            <para>
            Value is one of the following values:<br />
            - "ascending": Items are sorted in ascending order by this column.<br />
            - "descending": Items are sorted in descending order by this column.<br />
            - "none": There is no defined sort applied to the column.<br />
            - "other": A sort algorithm other than ascending or descending has been applied.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaValueMax">
            <summary>
            <para>Reflects the value of the aria-valuemax attribute, which defines the maximum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaValueMin">
            <summary>
            <para>Reflects the value of the aria-valuemin attribute, which defines the minimum allowed value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaValueNow">
            <summary>
            <para>Reflects the value of the aria-valuenow attribute, which defines the current value for a range widget.</para>
            <para>Value is a string which contains a number.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.AriaValueText">
            <summary>
            Reflects the value of the aria-valuetext attribute, which defines the human-readable text alternative of aria-valuenow for a range widget.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLElementInProcess.Role">
            <summary>
            <para>Returns the explicitly set WAI-ARIA role for the element.</para>
            <para>
            All HTML elements have an implicit ARIA role, even if that role is generic.
            This semantic association allows tools to present and support interaction with the object in a manner that is consistent with user expectations about other objects of that type.
            The role attribute is used to explicitly set the element's ARIA role, overriding the implicit role.
            For example, a &lt;ul&gt;, which has an implicit list role, might have role="treegrid" explicitly set.
            The role property reflects the explicitly set value of the role attribute—in this case treegrid; it does not return the element's implicit list role unless explicitly set.
            </para>
            <para>The full list of defined ARIA roles can be found on the <see href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Reference/Roles">ARIA roles</see> reference page.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.CheckVisibility(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>
            Checks whether the element is visible. The method returns false in either of the following situations:<br />
            - The element doesn't have an associated box, for example because the CSS display property is set to 'none' or 'contents'.<br />
            - The element is not being rendered because the element or an ancestor element sets the 'content-visibility' property to 'hidden'.
            </para>
            <para>
            The optional parameter enables additional checks to test for other interpretations of what "visible" means.
            For example, you can further check whether an element has an opacity of 0, if the value of the element visibility property makes it invisible,
            or if the element content-visibility property has a value of auto and its rendering is currently being skipped.
            </para>
            </summary>
            <param name="contentVisibilityAuto">true to check if the element content-visibility property has (or inherits) the value auto, and it is currently skipping its rendering. false by default.</param>
            <param name="opacityProperty">true to check if the element opacity property has (or inherits) a value of 0. false by default.</param>
            <param name="visibilityProperty">true to check if the element is invisible due to the value of its visibility property. false by default.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ComputedStyleMap">
            <summary>
            Returns a StylePropertyMapReadOnly interface which provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetBoundingClientRect">
            <summary>
            Returns a DOMRect object providing information about the size of an element and its position relative to the viewport.
            </summary>
            <returns>
            <para>
            The returned value is a DOMRect object which is the smallest rectangle which contains the entire element, including its padding and border-width.
            The left, top, right, bottom, x, y, width, and height properties describe the position and size of the overall rectangle in pixels.
            Properties other than width and height are relative to the top-left of the viewport.
            </para>
            <para>
            The width and height properties of the DOMRect object returned by the method include the padding and border-width, not only the content width/height.
            In the standard box model, this would be equal to the width or height property of the element + padding + border-width.
            But if box-sizing: border-box is set for the element this would be directly equal to its width or height.
            </para>
            <para>The returned value can be thought of as the union of the rectangles returned by getClientRects() for the element, i.e., the CSS border-boxes associated with the element.</para>
            <para>
            Empty border-boxes are completely ignored.
            If all the element's border-boxes are empty, then a rectangle is returned with a width and height of zero
            and where the top and left are the top-left of the border-box for the first CSS box (in content order) for the element.
            </para>
            <para>
            The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle.
            This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute).
            </para>
            <para>
            If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the top and left properties
            (these can be obtained using window.scrollY and window.scrollX) to get a bounding rectangle which is independent from the current scrolling position.
            </para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetClientRects">
            <summary>
            <para>Returns a collection of DOMRect objects that indicate the bounding rectangles for each CSS border box in a client.</para>
            <para>Most elements only have one border box each, but a multiline inline-level element(such as a multiline &lt;span&gt; element, by default) has a border box around each line.</para>
            </summary>
            <returns>
            <para>
            The returned value is a collection of DOMRect objects, one for each CSS border box associated with the element.
            Each DOMRect object describes the border box, in pixels, with the top-left relative to the top-left of the viewport.
            For tables with captions, the caption is included even though it's outside the border box of the table.
            When called on SVG elements other than an outer-&lt;svg&gt;, the "viewport" that the resulting rectangles are relative to is the viewport that the element's outer-&lt;svg&gt; establishes
            (and to be clear, the rectangles are also transformed by the outer-&lt;svg&gt;'s viewBox transform, if any).
            </para>
            <para>The amount of scrolling that has been done of the viewport area(or any other scrollable element) is taken into account when computing the rectangles.</para>
            <para>The returned rectangles do not include the bounds of any child elements that might happen to overflow.</para>
            <para>For HTML&lt;area&gt; elements, SVG elements that do not render anything themselves, display:none elements, and generally any elements that are not directly rendered, an empty list is returned.</para>
            <para>Rectangles are returned even for CSS boxes that have empty border-boxes.The left, top, right, and bottom coordinates can still be meaningful.</para>
            <para>Fractional pixel offsets are possible.</para>
            </returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Matches(System.String)">
            <summary>
            Tests whether the element would be selected by the specified CSS selector.
            </summary>
            <param name="selectors">A string containing valid CSS selectors to test the Element against.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.IsDefaultNamespace(System.String)">
            <summary>
            Accepts a namespace URI as an argument. It returns a boolean value that is true if the namespace is the default namespace on the given node and false if not.
            </summary>
            <param name="namespaceURI">A string representing the namespace against which the element will be checked.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.LookupPrefix(System.String)">
            <summary>
            <para>Returns a string containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the first prefix is returned.</para>
            <para>If the node is a <i>DocumentType</i> or a <i>DocumentFragment</i>, it returns null.</para>
            </summary>
            <param name="namespace">A string containing the namespace to look the prefix up.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.LookupNamespaceURI(System.String)">
            <summary>
            <para>
            Takes a prefix as parameter and returns the namespace URI associated with it on the given node if found (and null if not).
            This method's existence allows Node objects to be passed as a namespace resolver to <i>XPathEvaluator.createExpression()</i> and <i>XPathEvaluator.evaluate()</i>.
            </para>
            <para>
            It returns a string containing the namespace URI corresponding to the prefix.<br />
            - Always returns null if the node is a DocumentFragment, DocumentType, Document with no documentElement, or Attr with no associated element.<br />
            - If prefix is "xml", the return value is always "http://www.w3.org/XML/1998/namespace".<br />
            - If prefix is "xmlns", the return value is always "http://www.w3.org/2000/xmlns/".<br />
            - If the prefix is null, the return value is the default namespace URI.<br />
            - If the prefix is not found, the return value is null.
            </para>
            </summary>
            <param name="prefix">The prefix to look for.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Normalize">
            <summary>
            Puts the specified node and all of its sub-tree into a normalized form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.SetPointerCapture(System.Int64)">
            <summary>
            <para>
            Is used to designate a specific element as the capture target of future pointer events.
            Subsequent events for the pointer will be targeted at the capture element until capture is released (via Element.releasePointerCapture() or the pointerup event is fired).
            </para>
            <para>
            Note: Pointer capture will cause the target to capture all subsequent pointer events as if they were occurring over the capturing target.
            Accordingly, pointerover, pointerenter, pointerleave, and pointerout will not fire as long as this capture is set.
            For touchscreen browsers that allow direct manipulation, an implicit pointer capture will be called on the element when a pointerdown event triggers.
            The capture can be released manually by calling element.releasePointerCapture on the target element, or it will be implicitly released after a pointerup or pointercancel event.
            </para>
            <para>
            Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal(or hit test) target at a pointer's location.
            This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element(such as by scrolling or panning).
            </para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReleasePointerCapture(System.Int64)">
            <summary>
            <para>Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.</para>
            <para>See the <see cref="M:BrowserAPI.IHTMLElementInProcess.SetPointerCapture(System.Int64)"/> method for a description of pointer capture and how to set it for a particular element.</para>
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HasPointerCapture(System.Int64)">
            <summary>
            Checks whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.
            </summary>
            <param name="pointerId">The pointerId of a PointerEvent object.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Scroll(System.Int32,System.Int32)">
            <summary>
            Scrolls the element to a particular set of coordinates inside a given element.
            </summary>
            <param name="left">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="top">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ScrollTo(System.Int32,System.Int32,System.String)">
            <summary>
            Scrolls to a particular set of coordinates inside a given element.
            </summary>
            <param name="x">The pixel along the horizontal axis of the element that you want displayed in the upper left.</param>
            <param name="y">The pixel along the vertical axis of the element that you want displayed in the upper left.</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly. This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ScrollBy(System.Int32,System.Int32)">
            <summary>
            Scrolls an element by the given amount.
            </summary>
            <param name="x">Specifies the number of pixels along the X axis to scroll the window or element.</param>
            <param name="y">Specifies the number of pixels along the Y axis to scroll the window or element.</param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ScrollIntoView(System.String,System.String,System.String)">
            <summary>
            Scrolls the element's ancestor containers such that the element on which <i>scrollIntoView()</i> is called is visible to the user.
            </summary>
            <param name="block">Defines vertical alignment. One of "start", "center", "end", or "nearest". Defaults to "start".</param>
            <param name="inline">Defines horizontal alignment. One of "start", "center", "end", or "nearest". Defaults to "nearest".</param>
            <param name="behavior">
            Determines whether scrolling is instant or animates smoothly.This option is a string which must take one of the following values:<br />
            - "smooth": scrolling should animate smoothly<br />
            - "instant": scrolling should happen instantly in a single jump<br />
            - "auto": scroll behavior is determined by the computed value of scroll-behavior<br />
            Defaults to "auto".
            </param>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetAttribute(System.String)">
            <summary>
            Returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will be null.
            </summary>
            <param name="qualifiedName">The name of the attribute whose value you want to get.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetAttributeNS(System.String,System.String)">
            <summary>
            <para>
            Returns the string value of the attribute with the specified namespace and name.
            If the named attribute does not exist, the value returned will either be null or "" (the empty string); see Notes for details.
            </para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElementInProcess.GetAttribute(System.String)"/> method instead.</para>
            </summary>
            <remarks>
            Note: Earlier versions of the DOM specification had this method described as returning an empty string for non-existent attributes, but it was not typically implemented this way since null makes more sense.
            The DOM4 specification now says this method should return null for non-existent attributes.
            </remarks>
            <param name="namespace">The namespace in which to look for the specified attribute.</param>
            <param name="qualifiedName">The name of the attribute to look for.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetAttributeNames">
            <summary>
            <para>Returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.</para>
            <para>Using <i>getAttributeNames()</i> along with <see cref="M:BrowserAPI.IHTMLElementInProcess.GetAttribute(System.String)"/>, is a memory-efficient and performant alternative to <see cref="P:BrowserAPI.IHTMLElementInProcess.Attributes"/>.</para>
            <para>
            The names returned by <i>getAttributeNames()</i> are qualified attribute names,
            meaning that attributes with a namespace prefix have their names returned with that namespace prefix (not the actual namespace), followed by a colon, followed by the attribute name (for example, xlink:href),
            while any attributes which have no namespace prefix have their names returned as-is (for example, href).
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.SetAttribute(System.String,System.String)">
            <summary>
            <para>Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.</para>
            <para>To get the current value of an attribute, use <see cref="M:BrowserAPI.IHTMLElementInProcess.GetAttribute(System.String)"/>; to remove an attribute, call <see cref="M:BrowserAPI.IHTMLElementInProcess.RemoveAttribute(System.String)"/>.</para>
            <para>Boolean attributes are considered to be true if they're present on the element at all. You should set value to the empty string ("") or the attribute's name, with no leading or trailing whitespace.</para>
            <para>
            Since the specified value gets converted into a string, specifying null doesn't necessarily do what you expect.
            Instead of removing the attribute or setting its value to be null, it instead sets the attribute's value to the string "null".
            If you wish to remove an attribute, call <see cref="M:BrowserAPI.IHTMLElementInProcess.RemoveAttribute(System.String)"/>.
            </para>
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute whose value is to be set.
            The attribute name is automatically converted to all lower-case when setAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="value">A string containing the value to assign to the attribute. Any non-string value specified is converted automatically into a string.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.SetAttributeNS(System.String,System.String,System.String)">
            <summary>
            <para>Adds a new attribute or changes the value of an attribute with the given namespace and name.</para>
            <para>f you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElementInProcess.SetAttribute(System.String,System.String)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">A string identifying the attribute by its qualified name; that is, a namespace prefix followed by a colon followed by a local name.</param>
            <param name="value">The desired string value of the new attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ToggleAttribute(System.String,System.Nullable{System.Boolean})">
            <summary>
            Toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.
            </summary>
            <param name="qualifiedName">
            A string specifying the name of the attribute to be toggled.
            The attribute name is automatically converted to all lower-case when toggleAttribute() is called on an HTML element in an HTML document.
            </param>
            <param name="force">
            A boolean value which has the following effects:<br />
            - if not specified at all, the toggleAttribute method "toggles" the attribute named name — removing it if it is present, or else adding it if it is not present<br />
            - if true, the toggleAttribute method adds an attribute named name<br />
            - if false, the toggleAttribute method removes the attribute named name
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RemoveAttribute(System.String)">
            <summary>
            Removes the attribute with the specified name from the element.
            </summary>
            <param name="qualifiedName">A string specifying the name of the attribute to remove from the element. If the specified attribute does not exist, removeAttribute() returns without generating an error.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RemoveAttributeNS(System.String,System.String)">
            <summary>
            <para>Removes the specified attribute with the specified namespace from an element.</para>
            <para>If you are working with HTML and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElementInProcess.RemoveAttribute(System.String)"/> method instead.</para>
            </summary>
            <param name="namespace">A string that contains the namespace of the attribute.</param>
            <param name="qualifiedName">A string that names the attribute to be removed from the current node.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HasAttribute(System.String)">
            <summary>
            Returns a Boolean value indicating whether the specified element has the specified attribute or not.
            </summary>
            <param name="name">A string representing the name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HasAttributeNS(System.String,System.String)">
            <summary>
            <para>Returns a boolean value indicating whether the current element has the specified attribute with the specified namespace.</para>
            <para>If you are working with HTML documents and you don't need to specify the requested attribute as being part of a specific namespace, use the <see cref="M:BrowserAPI.IHTMLElementInProcess.HasAttribute(System.String)"/> method instead.</para>
            </summary>
            <param name="namespace">A string specifying the namespace of the attribute.</param>
            <param name="qualifiedName">The name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.HasAttributes">
            <summary>
            Returns a boolean value indicating whether the current element has any attributes or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetElementsByClassName(System.String)">
            <summary>
            <para>Returns an array which contains every descendant element which has the specified class name or names.</para>
            <para>The method getElementsByClassName() on the Document interface works essentially the same way, except it acts on the entire document, starting at the document root.</para>
            </summary>
            <param name="className">A string containing one or more class names to match on, separated by whitespace.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetElementsByTagName(System.String)">
            <summary>
            <para>Returns an array of elements with the given tag name. All descendants of the specified element are searched, but not the element itself.</para>
            <para>
            When called on an HTML element in an HTML document, getElementsByTagName lower-cases the argument before searching for it.
            This is undesirable when trying to match camel-cased SVG elements (such as &lt;linearGradient&gt;) in an HTML document.
            Instead, use <see cref="M:BrowserAPI.IHTMLElementInProcess.GetElementsByTagNameNS(System.String,System.String)"/>, which preserves the capitalization of the tag name.
            </para>
            <para>Element.getElementsByTagName is similar to Document.getElementsByTagName(), except that it only searches for elements that are descendants of the specified element.</para>
            </summary>
            <param name="qualifiedName">The qualified name to look for. The special string "*" represents all elements. For compatibility with XHTML, lower-case should be used.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.GetElementsByTagNameNS(System.String,System.String)">
            <summary>
            Returns an array of elements with the given tag name belonging to the given namespace.
            It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.
            </summary>
            <param name="namespace">
            The namespace URI of elements to look for (see Element.namespaceURI and Attr.namespaceURI).
            For example, if you need to look for XHTML elements, use the XHTML namespace URI, http://www.w3.org/1999/xhtml.
            </param>
            <param name="qualifiedName">Either the local name of elements to look for or the special value "*", which matches all elements (see Element.localName and Attr.localName).</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.QuerySelector(System.String)">
            <summary>
            Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.QuerySelectorAll(System.String)">
            <summary>
            Returns an array representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.
            </summary>
            <param name="selectors">
            <para>A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown.</para>
            <para>
            Note that the HTML specification does not require attribute values to be valid CSS identifiers.
            If a class or id attribute value is not a valid CSS identifier, then you must escape it before using it in a selector,
            either by calling CSS.escape() on the value, or using one of the techniques described in Escaping characters.
            See <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector#escaping_attribute_values">Escaping attribute values</see> for an example.
            </para>
            <para>
            The selectors are applied to the entire document, not just the particular element on which querySelectorAll() is called.
            To restrict the selector to the element on which querySelectorAll() is called, include the :scope pseudo-class at the start of the selector.
            See the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll#selector_scope">selector scope</see> example.
            </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Closest(System.String)">
            <summary>
            Traverses the element and its parents (heading toward the document root) until it finds a node that matches the specified CSS selector.
            </summary>
            <param name="selectors">A string of valid CSS selectors to match the Element and its ancestors against.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Before(System.String[])">
            <summary>
            Inserts a set of strings in the children list of this Element's parent, just before this Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Before(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects in the children list of this Element's parent, just before this Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.After(System.String[])">
            <summary>
            Inserts a set of strings in the children list of the Element's parent, just after the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.After(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects in the children list of the Element's parent, just after the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Prepend(System.String[])">
            <summary>
            Inserts a set of strings before the first child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Prepend(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects before the first child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.AppendChild(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            <para>Adds a node to the end of the list of children of a specified parent node.</para>
            <para>Note: If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position.</para>
            <para>If the given child is a DocumentFragment, the entire contents of the DocumentFragment are moved into the child list of the specified parent node.</para>
            <para>appendChild() returns the newly appended node, or if the child is a DocumentFragment, the emptied fragment.</para>
            <para>Note: Unlike this method, the Element.append() method supports multiple arguments and appending strings. You can prefer using it if your node is an element.</para>
            </summary>
            <param name="node">The node to append to the given parent node</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Append(System.String[])">
            <summary>
            Inserts a set of strings after the last child of the Element. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Append(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Inserts a set of Node objects after the last child of the Element.
            </summary>
            <param name="nodes">A set of Node objects to insert.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.InsertAdjacentElement(System.String,BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Inserts a given element node at a given position relative to the element it is invoked upon.
            </summary>
            <param name="position">
            A string representing the position relative to the targetElement; must match (case-insensitively) one of the following strings:<br />
            - "beforebegin": Before the targetElement itself.<br />
            - "afterbegin": Just inside the targetElement, before its first child.<br />
            - "beforeend": Just inside the targetElement, after its last child.<br />
            - "afterend": After the targetElement itself.
            </param>
            <param name="htmlElement">The element to be inserted into the tree.</param>
            <returns>true if element was inserted, false if the insertion failed.</returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.InsertAdjacentHTML(System.String,System.String)">
            <summary>
            Parses the specified input as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position.
            </summary>
            <remarks>
            Warning: This method parses its input as HTML or XML, writing the result into the DOM.
            APIs like this are known as injection sinks, and are potentially a vector for cross-site-scripting (XSS) attacks, if the input originally came from an attacker.
            </remarks>
            <param name="position">
            A string representing the position relative to the element. Must be one of the following strings:<br />
            - "beforebegin": Before the element. Only valid if the element is in the DOM tree and has a parent element.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element. Only valid if the element is in the DOM tree and has a parent element.
            </param>
            <param name="html">A TrustedHTML instance or string defining the HTML or XML to be parsed.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.InsertAdjacentText(System.String,System.String)">
            <summary>
            Given a relative position and a string, inserts a new text node at the given position relative to the element it is called from.
            </summary>
            <param name="position">
            A string representing the position relative to the element the method is called from; must be one of the following strings:<br />
            - "beforebegin": Before the element itself.<br />
            - "afterbegin": Just inside the element, before its first child.<br />
            - "beforeend": Just inside the element, after its last child.<br />
            - "afterend": After the element itself.
            </param>
            <param name="data">A string from which to create a new text node to insert at the given position where relative to the element the method is called from.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.RemoveChild(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Removes a child node from the DOM.
            </summary>
            <remarks>
            Note: As long as a reference is kept on the removed child, it still exists in memory, but is no longer part of the DOM. It can still be reused later in the code.
            If the return value of removeChild() is not stored, and no other reference is kept, it will be automatically deleted from memory after a short time.
            </remarks>
            <param name="node">A Node that is the child node to be removed from the DOM.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Remove">
            <summary>
            Removes the element from its parent node.
            If it has no parent node, calling remove() does nothing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReplaceChild(BrowserAPI.IHTMLElementInProcess,BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <remarks>
            Note: The parameter order, new before old, is unusual. <see cref="M:BrowserAPI.IHTMLElementInProcess.ReplaceWith(BrowserAPI.IHTMLElementInProcess[])"/>, applying only to nodes that are elements, may be easier to read and use.
            </remarks>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChild">The child to be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReplaceChild(BrowserAPI.IHTMLElementInProcess,System.Int32)">
            <summary>
            Replaces a child node within the given (parent) node.
            </summary>
            <param name="newChild">
            <para>The new node to replace oldChild.</para>
            <para>Warning: If the new node is already present somewhere else in the DOM, it is first removed from that position.</para>
            </param>
            <param name="oldChildIndex">The zero based index of the child to be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReplaceWith(System.String[])">
            <summary>
            Replaces this Element in the children list of its parent with a set of strings. Strings are inserted as equivalent Text nodes.
            </summary>
            <param name="nodes">A set of strings to replace.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReplaceWith(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Replaces this Element in the children list of its parent with a set of Node objects.
            </summary>
            <param name="nodes">A set of Node objects to replace.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReplaceChildren(System.String[])">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of strings to replace the Element's existing children with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.ReplaceChildren(BrowserAPI.IHTMLElementInProcess[])">
            <summary>
            Replaces the existing children of a Node with a specified new set of children.
            </summary>
            <remarks>It also provides a very convenient mechanism for emptying a node of all its children. You call it on the parent node with an empty array.</remarks>
            <param name="nodes">A set of Node objects to replace the Element's existing children with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.CloneNode(System.Boolean)">
            <summary>
            <para>Returns a duplicate of the node on which this method was called. Its parameter controls if the subtree contained in a node is also cloned or not.</para>
            <para>
            Cloning a node copies all of its attributes and their values, including intrinsic (inline) listeners.
            It does not copy event listeners added using addEventListener() or those assigned to element properties (e.g., node.onclick = someFunction).
            Additionally, for a &lt;canvas&gt; element, the painted image is not copied.
            </para>
            </summary>
            <remarks>
            Warning: cloneNode() may lead to duplicate element IDs in a document!
            If the original node has an id attribute, and the clone will be placed in the same document, then you should modify the clone's ID to be unique.
            Also, name attributes may need to be modified, depending on whether duplicate names are expected.</remarks>
            <param name="deep">
            <para>If true, then the node and its whole subtree, including text that may be in child Text nodes, is also copied.</para>
            <para>If false, only the node will be cloned. The subtree, including any text that the node contains, is not cloned.</para>
            <para>Note that deep has no effect on void elements, such as the &lt;img&gt; and &lt;input&gt; elements.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.IsSameNode(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Is a legacy alias the for the === strict equality operator. That is, it tests whether two nodes are the same (in other words, whether they reference the same object).
            </summary>
            <param name="other">The Node to test against.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.IsEqualNode(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Tests whether two nodes are equal.
            Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on.
            The specific set of data points that must match varies depending on the types of the nodes.
            </summary>
            <param name="other">The Node to compare equality with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.Contains(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            Returns a boolean value indicating whether a node is a descendant of a given node, that is the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.
            </summary>
            <remarks>Note: A node is contained inside itself.</remarks>
            <param name="other">The Node to test with.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLElementInProcess.CompareDocumentPosition(BrowserAPI.IHTMLElementInProcess)">
            <summary>
            <para>Reports the position of its argument node relative to the node on which it is called.</para>
            <para>
            It returns an integer value representing otherNode's position relative to node as a bitmask combining the following constant properties of Node:<br />
            - 1 (Node.DOCUMENT_POSITION_DISCONNECTED): Both nodes are in different documents or different trees in the same document.<br />
            - 2 (Node.DOCUMENT_POSITION_PRECEDING): otherNode precedes the node in either a pre-order depth-first traversal of a tree containing both (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 4 (Node.DOCUMENT_POSITION_FOLLOWING): otherNode follows the node in either a pre-order depth-first traversal of a tree containing both (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering.<br />
            - 8 (Node.DOCUMENT_POSITION_CONTAINS): otherNode is an ancestor of the node.<br />
            - 16 (Node.DOCUMENT_POSITION_CONTAINED_BY): otherNode is a descendant of the node.<br />
            - 32 (Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC): The result relies upon arbitrary and/or implementation-specific behavior and is not guaranteed to be portable.
            </para>
            <para>
            Zero or more bits can be set, depending on which scenarios apply.
            For example, if otherNode is located earlier in the document and contains the node on which compareDocumentPosition() was called,
            then both the DOCUMENT_POSITION_CONTAINS and DOCUMENT_POSITION_PRECEDING bits would be set, producing a value of 10 (0x0A).
            </para>
            </summary>
            <param name="other">The Node for which position should be reported, relative to the node.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IHTMLMediaElement">
            <summary>
            <para>The <i>HTMLMediaElement</i> interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.</para>
            <para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">HTMLVideoElement</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">HTMLAudioElement</see> elements both inherit this interface.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Src">
            <summary>
            <para>A string that reflects the src HTML attribute, which contains the URL of a media resource to use.</para>
            <para>
            Note: The best way to know the URL of the media resource currently in active use in this element is to look at the value of the currentSrc attribute,
            which also takes into account selection of a best or preferred media resource from a list provided in an HTMLSourceElement (which represents a &lt;source&gt; element).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetSrc(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Src" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetSrc(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Src" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.SrcObject">
            <summary>
            A MediaStream representing the media to play or that has played in the current HTMLMediaElement, or null if not assigned.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetSrcObject(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.SrcObject" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetSrcObject(BrowserAPI.IMediaStream,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.SrcObject" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Controls">
            <summary>
            A boolean that reflects the controls HTML attribute, indicating whether user interface items for controlling the resource should be displayed.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetControls(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Controls" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetControls(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Controls" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Autoplay">
            <summary>
            <para>A boolean value that reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.</para>
            <para>A media element whose source is a MediaStream and whose autoplay property is true will begin playback when it becomes active(that is, when MediaStream.active becomes true).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetAutoplay(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Autoplay" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetAutoplay(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Autoplay" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Loop">
            <summary>
            A boolean that reflects the loop HTML attribute, which indicates whether the media element should start over when it reaches the end.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetLoop(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Loop" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetLoop(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Loop" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.DefaultMuted">
            <summary>
            <para>A boolean that reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default.</para>
            <para>This property has no dynamic effect. To mute and unmute the audio output, use the muted property.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetDefaultMuted(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.DefaultMuted" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetDefaultMuted(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.DefaultMuted" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Preload">
            <summary>
            <para>A string that reflects the preload HTML attribute, indicating what data should be preloaded, if any.</para>
            <para>
            Possible values are:<br />
            - "none": Indicates that the media should not be preloaded.<br />
            - "metadata": Indicates that only media metadata (e.g. length) is fetched.<br />
            - "auto": Indicates that the whole media file can be downloaded, even if the user is not expected to use it.<br />
            - "": A synonym of the auto value.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetPreload(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Preload" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetPreload(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Preload" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.CurrentSrc">
            <summary>
            <para>Returns a string with the absolute URL of the chosen media resource.</para>
            <para>This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetCurrentSrc(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.CurrentSrc" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.CurrentTime">
            <summary>
            <para>A double-precision floating-point value indicating the current playback time in seconds.</para>
            <para>
            if the media has not started to play and has not been seeked, this value is the media's initial playback time.
            Setting this value seeks the media to the new time. The time is specified relative to the media's timeline.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetCurrentTime(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.CurrentTime" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetCurrentTime(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.CurrentTime" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Duration">
            <summary>
            <para>A read-only double-precision floating-point value indicating the total duration of the media in seconds.</para>
            <para>
            If no media data is available, the returned value is NaN.<br />
            If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is +Infinity.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetDuration(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Duration" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Seekable">
            <summary>
            Returns a TimeRanges object that contains the time ranges that the user is able to seek to.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetSeekable(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Seekable" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Muted">
            <summary>
            <para>A boolean that determines whether audio is muted. true if the audio is muted and false otherwise.</para>
            <para>true means muted and false means not muted.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetMuted(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Muted" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetMuted(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Muted" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Volume">
            <summary>
            A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetVolume(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Volume" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetVolume(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Volume" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Paused">
            <summary>
            <para>Returns a boolean that indicates whether the media element is paused.</para>
            <para>true is paused and false is not paused.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetPaused(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Paused" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Ended">
            <summary>
            <para>Returns a boolean that indicates whether the media element has finished playing.</para>
            <para>true if the media contained in the element has finished playing.</para>
            <para>If the source of the media is a MediaStream, this value is true if the value of the stream's active property is false.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetEnded(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Ended" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Seeking">
            <summary>
            Returns a boolean that indicates whether the media is in the process of seeking to a new position.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetSeeking(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Seeking" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.ReadyState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the readiness state of the media.</para>
            <para>
            Possible values are:<br />
            0 = HAVE_NOTHING: No information is available about the media resource.<br />
            1 = HAVE_METADATA: Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.<br />
            2 = HAVE_CURRENT_DATA: Data is available for the current playback position, but not enough to actually play more than one frame.<br />
            3 = HAVE_FUTURE_DATA: Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).<br />
            4 = HAVE_ENOUGH_DATA: Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetReadyState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.ReadyState" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.NetworkState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the current state of fetching the media over the network.</para>
            <para>
            Possible values are:<br />
            0 = NETWORK_EMPTY: There is no data yet. Also, readyState is HAVE_NOTHING.<br />
            1 = NETWORK_IDLE: HTMLMediaElement is active and has selected a resource, but is not using the network.<br />
            2 = NETWORK_LOADING: The browser is downloading HTMLMediaElement data.<br />
            3 = NETWORK_NO_SOURCE: No HTMLMediaElement src found.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetNetworkState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.NetworkState" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Buffered">
            <summary>
            Returns a TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetBuffered(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Buffered" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.Played">
            <summary>
            Returns a TimeRanges object that contains the ranges of the media source that the browser has played, if any.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetPlayed(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.Played" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.PlaybackRate">
            <summary>
            <para>A double that indicates the rate at which the media is being played back.</para>
            <para>
            This is used to implement user controls for fast forward, slow motion, and so forth.<br />
            The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.
            </para>
            <para>A negative playbackRate value indicates that the media should be played backwards, but support for this is not yet widespread.</para>
            <para>The audio is muted when the fast forward or slow motion is outside a useful range(for example, Gecko mutes the sound outside the range 0.25 to 4.0).</para>
            <para>The pitch of the audio is corrected by default. You can disable pitch correction using the HTMLMediaElement.preservesPitch property.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetPlaybackRate(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.PlaybackRate" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetPlaybackRate(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.PlaybackRate" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.DefaultPlaybackRate">
            <summary>
            <para>A double indicating the default playback rate for the media.</para>
            <para>A double. 1.0 is "normal speed," values lower than 1.0 make the media play slower than normal, higher values make it play faster.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetDefaultPlaybackRate(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.DefaultPlaybackRate" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetDefaultPlaybackRate(System.Double,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.DefaultPlaybackRate" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.CrossOrigin">
            <summary>
            <para>A string indicating the CORS setting for this media element. See <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</see> for details.</para>
            <para>
            Possible values are:<br />
            "anonymous":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>same-origin</i> credentials mode.
            This means that CORS is enabled and credentials are sent if the resource is fetched from the same origin from which the document was loaded.<br />
            "use-credentials":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>include</i> credentials mode.
            All resources requests by the element will use CORS, regardless of what domain the fetch is from.<br />
            "" (or any other value):
            The same as specifing as "anonymous".
            </para>
            <para>If the <i>crossOrigin</i> property is not specified, the resource is fetched without CORS (the <i>no-cors</i> mode and the <i>same-origin</i> credentials mode).</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetCrossOrigin(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.CrossOrigin" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetCrossOrigin(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.CrossOrigin" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.PreservesPitch">
            <summary>
            <para>
            A boolean value that determines if the pitch of the sound will be preserved.<br />
            If set to false, the pitch will adjust to the speed of the audio.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetPreservesPitch(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.PreservesPitch" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetPreservesPitch(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.PreservesPitch" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElement.DisableRemotePlayback">
            <summary>
            <para>A boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI.</para>
            <para>false means "not disabled", which means "enabled"</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.GetDisableRemotePlayback(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.DisableRemotePlayback" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.SetDisableRemotePlayback(System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IHTMLMediaElement.DisableRemotePlayback" />
            <param name="value"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.Pause(System.Threading.CancellationToken)">
            play() is declared in HTMLMediaElementBase
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.Load(System.Threading.CancellationToken)">
            <summary>
            Resets the media to the beginning and selects the best available source from the sources provided using the <i>src</i> attribute or the <i>&lt;source&gt;</i> element.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.FastSeek(System.Double,System.Threading.CancellationToken)">
            <summary>
            <para>Quickly seeks to the given time with low precision.</para>
            <para>Note: If you need to seek with precision, you should set HTMLMediaElement.currentTime instead.</para>
            </summary>
            <param name="time"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.CanPlayType(System.String,System.Threading.CancellationToken)">
            <summary>
            Given a string specifying a MIME media type (potentially with the codecs parameter included), canPlayType() returns the string<br />
            - "probably", if the media should be playable<br />
            - "maybe", if there's not enough information to determine whether the media will play or not<br />
            - "", if the media cannot be played
            </summary>
            <param name="type">A string specifying the MIME type of the media and (optionally) a codecs parameter containing a comma-separated list of the supported codecs.</param>
            <param name="cancellationToken"></param>
            <returns>"probably", "maybe" or ""</returns>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElement.Play(System.Threading.CancellationToken)">
            <summary>
            Attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started.<br />
            Failure to begin playback for any reason, such as permission issues, result in the promise being rejected.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnError">
            <summary>
            <para>Fired when the resource could not be loaded due to an error (for example, a network connectivity problem).</para>
            <para>This event is not cancelable and does not bubble.</para>
            <para>
            If an error already occurred when subscribing (<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error">error</see> property is not empty), this event is fired immediately.<br />
            Note: When <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error">error</see> is not empty, this event is fired with every subscription.
            </para>
            <para>
            <b>Parameters</b><br />
            - int <i>code</i>:<br />
            A number which represents the general type of error that occurred.<br />
            Possible values are:<br />
            1 = MEDIA_ERR_ABORTED: The fetching of the associated resource was aborted by the user's request.<br />
            2 = MEDIA_ERR_NETWORK: Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available.<br />
            3 = MEDIA_ERR_DECODE: Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error.<br />
            4 = MEDIA_ERR_SRC_NOT_SUPPORTED: The associated resource or media provider object (such as a MediaStream) has been found to be unsuitable.<br />
            - string <i>message</i>:<br />
            A human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred;
            specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong.
            This text and its format is not defined by the specification and will vary from one user agent to another.
            If no diagnostics are available, or no explanation can be provided, this value is an empty string ("").
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnCanPlay">
            <summary>
            <para>Fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnCanPlayThrough">
            <summary>
            <para>Fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnPlaying">
            <summary>
            <para>Fired after playback is first started, and whenever it is restarted. For example it is fired when playback resumes after having been paused or delayed due to lack of data.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnLoadStart">
            <summary>
            Fired when the browser has started to load a resource.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnProgress">
            <summary>
            <para>Fired periodically as the browser loads a resource.></para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnLoadedData">
            <summary>
            Fired when the first frame of the media has finished loading; often the first frame.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnLoadedMetadata">
            <summary>
            Fired when the metadata has been loaded.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnStalled">
            <summary>
            <para>Fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnSuspend">
            <summary>
            <para>Fired when the media data loading has been suspended.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnWaiting">
            <summary>
            <para>Fired when playback has stopped because of a temporary lack of data.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnAbort">
            <summary>
            <para>Fired when the resource was not fully loaded, but not as the result of an error.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnEmptied">
            <summary>
            <para>Fired when the media has become empty; for example, when the media has already been loaded (or partially loaded), and the <see cref="!:HTMLMediaElement.Load">Load()</see> method is called to reload it.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnPlay">
            <summary>
            <para>Fired when the paused property is changed from true to false, as a result of the <see cref="M:BrowserAPI.IHTMLMediaElement.Play(System.Threading.CancellationToken)">Play()</see> method, or the autoplay attribute.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnPause">
            <summary>
            <para>Fired when a request to pause play is handled and the activity has entered its paused state, most commonly occurring when the media's <see cref="!:HTMLMediaElement.Pause">Pause()</see> method is called.</para>
            <para>The event is sent once the <see cref="!:HTMLMediaElement.Pause">Pause()</see> method returns and after the media element's paused property has been changed to true.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnEnded">
            <summary>
            <para>Fired when playback stops when end of the media (&lt;audio&gt; and &lt;video&gt;) is reached or because no further data is available.</para>
            <para>This event occurs based upon HTMLMediaElement (&lt;audio&gt; and &lt;video&gt;) fire ended when playback reaches the end of the media.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnSeeking">
            <summary>
            <para>Fired when a seek operation starts, meaning the Boolean seeking attribute has changed to true and the media is seeking a new position.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnSeeked">
            <summary>
            <para>Fired when a seek operation completed, the current playback position has changed, and the Boolean seeking attribute is changed to false.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnTimeUpdate">
            <summary>
            <para>Fired when the time indicated by the currentTime attribute has been updated.</para>
            <para>
            The event frequency is dependent on the system load, but will be thrown between about 4Hz and 66Hz (assuming the event handlers don't take longer than 250ms to run).
            User agents are encouraged to vary the frequency of the event based on the system load and the average cost of processing the event each time,
            so that the UI updates are not any more frequent than the user agent can comfortably handle while decoding the video.
            </para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnVolumeChange">
            <summary>
            <para>Fired when either the volume attribute or the muted attribute has changed.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnRateChange">
            <summary>
            <para>Fired when the playback rate has changed.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElement.OnDurationChange">
            <summary>
            Fired when the duration attribute has been updated.
            </summary>
        </member>
        <member name="T:BrowserAPI.IHTMLMediaElementInProcess">
            <summary>
            <para>The <i>HTMLMediaElement</i> interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.</para>
            <para>The <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement">HTMLVideoElement</see> and <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement">HTMLAudioElement</see> elements both inherit this interface.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElementInProcess.Play(System.Threading.CancellationToken)">
            <summary>
            Attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started.<br />
            Failure to begin playback for any reason, such as permission issues, result in the promise being rejected.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnError">
            <summary>
            <para>Fired when the resource could not be loaded due to an error (for example, a network connectivity problem).</para>
            <para>This event is not cancelable and does not bubble.</para>
            <para>
            If an error already occurred when subscribing (<see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error">error</see> property is not empty), this event is fired immediately.<br />
            Note: When <see href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error">error</see> is not empty, this event is fired with every subscription.
            </para>
            <para>
            <b>Parameters</b><br />
            - int <i>code</i>:<br />
            A number which represents the general type of error that occurred.<br />
            Possible values are:<br />
            1 = MEDIA_ERR_ABORTED: The fetching of the associated resource was aborted by the user's request.<br />
            2 = MEDIA_ERR_NETWORK: Some kind of network error occurred which prevented the media from being successfully fetched, despite having previously been available.<br />
            3 = MEDIA_ERR_DECODE: Despite having previously been determined to be usable, an error occurred while trying to decode the media resource, resulting in an error.<br />
            4 = MEDIA_ERR_SRC_NOT_SUPPORTED: The associated resource or media provider object (such as a MediaStream) has been found to be unsuitable.<br />
            - string <i>message</i>:<br />
            A human-readable string which provides specific diagnostic information to help the reader understand the error condition which occurred;
            specifically, it isn't a summary of what the error code means, but actual diagnostic information to help in understanding what exactly went wrong.
            This text and its format is not defined by the specification and will vary from one user agent to another.
            If no diagnostics are available, or no explanation can be provided, this value is an empty string ("").
            </para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnCanPlay">
            <summary>
            <para>Fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnCanPlayThrough">
            <summary>
            <para>Fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnPlaying">
            <summary>
            <para>Fired after playback is first started, and whenever it is restarted. For example it is fired when playback resumes after having been paused or delayed due to lack of data.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnLoadStart">
            <summary>
            Fired when the browser has started to load a resource.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnProgress">
            <summary>
            <para>Fired periodically as the browser loads a resource.></para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnLoadedData">
            <summary>
            Fired when the first frame of the media has finished loading; often the first frame.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnLoadedMetadata">
            <summary>
            Fired when the metadata has been loaded.
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnStalled">
            <summary>
            <para>Fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnSuspend">
            <summary>
            <para>Fired when the media data loading has been suspended.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnWaiting">
            <summary>
            <para>Fired when playback has stopped because of a temporary lack of data.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnAbort">
            <summary>
            <para>Fired when the resource was not fully loaded, but not as the result of an error.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnEmptied">
            <summary>
            <para>Fired when the media has become empty; for example, when the media has already been loaded (or partially loaded), and the <see cref="!:HTMLMediaElement.Load">Load()</see> method is called to reload it.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnPlay">
            <summary>
            <para>Fired when the paused property is changed from true to false, as a result of the <see cref="M:BrowserAPI.IHTMLMediaElementInProcess.Play(System.Threading.CancellationToken)">Play()</see> method, or the autoplay attribute.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnPause">
            <summary>
            <para>Fired when a request to pause play is handled and the activity has entered its paused state, most commonly occurring when the media's <see cref="!:HTMLMediaElement.Pause">Pause()</see> method is called.</para>
            <para>The event is sent once the <see cref="!:HTMLMediaElement.Pause">Pause()</see> method returns and after the media element's paused property has been changed to true.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnEnded">
            <summary>
            <para>Fired when playback stops when end of the media (&lt;audio&gt; and &lt;video&gt;) is reached or because no further data is available.</para>
            <para>This event occurs based upon HTMLMediaElement (&lt;audio&gt; and &lt;video&gt;) fire ended when playback reaches the end of the media.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnSeeking">
            <summary>
            <para>Fired when a seek operation starts, meaning the Boolean seeking attribute has changed to true and the media is seeking a new position.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnSeeked">
            <summary>
            <para>Fired when a seek operation completed, the current playback position has changed, and the Boolean seeking attribute is changed to false.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnTimeUpdate">
            <summary>
            <para>Fired when the time indicated by the currentTime attribute has been updated.</para>
            <para>
            The event frequency is dependent on the system load, but will be thrown between about 4Hz and 66Hz (assuming the event handlers don't take longer than 250ms to run).
            User agents are encouraged to vary the frequency of the event based on the system load and the average cost of processing the event each time,
            so that the UI updates are not any more frequent than the user agent can comfortably handle while decoding the video.
            </para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnVolumeChange">
            <summary>
            <para>Fired when either the volume attribute or the muted attribute has changed.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnRateChange">
            <summary>
            <para>Fired when the playback rate has changed.</para>
            <para>This event is not cancelable and does not bubble.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IHTMLMediaElementInProcess.OnDurationChange">
            <summary>
            Fired when the duration attribute has been updated.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Src">
            <summary>
            <para>A string that reflects the src HTML attribute, which contains the URL of a media resource to use.</para>
            <para>
            Note: The best way to know the URL of the media resource currently in active use in this element is to look at the value of the currentSrc attribute,
            which also takes into account selection of a best or preferred media resource from a list provided in an HTMLSourceElement (which represents a &lt;source&gt; element).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.SrcObject">
            <summary>
            A MediaStream representing the media to play or that has played in the current HTMLMediaElement, or null if not assigned.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Controls">
            <summary>
            A boolean that reflects the controls HTML attribute, indicating whether user interface items for controlling the resource should be displayed.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Autoplay">
            <summary>
            <para>A boolean value that reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.</para>
            <para>A media element whose source is a MediaStream and whose autoplay property is true will begin playback when it becomes active(that is, when MediaStream.active becomes true).</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Loop">
            <summary>
            A boolean that reflects the loop HTML attribute, which indicates whether the media element should start over when it reaches the end.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.DefaultMuted">
            <summary>
            <para>A boolean that reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default.</para>
            <para>This property has no dynamic effect. To mute and unmute the audio output, use the muted property.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Preload">
            <summary>
            <para>A string that reflects the preload HTML attribute, indicating what data should be preloaded, if any.</para>
            <para>
            Possible values are:<br />
            - "none": Indicates that the media should not be preloaded.<br />
            - "metadata": Indicates that only media metadata (e.g. length) is fetched.<br />
            - "auto": Indicates that the whole media file can be downloaded, even if the user is not expected to use it.<br />
            - "": A synonym of the auto value.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.CurrentSrc">
            <summary>
            <para>Returns a string with the absolute URL of the chosen media resource.</para>
            <para>This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.CurrentTime">
            <summary>
            <para>A double-precision floating-point value indicating the current playback time in seconds.</para>
            <para>
            if the media has not started to play and has not been seeked, this value is the media's initial playback time.
            Setting this value seeks the media to the new time. The time is specified relative to the media's timeline.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Duration">
            <summary>
            <para>A read-only double-precision floating-point value indicating the total duration of the media in seconds.</para>
            <para>
            If no media data is available, the returned value is NaN.<br />
            If the media is of indefinite length (such as streamed live media, a WebRTC call's media, or similar), the value is +Infinity.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Seekable">
            <summary>
            Returns a TimeRanges object that contains the time ranges that the user is able to seek to.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Muted">
            <summary>
            <para>A boolean that determines whether audio is muted. true if the audio is muted and false otherwise.</para>
            <para>true means muted and false means not muted.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Volume">
            <summary>
            A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Paused">
            <summary>
            <para>Returns a boolean that indicates whether the media element is paused.</para>
            <para>true is paused and false is not paused.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Ended">
            <summary>
            <para>Returns a boolean that indicates whether the media element has finished playing.</para>
            <para>true if the media contained in the element has finished playing.</para>
            <para>If the source of the media is a MediaStream, this value is true if the value of the stream's active property is false.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Seeking">
            <summary>
            Returns a boolean that indicates whether the media is in the process of seeking to a new position.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.ReadyState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the readiness state of the media.</para>
            <para>
            Possible values are:<br />
            0 = HAVE_NOTHING: No information is available about the media resource.<br />
            1 = HAVE_METADATA: Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.<br />
            2 = HAVE_CURRENT_DATA: Data is available for the current playback position, but not enough to actually play more than one frame.<br />
            3 = HAVE_FUTURE_DATA: Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).<br />
            4 = HAVE_ENOUGH_DATA: Enough data is available—and the download rate is high enough—that the media can be played through to the end without interruption.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.NetworkState">
            <summary>
            <para>Returns a unsigned short (enumeration) indicating the current state of fetching the media over the network.</para>
            <para>
            Possible values are:<br />
            0 = NETWORK_EMPTY: There is no data yet. Also, readyState is HAVE_NOTHING.<br />
            1 = NETWORK_IDLE: HTMLMediaElement is active and has selected a resource, but is not using the network.<br />
            2 = NETWORK_LOADING: The browser is downloading HTMLMediaElement data.<br />
            3 = NETWORK_NO_SOURCE: No HTMLMediaElement src found.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Buffered">
            <summary>
            Returns a TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.Played">
            <summary>
            Returns a TimeRanges object that contains the ranges of the media source that the browser has played, if any.
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.PlaybackRate">
            <summary>
            <para>A double that indicates the rate at which the media is being played back.</para>
            <para>
            This is used to implement user controls for fast forward, slow motion, and so forth.<br />
            The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.
            </para>
            <para>A negative playbackRate value indicates that the media should be played backwards, but support for this is not yet widespread.</para>
            <para>The audio is muted when the fast forward or slow motion is outside a useful range(for example, Gecko mutes the sound outside the range 0.25 to 4.0).</para>
            <para>The pitch of the audio is corrected by default. You can disable pitch correction using the HTMLMediaElement.preservesPitch property.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.DefaultPlaybackRate">
            <summary>
            <para>A double indicating the default playback rate for the media.</para>
            <para>A double. 1.0 is "normal speed," values lower than 1.0 make the media play slower than normal, higher values make it play faster.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.CrossOrigin">
            <summary>
            <para>A string indicating the CORS setting for this media element. See <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin">CORS settings attributes</see> for details.</para>
            <para>
            Possible values are:<br />
            "anonymous":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>same-origin</i> credentials mode.
            This means that CORS is enabled and credentials are sent if the resource is fetched from the same origin from which the document was loaded.<br />
            "use-credentials":
            Requests sent by the HTMLMediaElement will use the <i>cors</i> mode and the <i>include</i> credentials mode.
            All resources requests by the element will use CORS, regardless of what domain the fetch is from.<br />
            "" (or any other value):
            The same as specifing as "anonymous".
            </para>
            <para>If the <i>crossOrigin</i> property is not specified, the resource is fetched without CORS (the <i>no-cors</i> mode and the <i>same-origin</i> credentials mode).</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.PreservesPitch">
            <summary>
            <para>
            A boolean value that determines if the pitch of the sound will be preserved.<br />
            If set to false, the pitch will adjust to the speed of the audio.</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IHTMLMediaElementInProcess.DisableRemotePlayback">
            <summary>
            <para>A boolean that sets or returns the remote playback state, indicating whether the media element is allowed to have a remote playback UI.</para>
            <para>false means "not disabled", which means "enabled"</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElementInProcess.Pause">
            play() is declared in HTMLMediaElementBase
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElementInProcess.Load">
            <summary>
            Resets the media to the beginning and selects the best available source from the sources provided using the <i>src</i> attribute or the <i>&lt;source&gt;</i> element.
            </summary>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElementInProcess.FastSeek(System.Double)">
            <summary>
            <para>Quickly seeks to the given time with low precision.</para>
            <para>Note: If you need to seek with precision, you should set HTMLMediaElement.currentTime instead.</para>
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:BrowserAPI.IHTMLMediaElementInProcess.CanPlayType(System.String)">
            <summary>
            Given a string specifying a MIME media type (potentially with the codecs parameter included), canPlayType() returns the string<br />
            - "probably", if the media should be playable<br />
            - "maybe", if there's not enough information to determine whether the media will play or not<br />
            - "", if the media cannot be played
            </summary>
            <param name="type">A string specifying the MIME type of the media and (optionally) a codecs parameter containing a comma-separated list of the supported codecs.</param>
            <returns>"probably", "maybe" or ""</returns>
        </member>
        <member name="T:BrowserAPI.ILanguage">
            <summary>
            This interface is a collection of language related functionalities,
            for example <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language">navigator.language</see>
            or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/lang">document.documentElement.lang</see> attribute.<br />
            It is not an official API.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILanguage.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>Returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ILanguage.GetBrowserLanguage(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILanguage.BrowserLanguage" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ILanguage.BrowserLanguages">
            <summary>
            <para>navigator.languages</para>
            <para>
            Returns an array of strings representing the languages known to the user, by order of preference.
            The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47).
            In the returned array they are ordered by preference with the most preferred language first.
            </para>
            <para>The value of navigator.language is the first element of the returned array.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ILanguage.GetBrowserLanguages(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILanguage.BrowserLanguages" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ILanguage.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>The content of the "lang" attribute on the html tag.</para>
            <para>language abbreviation: e.g. "en", "fr", "es", "de"</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.ILanguage.GetHtmlLanguage(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILanguage.HtmlLanguage" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILanguage.SetHtmlLanguage(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILanguage.HtmlLanguage" />
            <param name="language">language abbreviation: e.g. "en", "fr", "es", "de"</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ILanguageInProcess">
            <summary>
            This interface is a collection of language related functionalities,
            for example <see href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language">navigator.language</see>
            or <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Global_attributes/lang">document.documentElement.lang</see> attribute.<br />
            It is not an official API.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILanguageInProcess.BrowserLanguage">
            <summary>
            <para>navigator.language</para>
            <para>Returns a string representing the preferred language of the user, usually the language of the browser UI. Examples of valid language codes include "en", "en-US", "fr", "fr-FR", "es-ES", etc.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.ILanguageInProcess.BrowserLanguages">
            <summary>
            <para>navigator.languages</para>
            <para>
            Returns an array of strings representing the languages known to the user, by order of preference.
            The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47).
            In the returned array they are ordered by preference with the most preferred language first.
            </para>
            <para>The value of navigator.language is the first element of the returned array.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.ILanguageInProcess.HtmlLanguage">
            <summary>
            <para>document.documentElement.lang</para>
            <para>The content of the "lang" attribute on the html tag.</para>
            <para>language abbreviation: e.g. "en", "fr", "es", "de"</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.ILocalStorage">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILocalStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILocalStorage.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ILocalStorageInProcess">
            <summary>
            The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin;<br />
            the stored data is saved across browser sessions.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILocalStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in localStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in localStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to localStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from localStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.ILocalStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of localStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.IMediaDevices">
            <summary>
            The <i>MediaDevices</i> interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
            In essence, it lets you obtain access to any hardware source of media data.
            </summary>
        </member>
        <member name="P:BrowserAPI.IMediaDevices.SupportedConstraints">
            <summary>
            Returns an object based on the MediaTrackSupportedConstraints dictionary,
            whose member fields each specify one of the constrainable properties the user agent understands.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetSupportedConstraints(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaDevices.SupportedConstraints" />
            <param name="cancellationToken"></param>
            <returns>
            A new object based on the MediaTrackSupportedConstraints dictionary listing the constraints supported by the user agent.
            Because only constraints supported by the user agent are included in the list, each of these Boolean properties has the value true.
            </returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Prompts the user for permission to use a media input which produces a MediaStream with tracks containing the requested types of media.</para>
            <para>
            That stream can include, for example, a video track (produced by either a hardware or virtual video source such as a camera, video recording device, screen sharing service, and so forth),
            an audio track (similarly, produced by a physical or virtual audio source like a microphone, A/D converter, or the like),
            and possibly other track types.
            </para>
            <para>
            It returns a Promise that resolves to a MediaStream object.
            If the user denies permission, or matching media is not available, then the promise is rejected with NotAllowedError or NotFoundError DOMException respectively.
            </para>
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetUserMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetUserMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetUserMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevices.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            With the user's permission through a prompt, turns on a camera and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input.
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetDisplayMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevices.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevices.EnumerateDevices(System.Threading.CancellationToken)">
            <summary>
            <para>
            Requests a list of the currently available media input and output devices, such as microphones, cameras, headsets, and so forth.
            The returned Promise is resolved with an array of MediaDeviceInfo objects describing the devices.
            </para>
            <para>
            The returned list will omit any devices that are blocked by the document Permission Policy: microphone, camera, speaker-selection(for output devices), and so on.
            Access to particular non-default devices is also gated by the Permissions API, and the list will omit devices for which the user has not granted explicit permission.
            </para>
            </summary>
            <returns>
            <para>
            A Promise that is fulfilled with an array of MediaDeviceInfo objects. Each object in the array describes one of the available media input and output devices.
            The order is significant — the default capture devices will be listed first.
            </para>
            <para>Other than default devices, only devices for which permission has been granted are "available".</para>
            <para>If the media device is an input device, an InputDeviceInfo object will be returned instead.</para>
            <para>If enumeration fails, the promise is rejected.</para>
            </returns>
        </member>
        <member name="T:BrowserAPI.IMediaDevicesInProcess">
            <summary>
            The <i>MediaDevices</i> interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
            In essence, it lets you obtain access to any hardware source of media data.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.EnumerateDevices(System.Threading.CancellationToken)">
            <summary>
            <para>
            Requests a list of the currently available media input and output devices, such as microphones, cameras, headsets, and so forth.
            The returned Promise is resolved with an array of MediaDeviceInfo objects describing the devices.
            </para>
            <para>
            The returned list will omit any devices that are blocked by the document Permission Policy: microphone, camera, speaker-selection(for output devices), and so on.
            Access to particular non-default devices is also gated by the Permissions API, and the list will omit devices for which the user has not granted explicit permission.
            </para>
            </summary>
            <returns>
            <para>
            A Promise that is fulfilled with an array of MediaDeviceInfo objects. Each object in the array describes one of the available media input and output devices.
            The order is significant — the default capture devices will be listed first.
            </para>
            <para>Other than default devices, only devices for which permission has been granted are "available".</para>
            <para>If the media device is an input device, an InputDeviceInfo object will be returned instead.</para>
            <para>If enumeration fails, the promise is rejected.</para>
            </returns>
        </member>
        <member name="P:BrowserAPI.IMediaDevicesInProcess.SupportedConstraints">
            <summary>
            Returns an object based on the MediaTrackSupportedConstraints dictionary,
            whose member fields each specify one of the constrainable properties the user agent understands.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Prompts the user for permission to use a media input which produces a MediaStream with tracks containing the requested types of media.</para>
            <para>
            That stream can include, for example, a video track (produced by either a hardware or virtual video source such as a camera, video recording device, screen sharing service, and so forth),
            an audio track (similarly, produced by a physical or virtual audio source like a microphone, A/D converter, or the like),
            and possibly other track types.
            </para>
            <para>
            It returns a Promise that resolves to a MediaStream object.
            If the user denies permission, or matching media is not available, then the promise is rejected with NotAllowedError or NotFoundError DOMException respectively.
            </para>
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetUserMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetUserMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetUserMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevicesInProcess.GetUserMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise whose fulfillment handler receives a MediaStream object when the requested media has successfully been obtained.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            With the user's permission through a prompt, turns on a camera and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input.
            </summary>
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A flag that indicates a video track is included to the stream.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetDisplayMedia(System.Boolean,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A flag that indicates an audio track is included to the stream.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="M:BrowserAPI.IMediaDevicesInProcess.GetDisplayMedia(BrowserAPI.MediaTrackConstraints,BrowserAPI.MediaTrackConstraints,System.Threading.CancellationToken)">
            <inheritdoc cref="M:BrowserAPI.IMediaDevicesInProcess.GetDisplayMedia(System.Boolean,System.Boolean,System.Threading.CancellationToken)" />
            <param name="audio">A constraints object that holds more detailed information about the requirements for the audio.</param>
            <param name="video">A constraints object that holds more detailed information about the requirements for the video.</param>
            <param name="cancellationToken"></param>
            <returns>A Promise that resolves to a MediaStream containing a video track whose contents come from a user-selected screen area, as well as an optional audio track.</returns>
        </member>
        <member name="T:BrowserAPI.IMediaRecorder">
            <summary>
            <para>The <i>MediaRecorder</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see> provides functionality to easily record media.</para>
            <para>It is created using the <see cref="M:BrowserAPI.IMediaStream.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">CreateRecorder() method</see>.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IMediaRecorder.MimeType">
            <summary>
            <para>
            The <i>mimeType</i> read-only property of the MediaRecorder interface returns the <see href="https://developer.mozilla.org/en-US/docs/Glossary/MIME">MIME</see> media type that was specified when creating the MediaRecorder object,
            or, if none was specified, which was chosen by the browser.
            This is the file format of the file that would result from writing all of the recorded data to disk.
            </para>
            <para>
            Keep in mind that not all codecs are supported by a given container;
            if you write media using a codec that is not supported by a given media container, the resulting file may not work reliably if at all when you try to play it back.
            See our <see href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats">media type and format guide</see> for information about container and codec support across browsers.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.GetMimeType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaRecorder.MimeType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IMediaRecorder.State">
            <summary>
            <para>The <i>state</i> read-only property of the MediaRecorder interface returns the current state of the current MediaRecorder object:</para>
            <para>
            "inactive" - Recording is not occurring — it has either not been started yet, or it has been started and then stopped.<br />
            "recording" - Recording has been started and the user agent is capturing data.<br />
            "paused" - Recording has been started, then paused, but not yet stopped or resumed.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaRecorder.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IMediaRecorder.Stream">
            <summary>
            The <i>stream</i> read-only property of the MediaRecorder interface returns the stream that was passed into the <see cref="M:BrowserAPI.IMediaStream.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">CreateRecorder() method</see> when the MediaRecorder was created.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.GetStream(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaRecorder.Stream" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IMediaRecorder.AudioBitsPerSecond">
            <summary>
            The <i>audioBitsPerSecond</i> read-only property of the MediaRecorder interface returns the audio encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor (if it was provided).
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.GetAudioBitsPerSecond(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaRecorder.AudioBitsPerSecond" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IMediaRecorder.VideoBitsPerSecond">
            <summary>
            The <i>videoBitsPerSecond</i> read-only property of the MediaRecorder interface returns the video encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor, if it was provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.GetVideoBitsPerSecond(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaRecorder.VideoBitsPerSecond" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.Start(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Begins recording media; this method can optionally be passed a timeslice argument with a value in milliseconds.
            If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.
            </summary>
            <param name="timeslice">
            <para>
            The number of milliseconds to record into each Blob.
            If this parameter isn't included (a value less or equal 0), the entire media duration is recorded into a single Blob unless the requestData() method is called to obtain the Blob
            and trigger the creation of a new Blob into which the media continues to be recorded.
            </para>
            <para>Note: Like other time values in web APIs, timeslice is not exact and the real intervals may be slightly longer due to other pending tasks before the creation of the next blob.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.Stop(System.Threading.CancellationToken)">
            <summary>
            Stops recording, at which point a dataavailable event containing the final Blob of saved data is fired. No more recording occurs.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.Resume(System.Threading.CancellationToken)">
            <summary>
            Resumes recording of media after having been paused.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.Pause(System.Threading.CancellationToken)">
            <summary>
            Pauses the recording of media.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.RequestData(System.Threading.CancellationToken)">
            <summary>
            Requests a Blob containing the saved data received thus far (or since the last time requestData() was called.
            After calling this method, recording continues, but in a new Blob.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorder.IsTypeSupported(System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>isTypeSupported()</i> static method of the MediaRecorder interface returns a Boolean which is true if the MIME media type specified is one the user agent should be able to successfully record.
            </summary>
            <remarks>In C# this method is not static because it needs an reference to the JS-module.</remarks>
            <param name="mimeType"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IMediaRecorder.OnDataAvailable">
            <summary>
            <para>
            Fires periodically each time timeslice milliseconds of media have been recorded (or when the entire media has been recorded, if timeslice wasn't specified).
            The event, of type BlobEvent, contains the recorded media in its data property.
            </para>
            <para>Parameter is the recorded binary data.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorder.OnError">
            <summary>
            <para>
            Fired when there are fatal errors that stop recording.
            The received event is based on the MediaRecorderErrorEvent interface, whose error property contains a DOMException that describes the actual error that occurred.
            </para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorder.OnStart">
            <summary>
            Fired when media recording starts.
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorder.OnStop">
            <summary>
            Fired when media recording ends, either when the MediaStream ends, or after the MediaRecorder.stop() method is called.
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorder.OnResume">
            <summary>
            Fired when media recording resumes after being paused.
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorder.OnPause">
            <summary>
            Fired when media recording is paused.
            </summary>
        </member>
        <member name="T:BrowserAPI.IMediaRecorderInProcess">
            <summary>
            <para>The <i>MediaRecorder</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API">MediaStream Recording API</see> provides functionality to easily record media.</para>
            <para>It is created using the <see cref="M:BrowserAPI.IMediaStreamInProcess.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32)">CreateRecorder() method</see>.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="E:BrowserAPI.IMediaRecorderInProcess.OnDataAvailable">
            <summary>
            <para>
            Fires periodically each time timeslice milliseconds of media have been recorded (or when the entire media has been recorded, if timeslice wasn't specified).
            The event, of type BlobEvent, contains the recorded media in its data property.
            </para>
            <para>Parameter is the recorded binary data.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorderInProcess.OnError">
            <summary>
            <para>
            Fired when there are fatal errors that stop recording.
            The received event is based on the MediaRecorderErrorEvent interface, whose error property contains a DOMException that describes the actual error that occurred.
            </para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorderInProcess.OnStart">
            <summary>
            Fired when media recording starts.
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorderInProcess.OnStop">
            <summary>
            Fired when media recording ends, either when the MediaStream ends, or after the MediaRecorder.stop() method is called.
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorderInProcess.OnResume">
            <summary>
            Fired when media recording resumes after being paused.
            </summary>
        </member>
        <member name="E:BrowserAPI.IMediaRecorderInProcess.OnPause">
            <summary>
            Fired when media recording is paused.
            </summary>
        </member>
        <member name="P:BrowserAPI.IMediaRecorderInProcess.MimeType">
            <summary>
            <para>
            The <i>mimeType</i> read-only property of the MediaRecorder interface returns the <see href="https://developer.mozilla.org/en-US/docs/Glossary/MIME">MIME</see> media type that was specified when creating the MediaRecorder object,
            or, if none was specified, which was chosen by the browser.
            This is the file format of the file that would result from writing all of the recorded data to disk.
            </para>
            <para>
            Keep in mind that not all codecs are supported by a given container;
            if you write media using a codec that is not supported by a given media container, the resulting file may not work reliably if at all when you try to play it back.
            See our <see href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats">media type and format guide</see> for information about container and codec support across browsers.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IMediaRecorderInProcess.State">
            <summary>
            <para>The <i>state</i> read-only property of the MediaRecorder interface returns the current state of the current MediaRecorder object:</para>
            <para>
            "inactive" - Recording is not occurring — it has either not been started yet, or it has been started and then stopped.<br />
            "recording" - Recording has been started and the user agent is capturing data.<br />
            "paused" - Recording has been started, then paused, but not yet stopped or resumed.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IMediaRecorderInProcess.Stream">
            <summary>
            The <i>stream</i> read-only property of the MediaRecorder interface returns the stream that was passed into the <see cref="M:BrowserAPI.IMediaStreamInProcess.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32)">CreateRecorder() method</see> when the MediaRecorder was created.
            </summary>
        </member>
        <member name="P:BrowserAPI.IMediaRecorderInProcess.AudioBitsPerSecond">
            <summary>
            The <i>videoBitsPerSecond</i> read-only property of the MediaRecorder interface returns the video encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor, if it was provided.
            </summary>
        </member>
        <member name="P:BrowserAPI.IMediaRecorderInProcess.VideoBitsPerSecond">
            <summary>
            The <i>videoBitsPerSecond</i> read-only property of the MediaRecorder interface returns the video encoding bit rate in use.<br />
            This may differ from the bit rate specified in the constructor, if it was provided.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaRecorderInProcess.Start(System.Int32)">
            <summary>
            Begins recording media; this method can optionally be passed a timeslice argument with a value in milliseconds.
            If this is specified, the media will be captured in separate chunks of that duration, rather than the default behavior of recording the media in a single large chunk.
            </summary>
            <param name="timeslice">
            <para>
            The number of milliseconds to record into each Blob.
            If this parameter isn't included (a value less or equal 0), the entire media duration is recorded into a single Blob unless the requestData() method is called to obtain the Blob
            and trigger the creation of a new Blob into which the media continues to be recorded.
            </para>
            <para>Note: Like other time values in web APIs, timeslice is not exact and the real intervals may be slightly longer due to other pending tasks before the creation of the next blob.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorderInProcess.Stop">
            <summary>
            Stops recording, at which point a dataavailable event containing the final Blob of saved data is fired. No more recording occurs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorderInProcess.Resume">
            <summary>
            Resumes recording of media after having been paused.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorderInProcess.Pause">
            <summary>
            Pauses the recording of media.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorderInProcess.RequestData">
            <summary>
            Requests a Blob containing the saved data received thus far (or since the last time requestData() was called.
            After calling this method, recording continues, but in a new Blob.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaRecorderInProcess.IsTypeSupported(System.String)">
            <summary>
            The <i>isTypeSupported()</i> static method of the MediaRecorder interface returns a Boolean which is true if the MIME media type specified is one the user agent should be able to successfully record.
            </summary>
            <remarks>In C# this method is not static because it needs an reference to the JS-module.</remarks>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IMediaStream">
            <summary>
            The <i>MediaStream</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> represents a stream of media content.
            A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</see>.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IMediaStream.Active">
            <summary>
            A Boolean value that returns true if the MediaStream is active, or false otherwise.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaStream.GetActive(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaStream.Active" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IMediaStream.Id">
            <summary>
            A string containing a 36-character universally unique identifier (UUID) for the object.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaStream.GetId(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMediaStream.Id" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IMediaStream.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new MediaRecorder object, given a MediaStream to record.
            Options are available to do things like set the container's MIME type (such as "video/webm" or "video/mp4") and the bit rates of the audio and video tracks or a single overall bit rate.
            </summary>
            <remarks>
            <para>If bits per second values are not specified for video and/or audio, the default adopted for video is 2.5Mbps, while the audio default is adaptive, depending upon the sample rate and the number of channels.</para>
            <para>Video resolution, frame rate and similar settings are specified as constraints when calling getUserMedia(), not here in the MediaStream Recording API.</para>
            </remarks>
            <param name="mimeType">A MIME type specifying the format for the resulting media; you may specify the container format (the browser will select its preferred codecs for audio and/or video), or you may use the codecs parameter and/or the profiles parameter to provide detailed information about which codecs to use and how to configure them. Applications can check in advance if a mimeType is supported by the user agent by calling MediaRecorder.isTypeSupported(). Defaults to an empty string.</param>
            <param name="audioBitsPerSecond">The chosen bitrate for the audio component of the media.</param>
            <param name="videoBitsPerSecond">The chosen bitrate for the video component of the media.</param>
            <param name="bitsPerSecond">The chosen bitrate for the audio and video components of the media. This can be specified instead of the above two properties. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IMediaStreamInProcess">
            <summary>
            The <i>MediaStream</i> interface of the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Capture_and_Streams_API">Media Capture and Streams API</see> represents a stream of media content.
            A stream consists of several tracks, such as video or audio tracks. Each track is specified as an instance of <see href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</see>.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IMediaStreamInProcess.Active">
            <summary>
            A Boolean value that returns true if the MediaStream is active, or false otherwise.
            </summary>
        </member>
        <member name="P:BrowserAPI.IMediaStreamInProcess.Id">
            <summary>
            A string containing a 36-character universally unique identifier (UUID) for the object.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMediaStreamInProcess.CreateRecorder(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new MediaRecorder object, given a MediaStream to record.
            Options are available to do things like set the container's MIME type (such as "video/webm" or "video/mp4") and the bit rates of the audio and video tracks or a single overall bit rate.
            </summary>
            <remarks>
            <para>If bits per second values are not specified for video and/or audio, the default adopted for video is 2.5Mbps, while the audio default is adaptive, depending upon the sample rate and the number of channels.</para>
            <para>Video resolution, frame rate and similar settings are specified as constraints when calling getUserMedia(), not here in the MediaStream Recording API.</para>
            </remarks>
            <param name="mimeType">A MIME type specifying the format for the resulting media; you may specify the container format (the browser will select its preferred codecs for audio and/or video), or you may use the codecs parameter and/or the profiles parameter to provide detailed information about which codecs to use and how to configure them. Applications can check in advance if a mimeType is supported by the user agent by calling MediaRecorder.isTypeSupported(). Defaults to an empty string.</param>
            <param name="audioBitsPerSecond">The chosen bitrate for the audio component of the media.</param>
            <param name="videoBitsPerSecond">The chosen bitrate for the video component of the media.</param>
            <param name="bitsPerSecond">The chosen bitrate for the audio and video components of the media. This can be specified instead of the above two properties. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.</param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.INetworkInformation">
            <summary>
            The NetworkInformation interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.
            The NetworkInformation interface cannot be instantiated. It is instead accessed through the connection property of the Navigator interface or the WorkerNavigator interface.
            </summary>
        </member>
        <member name="P:BrowserAPI.INetworkInformation.OnLine">
            <summary>
            <para>
            The onLine property of the Navigator interface returns whether the device is connected to the network, with true meaning online and false meaning offline.
            The property's value changes after the browser checks its network connection, usually when the user follows links or when a script requests a remote page.
            For example, the property should return false when users click links soon after they lose internet connection.
            When its value changes, an online or offline event is fired on the window.
            </para>
            <para>
            Browsers and operating systems leverage different heuristics to determine whether the device is online.
            In general, connection to LAN is considered online, even though the LAN may not have Internet access.
            For example, the computer may be running a virtualization software that has virtual ethernet adapters that are always "connected".
            On Windows, the online status is determined by whether it can reach a Microsoft home server, which may be blocked by firewalls or VPNs, even if the computer has Internet access.
            Therefore, this property is inherently unreliable, and you should not disable features based on the online status, only provide hints when the user may seem offline.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.GetOnLine(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.INetworkInformation.OnLine" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.INetworkInformation.Downlink">
            <summary>
            Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.
            This value is based on recently observed application layer throughput across recently active connections, excluding connections made to a private address space.
            In the absence of recent bandwidth measurement data, the attribute value is determined by the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.GetDownlink(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.INetworkInformation.Downlink" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.INetworkInformation.DownlinkMax">
            <summary>
            Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.GetDownlinkMax(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.INetworkInformation.DownlinkMax" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.INetworkInformation.EffectiveType">
            <summary>
            Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'.
            This value is determined using a combination of recently observed round-trip time and downlink values.
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.GetEffectiveType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.INetworkInformation.EffectiveType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.INetworkInformation.Type">
            <summary>
            Returns the type of connection a device is using to communicate with the network. It will be one of the following values:<br />
            "bluetooth", "cellular", "ethernet", "none", "wifi", "wimax", "other", "unknown"
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.GetType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.INetworkInformation.Type" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.INetworkInformation.RTT">
            <summary>
            Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.
            This value is based on recently observed application-layer RTT measurements across recently active connections.
            It excludes connections made to a private address space.
            If no recent measurement data is available, the value is based on the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.GetRTT(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.INetworkInformation.RTT" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.INetworkInformation.SaveData">
            <summary>
            Returns true if the user has set a reduced data usage option on the user agent.
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.GetSaveData(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.INetworkInformation.SaveData" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.INetworkInformation.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="E:BrowserAPI.INetworkInformation.OnOnline">
            <summary>
            Fired when the browser has gained access to the network and the value of <i>navigator.onLine</i> has switched to true.
            </summary>
        </member>
        <member name="E:BrowserAPI.INetworkInformation.OnOffline">
            <summary>
            Fired when the browser has lost access to the network and the value of <i>navigator.onLine</i> has switched to false.
            </summary>
        </member>
        <member name="E:BrowserAPI.INetworkInformation.OnChange">
            <summary>
            Is fired when connection information changes, and the event is received by the NetworkInformation object.
            </summary>
            <remarks>That does not include the property <i>navigator.onLine</i>, for tracking changes of that property use the <see cref="E:BrowserAPI.INetworkInformation.OnOnline"/>/<see cref="E:BrowserAPI.INetworkInformation.OnOffline"/> events.</remarks>
        </member>
        <member name="T:BrowserAPI.INetworkInformationInProcess">
            <summary>
            The NetworkInformation interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.
            The NetworkInformation interface cannot be instantiated. It is instead accessed through the connection property of the Navigator interface or the WorkerNavigator interface.
            </summary>
        </member>
        <member name="M:BrowserAPI.INetworkInformationInProcess.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="E:BrowserAPI.INetworkInformationInProcess.OnOnline">
            <summary>
            Fired when the browser has gained access to the network and the value of <i>navigator.onLine</i> has switched to true.
            </summary>
        </member>
        <member name="E:BrowserAPI.INetworkInformationInProcess.OnOffline">
            <summary>
            Fired when the browser has lost access to the network and the value of <i>navigator.onLine</i> has switched to false.
            </summary>
        </member>
        <member name="E:BrowserAPI.INetworkInformationInProcess.OnChange">
            <summary>
            Is fired when connection information changes, and the event is received by the NetworkInformation object.
            </summary>
            <remarks>That does not include the property <i>navigator.onLine</i>, for tracking changes of that property use the <see cref="E:BrowserAPI.INetworkInformationInProcess.OnOnline"/>/<see cref="E:BrowserAPI.INetworkInformationInProcess.OnOffline"/> events.</remarks>
        </member>
        <member name="P:BrowserAPI.INetworkInformationInProcess.OnLine">
            <summary>
            <para>
            The onLine property of the Navigator interface returns whether the device is connected to the network, with true meaning online and false meaning offline.
            The property's value changes after the browser checks its network connection, usually when the user follows links or when a script requests a remote page.
            For example, the property should return false when users click links soon after they lose internet connection.
            When its value changes, an online or offline event is fired on the window.
            </para>
            <para>
            Browsers and operating systems leverage different heuristics to determine whether the device is online.
            In general, connection to LAN is considered online, even though the LAN may not have Internet access.
            For example, the computer may be running a virtualization software that has virtual ethernet adapters that are always "connected".
            On Windows, the online status is determined by whether it can reach a Microsoft home server, which may be blocked by firewalls or VPNs, even if the computer has Internet access.
            Therefore, this property is inherently unreliable, and you should not disable features based on the online status, only provide hints when the user may seem offline.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.INetworkInformationInProcess.Downlink">
            <summary>
            Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.
            This value is based on recently observed application layer throughput across recently active connections, excluding connections made to a private address space.
            In the absence of recent bandwidth measurement data, the attribute value is determined by the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="P:BrowserAPI.INetworkInformationInProcess.DownlinkMax">
            <summary>
            Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.
            </summary>
        </member>
        <member name="P:BrowserAPI.INetworkInformationInProcess.EffectiveType">
            <summary>
            Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'.
            This value is determined using a combination of recently observed round-trip time and downlink values.
            </summary>
        </member>
        <member name="P:BrowserAPI.INetworkInformationInProcess.Type">
            <summary>
            Returns the type of connection a device is using to communicate with the network. It will be one of the following values:<br />
            "bluetooth", "cellular", "ethernet", "none", "wifi", "wimax", "other", "unknown"
            </summary>
        </member>
        <member name="P:BrowserAPI.INetworkInformationInProcess.RTT">
            <summary>
            Returns the estimated effective round-trip time of the current connection, rounded to the nearest multiple of 25 milliseconds.
            This value is based on recently observed application-layer RTT measurements across recently active connections.
            It excludes connections made to a private address space.
            If no recent measurement data is available, the value is based on the properties of the underlying connection technology.
            </summary>
        </member>
        <member name="P:BrowserAPI.INetworkInformationInProcess.SaveData">
            <summary>
            Returns true if the user has set a reduced data usage option on the user agent.
            </summary>
        </member>
        <member name="T:BrowserAPI.IPermissions">
            <summary>
            <para>
            The Permissions API provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.
            For example, it can be used to determine if permission to access a particular feature or API has been granted, denied, or requires specific user permission.
            </para>
            <para>The <i>Permissions</i> interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IPermissions.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the user permission status for a given API.</para>
            <para>
            The user permission names are defined in the respective specifications for each feature.
            The permissions supported by different browser versions are listed in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions#browser_compatibility">compatibility data of the Permissions interface</see>.
            </para>
            </summary>
            <param name="name">
            <para>
            A string containing the name of the API whose permissions you want to query, such as camera, bluetooth, microphone, geolocation.<br />
            The returned Promise will reject with a TypeError if the permission name is not supported by the browser.
            </para>
            <para>
            The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#permission-aware_apis">Permission-aware APIs</see> are listed below:<br />
            "background-sync" - Background Synchronization API<br />
            "clipboard-read" - Clipboard API<br />
            "clipboard-write" - Clipboard API<br />
            "compute-pressure" - Compute Pressure API<br />
            "geolocation" - Geolocation API<br />
            "local-fonts" - Local Font Access API<br />
            "camera" - Media Capture and Streams API<br />
            "microphone" - Media Capture and Streams API<br />
            "notifications" - Notifications API<br />
            "payment-handler" - Payment Handler API<br />
            "push" - Push API<br />
            "screen-wake-lock" - Screen Wake Lock API<br />
            "accelerometer" - Sensor APIs<br />
            "gyroscope" - Sensor APIs<br />
            "magnetometer" - Sensor APIs<br />
            "ambient-light-sensor" - Sensor APIs<br />
            "storage-access" - Storage Access API<br />
            "top-level-storage-access" - Storage Access API<br />
            "persistent-storage" - Storage API<br />
            "bluetooth" - Web Bluetooth API<br />
            "midi" - Web MIDI API<br />
            "window-management" - Window Management API
            </para>
            </param>
            <param name="userVisibleOnly">
            <para>Only relevant for "push" permission.</para>
            <para>
            Indicates whether you want to show a notification for every message or be able to send silent push notifications.<br />
            The default is false.
            </para>
            </param>
            <param name="sysex">
            <para>Only relevant for "midi" permission.</para>
            <para>
            Indicates whether you need and/or receive system exclusive messages.<br />
            The default is false.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IPermissionsInProcess">
            <summary>
            <para>
            The Permissions API provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.
            For example, it can be used to determine if permission to access a particular feature or API has been granted, denied, or requires specific user permission.
            </para>
            <para>The <i>Permissions</i> interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IPermissionsInProcess.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the user permission status for a given API.</para>
            <para>
            The user permission names are defined in the respective specifications for each feature.
            The permissions supported by different browser versions are listed in the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions#browser_compatibility">compatibility data of the Permissions interface</see>.
            </para>
            </summary>
            <param name="name">
            <para>
            A string containing the name of the API whose permissions you want to query, such as camera, bluetooth, microphone, geolocation.<br />
            The returned Promise will reject with a TypeError if the permission name is not supported by the browser.
            </para>
            <para>
            The <see href="https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#permission-aware_apis">Permission-aware APIs</see> are listed below:<br />
            "background-sync" - Background Synchronization API<br />
            "clipboard-read" - Clipboard API<br />
            "clipboard-write" - Clipboard API<br />
            "compute-pressure" - Compute Pressure API<br />
            "geolocation" - Geolocation API<br />
            "local-fonts" - Local Font Access API<br />
            "camera" - Media Capture and Streams API<br />
            "microphone" - Media Capture and Streams API<br />
            "notifications" - Notifications API<br />
            "payment-handler" - Payment Handler API<br />
            "push" - Push API<br />
            "screen-wake-lock" - Screen Wake Lock API<br />
            "accelerometer" - Sensor APIs<br />
            "gyroscope" - Sensor APIs<br />
            "magnetometer" - Sensor APIs<br />
            "ambient-light-sensor" - Sensor APIs<br />
            "storage-access" - Storage Access API<br />
            "top-level-storage-access" - Storage Access API<br />
            "persistent-storage" - Storage API<br />
            "bluetooth" - Web Bluetooth API<br />
            "midi" - Web MIDI API<br />
            "window-management" - Window Management API
            </para>
            </param>
            <param name="userVisibleOnly">
            <para>Only relevant for "push" permission.</para>
            <para>
            Indicates whether you want to show a notification for every message or be able to send silent push notifications.<br />
            The default is false.
            </para>
            </param>
            <param name="sysex">
            <para>Only relevant for "midi" permission.</para>
            <para>
            Indicates whether you need and/or receive system exclusive messages.<br />
            The default is false.
            </para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IPermissionStatus">
            <summary>
            The <i>PermissionStatus</i> interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IPermissionStatus.Name">
            <summary>
            Returns the name of a requested permission, identical to the <i>name</i> passed to <see cref="M:BrowserAPI.IPermissions.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:BrowserAPI.IPermissionStatus.GetName(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IPermissionStatus.Name" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IPermissionStatus.State">
            <summary>
            Returns the state of a requested permission. This property returns one of<br />
            - "granted": The user, or the user agent on the user's behalf, has given express permission to use a powerful feature. The caller can use the feature possibly without having the user agent ask the user's permission.<br />
            - "denied": The user, or the user agent on the user's behalf, has denied access to this powerful feature. The caller can't use the feature.<br />
            - "prompt": The user has not given express permission to use the feature (i.e., it's the same as denied). It also means that if a caller attempts to use the feature, the user agent will either be prompting the user for permission or access to the feature will be denied.
            </summary>
        </member>
        <member name="M:BrowserAPI.IPermissionStatus.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IPermissionStatus.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IPermissionStatus.OnChange">
            <summary>
            Fires whenever the <i>State</i> property changes.
            </summary>
        </member>
        <member name="T:BrowserAPI.IPermissionStatusInProcess">
            <summary>
            The <i>PermissionStatus</i> interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="E:BrowserAPI.IPermissionStatusInProcess.OnChange">
            <summary>
            Fires whenever the <i>State</i> property changes.
            </summary>
        </member>
        <member name="P:BrowserAPI.IPermissionStatusInProcess.Name">
            <summary>
            Returns the name of a requested permission, identical to the <i>name</i> passed to <see cref="M:BrowserAPI.IPermissionsInProcess.Query(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:BrowserAPI.IPermissionStatusInProcess.State">
            <summary>
            Returns the state of a requested permission. This property returns one of<br />
            - "granted": The user, or the user agent on the user's behalf, has given express permission to use a powerful feature. The caller can use the feature possibly without having the user agent ask the user's permission.<br />
            - "denied": The user, or the user agent on the user's behalf, has denied access to this powerful feature. The caller can't use the feature.<br />
            - "prompt": The user has not given express permission to use the feature (i.e., it's the same as denied). It also means that if a caller attempts to use the feature, the user agent will either be prompting the user for permission or access to the feature will be denied.
            </summary>
        </member>
        <member name="T:BrowserAPI.ISensorAPI">
            <summary>
            The Sensor APIs are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateAmbientLightSensor(System.Double,System.Threading.CancellationToken)">
            <summary>
            The <i>AmbientLightSensor()</i> constructor creates a new AmbientLightSensor object, which returns the current light level or illuminance of the ambient light around the hosting device.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateGyroscope(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Gyroscope()</i> constructor creates a new Gyroscope object which provides on each reading the angular velocity of the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateAccelerometer(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Accelerometer()</i> constructor creates a new Accelerometer object which returns the acceleration of the device along all three axes at the time it is read.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateLinearAccelerationSensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>LinearAccelerationSensor()</i> constructor creates a new LinearAccelerationSensor object which provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateGravitySensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>GravitySensor()</i> constructor creates a new GravitySensor object which provides on each reading the gravity applied to the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateAbsoluteOrientationSensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>AbsoluteOrientationSensor()</i> constructor creates a new AbsoluteOrientationSensor object which describes the device's physical orientation in relation to the Earth's reference coordinate system.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateRelativeOrientationSensor(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>RelativeOrientationSensor()</i> constructor creates a new RelativeOrientationSensor object which describes the device's physical orientation.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateMagnetometer(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>Magnetometer()</i> constructor creates a new Magnetometer object which returns information about the magnetic field as detected by a device's primary magnetometer sensor.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPI.CreateUncalibratedMagnetometer(System.Double,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>The <i>UncalibratedMagnetometer()</i> constructor creates a new UncalibratedMagnetometer object which returns information about the uncalibrated magnetic field as detected by a device's primary magnetometer sensor.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <param name="cancellationToken"></param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="T:BrowserAPI.ISensorAPIInProcess">
            <summary>
            The Sensor APIs are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateAmbientLightSensor(System.Double)">
            <summary>
            The <i>AmbientLightSensor()</i> constructor creates a new AmbientLightSensor object, which returns the current light level or illuminance of the ambient light around the hosting device.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateGyroscope(System.Double,System.String)">
            <summary>
            The <i>Gyroscope()</i> constructor creates a new Gyroscope object which provides on each reading the angular velocity of the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateAccelerometer(System.Double,System.String)">
            <summary>
            The <i>Accelerometer()</i> constructor creates a new Accelerometer object which returns the acceleration of the device along all three axes at the time it is read.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateLinearAccelerationSensor(System.Double,System.String)">
            <summary>
            The <i>LinearAccelerationSensor()</i> constructor creates a new LinearAccelerationSensor object which provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateGravitySensor(System.Double,System.String)">
            <summary>
            The <i>GravitySensor()</i> constructor creates a new GravitySensor object which provides on each reading the gravity applied to the device along all three axes.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateAbsoluteOrientationSensor(System.Double,System.String)">
            <summary>
            The <i>AbsoluteOrientationSensor()</i> constructor creates a new AbsoluteOrientationSensor object which describes the device's physical orientation in relation to the Earth's reference coordinate system.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateRelativeOrientationSensor(System.Double,System.String)">
            <summary>
            The <i>RelativeOrientationSensor()</i> constructor creates a new RelativeOrientationSensor object which describes the device's physical orientation.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateMagnetometer(System.Double,System.String)">
            <summary>
            The <i>Magnetometer()</i> constructor creates a new Magnetometer object which returns information about the magnetic field as detected by a device's primary magnetometer sensor.
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="M:BrowserAPI.ISensorAPIInProcess.CreateUncalibratedMagnetometer(System.Double,System.String)">
            <summary>
            <para>The <i>UncalibratedMagnetometer()</i> constructor creates a new UncalibratedMagnetometer object which returns information about the uncalibrated magnetic field as detected by a device's primary magnetometer sensor.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <param name="frequency">The desired number of times per second a sample should be taken, meaning the number of times per second the reading event will be called.</param>
            <param name="referenceFrame">Either 'device' or 'screen'. The default is 'device'.</param>
            <returns>If not available (not supported by the browser or any other error), it returns null.</returns>
        </member>
        <member name="T:BrowserAPI.IAbsoluteOrientationSensor">
            <summary>
            <para>The <i>AbsoluteOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', 'gyroscope', and 'magnetometer' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IAbsoluteOrientationSensor.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.IAbsoluteOrientationSensor.GetQuaternion(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IAbsoluteOrientationSensor.Quaternion" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IAbsoluteOrientationSensor.PopulateMatrix(System.Threading.CancellationToken)">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IAbsoluteOrientationSensorInProcess">
            <summary>
            <para>The <i>AbsoluteOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', 'gyroscope', and 'magnetometer' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IAbsoluteOrientationSensorInProcess.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.IAbsoluteOrientationSensorInProcess.PopulateMatrix">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IAccelerometer">
            <summary>
            <para>The <i>Accelerometer</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IAccelerometer.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IAccelerometer.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IAccelerometer.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IAccelerometer.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IAccelerometer.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IAccelerometer.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IAccelerometer.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IAccelerometer.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IAccelerometer.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IAccelerometerInProcess">
            <summary>
            <para>The <i>Accelerometer</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IAccelerometerInProcess.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IAccelerometerInProcess.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IAccelerometerInProcess.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.IAmbientLightSensor">
            <summary>
            <para>The <i>AmbientLightSensor</i> interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.</para>
            <para>To use this sensor, the user must grant permission to the 'ambient-light-sensor' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IAmbientLightSensor.Illuminance">
            <summary>
            Returns the current light level in lux of the ambient light level around the hosting device.
            </summary>
        </member>
        <member name="M:BrowserAPI.IAmbientLightSensor.GetIlluminance(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IAmbientLightSensor.Illuminance" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IAmbientLightSensorInProcess">
            <summary>
            <para>The <i>AmbientLightSensor</i> interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.</para>
            <para>To use this sensor, the user must grant permission to the 'ambient-light-sensor' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IAmbientLightSensorInProcess.Illuminance">
            <summary>
            Returns the current light level in lux of the ambient light level around the hosting device.
            </summary>
        </member>
        <member name="T:BrowserAPI.IGravitySensor">
            <summary>
            <para>The <i>GravitySensor</i> interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IGravitySensor.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGravitySensor.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGravitySensor.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGravitySensor.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGravitySensor.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGravitySensor.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGravitySensor.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGravitySensor.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGravitySensor.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IGravitySensorInProcess">
            <summary>
            <para>The <i>GravitySensor</i> interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IGravitySensorInProcess.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IGravitySensorInProcess.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IGravitySensorInProcess.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.IGyroscope">
            <summary>
            <para>The <i>Gyroscope</i> interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'gyroscope' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IGyroscope.X">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGyroscope.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGyroscope.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGyroscope.Y">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGyroscope.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGyroscope.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IGyroscope.Z">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IGyroscope.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IGyroscope.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IGyroscopeInProcess">
            <summary>
            <para>The <i>Gyroscope</i> interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.</para>
            <para>To use this sensor, the user must grant permission to the 'gyroscope' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IGyroscopeInProcess.X">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IGyroscopeInProcess.Y">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IGyroscopeInProcess.Z">
            <summary>
            Returns a double, containing the angular velocity of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.ILinearAccelerationSensor">
            <summary>
            <para>The <i>LinearAccelerationSensor</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.ILinearAccelerationSensor.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.ILinearAccelerationSensor.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILinearAccelerationSensor.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ILinearAccelerationSensor.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.ILinearAccelerationSensor.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILinearAccelerationSensor.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ILinearAccelerationSensor.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.ILinearAccelerationSensor.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ILinearAccelerationSensor.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ILinearAccelerationSensorInProcess">
            <summary>
            <para>The <i>LinearAccelerationSensor</i> interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.ILinearAccelerationSensorInProcess.X">
            <summary>
            Returns a double containing the acceleration of the device along the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILinearAccelerationSensorInProcess.Y">
            <summary>
            Returns a double containing the acceleration of the device along the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.ILinearAccelerationSensorInProcess.Z">
            <summary>
            Returns a double containing the acceleration of the device along the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.IMagnetometer">
            <summary>
            <para>The <i>Magnetometer</i> interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IMagnetometer.X">
            <summary>
            Returns a double containing the magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMagnetometer.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMagnetometer.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IMagnetometer.Y">
            <summary>
            Returns a double containing the magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMagnetometer.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMagnetometer.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IMagnetometer.Z">
            <summary>
            Returns a double containing the magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IMagnetometer.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IMagnetometer.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IMagnetometerInProcess">
            <summary>
            <para>The <i>Magnetometer</i> interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IMagnetometerInProcess.X">
            <summary>
            Returns a double containing the magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IMagnetometerInProcess.Y">
            <summary>
            Returns a double containing the magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IMagnetometerInProcess.Z">
            <summary>
            Returns a double containing the magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.IRelativeOrientationSensor">
            <summary>
            <para>The <i>RelativeOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', and 'gyroscope' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IRelativeOrientationSensor.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.IRelativeOrientationSensor.GetQuaternion(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IRelativeOrientationSensor.Quaternion" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IRelativeOrientationSensor.PopulateMatrix(System.Threading.CancellationToken)">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IRelativeOrientationSensorInProcess">
            <summary>
            <para>The <i>RelativeOrientationSensor</i> interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.</para>
            <para>To use this sensor, the user must grant permission to the 'accelerometer', and 'gyroscope' device sensors through the Permissions API.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IRelativeOrientationSensorInProcess.Quaternion">
            <summary>
            Returns a unit quaternion representing the device's orientation.
            </summary>
        </member>
        <member name="M:BrowserAPI.IRelativeOrientationSensorInProcess.PopulateMatrix">
            <summary>
            Returns a rotation matrix based on the latest sensor reading.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ISensor">
            <summary>
            The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces.
            This interface cannot be used directly.
            Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISensor.Activated">
            <summary>
            Returns a boolean value indicating whether the sensor is active.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISensor.GetActivated(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ISensor.Activated" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ISensor.HasReading">
            <summary>
            Returns a boolean value indicating whether the sensor has a reading.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISensor.GetHasReading(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ISensor.HasReading" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.ISensor.Timestamp">
            <summary>
            Returns the timestamp of the latest sensor reading.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISensor.GetTimestamp(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ISensor.Timestamp" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISensor.Start(System.Threading.CancellationToken)">
            <summary>
            Activates one of the sensors based on Sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISensor.Stop(System.Threading.CancellationToken)">
            <summary>
            Deactivates one of the sensors based on Sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.ISensor.OnError">
            <summary>
            <para>
            Is fired when an exception occurs on a sensor.
            After this event has occurred, the Sensor object becomes idle. If the sensor was reading values, it will stop until it restarts.
            </para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.ISensor.OnActivate">
            <summary>
            Is fired when a sensor becomes activated. It means that it will start obtaining readings.
            </summary>
        </member>
        <member name="E:BrowserAPI.ISensor.OnReading">
            <summary>
            Is fired when a new reading is available on a sensor.
            </summary>
        </member>
        <member name="T:BrowserAPI.ISensorInProcess">
            <summary>
            The Sensor interface of the Sensor APIs is the base class for all the other sensor interfaces.
            This interface cannot be used directly.
            Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.
            </summary>
        </member>
        <member name="E:BrowserAPI.ISensorInProcess.OnError">
            <summary>
            <para>
            Is fired when an exception occurs on a sensor.
            After this event has occurred, the Sensor object becomes idle. If the sensor was reading values, it will stop until it restarts.
            </para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.ISensorInProcess.OnActivate">
            <summary>
            Is fired when a sensor becomes activated. It means that it will start obtaining readings.
            </summary>
        </member>
        <member name="E:BrowserAPI.ISensorInProcess.OnReading">
            <summary>
            Is fired when a new reading is available on a sensor.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISensorInProcess.Activated">
            <summary>
            Returns a boolean value indicating whether the sensor is active.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISensorInProcess.HasReading">
            <summary>
            Returns a boolean value indicating whether the sensor has a reading.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISensorInProcess.Timestamp">
            <summary>
            Returns the timestamp of the latest sensor reading.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISensorInProcess.Start">
            <summary>
            Activates one of the sensors based on Sensor.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISensorInProcess.Stop">
            <summary>
            Deactivates one of the sensors based on Sensor.
            </summary>
        </member>
        <member name="T:BrowserAPI.IUncalibratedMagnetometer">
            <summary>
            <para>The <i>UncalibratedMagnetometer</i> interface of the Sensor APIs provides information about the uncalibrated magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometer.X">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IUncalibratedMagnetometer.GetX(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IUncalibratedMagnetometer.X" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometer.Y">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IUncalibratedMagnetometer.GetY(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IUncalibratedMagnetometer.Y" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometer.Z">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IUncalibratedMagnetometer.GetZ(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IUncalibratedMagnetometer.Z" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometer.XBias">
            <summary>
            Returns a double representing the hard iron distortion correction around x axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IUncalibratedMagnetometer.GetXBias(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IUncalibratedMagnetometer.XBias" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometer.YBias">
            <summary>
            Returns a double representing the hard iron distortion correction around y axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IUncalibratedMagnetometer.GetYBias(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IUncalibratedMagnetometer.YBias" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometer.ZBias">
            <summary>
            Returns a double representing the hard iron distortion correction around z axis.
            </summary>
        </member>
        <member name="M:BrowserAPI.IUncalibratedMagnetometer.GetZBias(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IUncalibratedMagnetometer.ZBias" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IUncalibratedMagnetometerInProcess">
            <summary>
            <para>The <i>UncalibratedMagnetometer</i> interface of the Sensor APIs provides information about the uncalibrated magnetic field as detected by the device's primary magnetometer sensor.</para>
            <para>To use this sensor, the user must grant permission to the 'magnetometer' device sensor through the Permissions API.</para>
            <para>
            <i>Hard iron distortion</i> is created by objects that produce a magnetic field, such as magnetized iron.<br />
            <i>Soft iron distortion</i> stretches or distorts the magnetic field and is caused by metals such as nickel and iron.<br />
            The <i>calibrated magnetic field</i> is a magnetic field with hard iron distortion and soft iron distortion correction applied.<br />
            The <i>uncalibrated magnetic field</i> is the magnetic field without hard iron distortion correction and with soft iron distortion correction applied, and as such reports changes in the magnetic field caused by magnetized objects moving near the magnetometer.
            </para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometerInProcess.X">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometerInProcess.Y">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometerInProcess.Z">
            <summary>
            Returns a double containing the uncalibrated magnetic field around the device's z axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometerInProcess.XBias">
            <summary>
            Returns a double representing the hard iron distortion correction around x axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometerInProcess.YBias">
            <summary>
            Returns a double representing the hard iron distortion correction around y axis.
            </summary>
        </member>
        <member name="P:BrowserAPI.IUncalibratedMagnetometerInProcess.ZBias">
            <summary>
            Returns a double representing the hard iron distortion correction around z axis.
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerContainer">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerContainer.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.GetController(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerContainer.Controller" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerContainer.Ready">
            <summary>
            Provides a way of delaying code execution until a service worker is active.
            It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker.
            Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.GetReady(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerContainer.Ready" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL.
            The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            Gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array.
            The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.StartMessages(System.Threading.CancellationToken)">
            <summary>
            Explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()).
            This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainer.Register(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns>true, if service worker is supported, otherwise false</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainer.OnControllerChange">
            <summary>
            Occurs when the document's associated <i>ServiceWorkerRegistration</i> acquires a new active worker.
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainer.OnMessage">
            <summary>
            <para>Is used in a page controlled by a service worker to receive messages from the service worker.</para>
            <para>Parameter is <see href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data">MessageEvent.data</see> as json.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerContainerInProcess">
            <summary>
            <para>navigator.serviceWorker</para>
            <para>
            The <i>ServiceWorkerContainer</i> interface of the <i>Service Worker API</i> provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.<br />
            Most importantly, it exposes the <i>ServiceWorkerContainer.register()</i> method used to register service workers, and the <i>ServiceWorkerContainer.controller</i> property used to determine whether or not the current page is actively controlled.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.Register(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns>true, if service worker is supported, otherwise false</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainerInProcess.OnControllerChange">
            <summary>
            Occurs when the document's associated <i>ServiceWorkerRegistration</i> acquires a new active worker.
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerContainerInProcess.OnMessage">
            <summary>
            <para>Is used in a page controlled by a service worker to receive messages from the service worker.</para>
            <para>Parameter is <see href="https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data">MessageEvent.data</see> as json.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.RegisterWithWorkerRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Registers a service worker and returns a <see cref="T:BrowserAPI.IServiceWorkerRegistration">ServiceWorkerRegistration</see> object, which can be used to track the registration.
            </summary>
            <param name="scriptURL">relative file path to the service worker script (e.g. "/sw.js")</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerContainerInProcess.Controller">
            <summary>
            Returns a <i>ServiceWorker</i> object if its state is activating or activated (the same object returned by ServiceWorkerRegistration.active).
            This property returns null during a force-refresh request (Shift + refresh) or if there is no active worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerContainerInProcess.Ready">
            <summary>
            Provides a way of delaying code execution until a service worker is active.
            It returns a Promise that will never reject, and which waits indefinitely until the ServiceWorkerRegistration associated with the current page has an ServiceWorkerRegistration.active worker.
            Once that condition is met, it resolves with the ServiceWorkerRegistration.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.GetReady(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerContainerInProcess.Ready" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.GetRegistration(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a ServiceWorkerRegistration object whose scope URL matches the provided client URL.
            The method returns a Promise that resolves to a ServiceWorkerRegistration or undefined.
            </summary>
            <param name="clientUrl">The registration whose scope matches this URL will be returned. Relative URLs are resolved with the current client as the base.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.GetRegistrations(System.Threading.CancellationToken)">
            <summary>
            Gets all ServiceWorkerRegistrations associated with a ServiceWorkerContainer, in an array.
            The method returns a Promise that resolves to an array of ServiceWorkerRegistration.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerContainerInProcess.StartMessages">
            <summary>
            Explicitly starts the flow of messages being dispatched from a service worker to pages under its control (e.g. sent via Client.postMessage()).
            This can be used to react to sent messages earlier, even before that page's content has finished loading.
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerRegistration">
            <summary>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Active">
            <summary>
            Returns a service worker whose ServiceWorker.state is activating or activated.
            This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetActive(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerRegistration.Active" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Installing">
            <summary>
            Returns a service worker whose ServiceWorker.state is installing.
            This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetInstalling(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerRegistration.Installing" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Waiting">
            <summary>
            Returns a service worker whose ServiceWorker.state is installed.
            This property is initially set to null.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetWaiting(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerRegistration.Waiting" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.Scope">
            <summary>
            Returns a unique identifier for a service worker registration.
            The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetScope(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerRegistration.Scope" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistration.UpdateViaCache">
            <summary>
            <para>
            Updates the cache using the mode specified in the call to ServiceWorkerContainer.register.
            Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.
            </para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.GetUpdateViaCache(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorkerRegistration.UpdateViaCache" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.Update(System.Threading.CancellationToken)">
            <summary>
            Attempts to update the service worker.
            It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker.
            The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistration.Unregister(System.Threading.CancellationToken)">
            <summary>
            Unregisters the service worker registration and returns a Promise.
            The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register() with the same scope.)
            The service worker will finish any ongoing operations before it is unregistered.
            </summary>
            <param name="cancellationToken"></param>
            <returns>false if no registration was found, otherwise true (irrespective of whether unregistration happened or not)</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerRegistration.OnUpdateFound">
            <summary>
            Is fired any time the <i>ServiceWorkerRegistration.installing</i> property acquires a new service worker.
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerRegistrationInProcess">
            <summary>
            The <i>ServiceWorkerRegistration</i> interface of the Service Worker API represents the service worker registration.
            You register a service worker to control one or more pages that share the same origin.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistrationInProcess.Unregister(System.Threading.CancellationToken)">
            <summary>
            Unregisters the service worker registration and returns a Promise.
            The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register() with the same scope.)
            The service worker will finish any ongoing operations before it is unregistered.
            </summary>
            <param name="cancellationToken"></param>
            <returns>false if no registration was found, otherwise true (irrespective of whether unregistration happened or not)</returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerRegistrationInProcess.OnUpdateFound">
            <summary>
            Is fired any time the <i>ServiceWorkerRegistration.installing</i> property acquires a new service worker.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Active">
            <summary>
            Returns a service worker whose ServiceWorker.state is activating or activated.
            This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Installing">
            <summary>
            Returns a service worker whose ServiceWorker.state is installing.
            This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Waiting">
            <summary>
            Returns a service worker whose ServiceWorker.state is installed.
            This property is initially set to null.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.Scope">
            <summary>
            Returns a unique identifier for a service worker registration.
            The service worker must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerRegistrationInProcess.UpdateViaCache">
            <summary>
            <para>
            Updates the cache using the mode specified in the call to ServiceWorkerContainer.register.
            Requests for importScripts still go via the HTTP cache. updateViaCache offers control over this behavior.
            </para>
            <para>
            Returns one of the following values:<br />
            - <b>imports</b>: meaning the HTTP cache is not consulted for update of the service worker, but is consulted for importScripts.<br />
            - <b>all</b>: meaning the HTTP cache is consulted in both cases<br />
            - <b>none</b>: meaning the HTTP cache is never consulted.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerRegistrationInProcess.Update(System.Threading.CancellationToken)">
            <summary>
            Attempts to update the service worker.
            It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker.
            The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IServiceWorker">
            <summary>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:DisposeAsync"/> when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IServiceWorker.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration.
            The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorker.GetScriptUrl(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorker.ScriptUrl" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IServiceWorker.State">
            <summary>
            Returns a string representing the current state of the service worker.
            It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorker.GetState(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IServiceWorker.State" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IServiceWorker.PostMessage(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>
            Sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IServiceWorker.OnStateChange">
            <summary>
            <para>Fires anytime the ServiceWorker.state changes.</para>
            <para>Parameter is the new state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorker.OnError">
            <summary>
            <para>Fires whenever an error occurs in the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="T:BrowserAPI.IServiceWorkerInProcess">
            <summary>
            The <i>ServiceWorker</i> interface of the Service Worker API provides a reference to a service worker.
            Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call <see cref="!:Dispose"/> when you are done with it.</remarks>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerInProcess.OnStateChange">
            <summary>
            <para>Fires anytime the ServiceWorker.state changes.</para>
            <para>Parameter is the new state of the service worker. It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.</para>
            </summary>
        </member>
        <member name="E:BrowserAPI.IServiceWorkerInProcess.OnError">
            <summary>
            <para>Fires whenever an error occurs in the service worker.</para>
            <para>Parameter is of type <see href="https://developer.mozilla.org/en-US/docs/Web/API/Event">Event</see> as JSON.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerInProcess.ScriptUrl">
            <summary>
            Returns the <i>ServiceWorker</i> serialized script URL defined as part of ServiceWorkerRegistration.
            The URL must be on the same origin as the document that registers the ServiceWorker.
            </summary>
        </member>
        <member name="P:BrowserAPI.IServiceWorkerInProcess.State">
            <summary>
            Returns a string representing the current state of the service worker.
            It can be one of the following values: parsed, installing, installed, activating, activated, or redundant.
            </summary>
        </member>
        <member name="M:BrowserAPI.IServiceWorkerInProcess.PostMessage(System.Object)">
            <summary>
            <para>
            Sends a message to the worker.
            This accepts a single parameter, which is the data to send to the worker.
            The data may be any JavaScript object which can be handled by the structured clone algorithm.
            </para>
            <para>
            The service worker can send back information to its clients by using the postMessage() method.
            The message will not be sent back to this ServiceWorker object but to the associated ServiceWorkerContainer available via navigator.serviceWorker.
            </para>
            </summary>
            <param name="message">
            <para>The object to deliver to the worker; this will be in the data field in the event delivered to the message event. This may be any JavaScript object handled by the structured clone algorithm.</para>
            <para>The message parameter is mandatory.If the data to be passed to the worker is unimportant, null or undefined must be passed explicitly.</para>
            </param>
        </member>
        <member name="T:BrowserAPI.ISessionStorage">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISessionStorage.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.GetLength(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.ISessionStorage.Length" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.Key(System.Int32,System.Threading.CancellationToken)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.GetItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.SetItem(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.RemoveItem(System.String,System.Threading.CancellationToken)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorage.Clear(System.Threading.CancellationToken)">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.ISessionStorageInProcess">
            <summary>
            The read-only sessionStorage property accesses a session Storage object for the current origin.<br />
            sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.
            </summary>
        </member>
        <member name="P:BrowserAPI.ISessionStorageInProcess.Length">
            <summary>
            Returns an integer representing the number of data items stored in sessionStorage.
            </summary>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.Key(System.Int32)">
            <summary>
            When passed a number <i>n</i>, this method will return the name of the nth key in sessionStorage.
            </summary>
            <param name="index">An integer representing the number of the key you want to get the name of. This is a zero-based index.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.GetItem(System.String)">
            <summary>
            When passed a key name, will return that key's value.
            </summary>
            <param name="key">A string containing the name of the key you want to retrieve the value of.</param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.SetItem(System.String,System.String)">
            <summary>
            When passed a key name and value, will add that key to sessionStorage, or update that key's value if it already exists.
            </summary>
            <param name="key">A string containing the name of the key you want to create/update.</param>
            <param name="value">A string containing the value you want to give the key you are creating/updating.</param>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.RemoveItem(System.String)">
            <summary>
            When passed a key name, will remove that key from sessionStorage.
            </summary>
            <param name="key">A string containing the name of the key you want to remove.</param>
        </member>
        <member name="M:BrowserAPI.ISessionStorageInProcess.Clear">
            <summary>
            When invoked, will empty all keys out of sessionStorage.
            </summary>
        </member>
        <member name="T:BrowserAPI.IScreenDetailed">
            <summary>
            <para>The <i>ScreenDetailed</i> interface of the Window Management API represents detailed information about one specific screen available to the user's device.</para>
            <para><i>ScreenDetailed</i> objects can be accessed via the <see cref="P:BrowserAPI.IScreenDetails.Screens">ScreenDetails.screens</see> and <see cref="P:BrowserAPI.IScreenDetails.CurrentScreen">ScreenDetails.currentScreen</see> properties.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.Left">
            <summary>
            <para>A number representing the x-coordinate (left-hand edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true left-hand edge, ignoring any OS UI element drawn at the left of the screen.
            Windows cannot be placed in those areas; to get the left-hand coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.IScreenDetailed.AvailLeft"/>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetLeft(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the x-coordinate (left-hand edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true left-hand edge, ignoring any OS UI element drawn at the left of the screen.
            Windows cannot be placed in those areas; to get the left-hand coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.IScreenDetailed.AvailLeft"/>.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.Top">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true top edge, ignoring any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas; to get the top coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.IScreenDetailed.AvailTop"/>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetTop(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true top edge, ignoring any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas; to get the top coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.IScreenDetailed.AvailTop"/>.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.AvailLeft">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.IScreenDetailed.Left"/> property, plus the width of any OS UI element drawn on the left of the screen.
            Windows cannot be placed in those areas, so availLeft is useful for giving you the left boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetAvailLeft(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.IScreenDetailed.Left"/> property, plus the width of any OS UI element drawn on the left of the screen.
            Windows cannot be placed in those areas, so availLeft is useful for giving you the left boundary of the actual area available to open or place windows.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.AvailTop">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the available screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.IScreenDetailed.Top"/> property, plus the height of any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas, so availTop is useful for giving you the top boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetAvailTop(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the available screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.IScreenDetailed.Top"/> property, plus the height of any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas, so availTop is useful for giving you the top boundary of the actual area available to open or place windows.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.Label">
            <summary>
            <para>A descriptive label for the screen, for example "Built-in Retina Display".</para>
            <para>This is useful for constructing a list of options to display to the user if you want them to choose a screen to display content on.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetLabel(System.Threading.CancellationToken)">
            <summary>
            <para>A descriptive label for the screen, for example "Built-in Retina Display".</para>
            <para>This is useful for constructing a list of options to display to the user if you want them to choose a screen to display content on.</para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.DevicePixelRatio">
            <summary>
            <para>A number representing the screen's device pixel ratio.</para>
            <para>
            This is the same as the value returned by <i>Window.devicePixelRatio</i>, except that <i>Window.devicePixelRatio</i>:<br />
            - always returns the device pixel ratio for the current screen.<br />
            - also includes scaling of the window itself, i.e., page zoom (at least on some browser implementations).
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetDevicePixelRatio(System.Threading.CancellationToken)">
            <summary>
            <para>A number representing the screen's device pixel ratio.</para>
            <para>
            This is the same as the value returned by <i>Window.devicePixelRatio</i>, except that <i>Window.devicePixelRatio</i>:<br />
            - always returns the device pixel ratio for the current screen.<br />
            - also includes scaling of the window itself, i.e., page zoom (at least on some browser implementations).
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.IsPrimary">
            <summary>
            <para>A boolean indicating whether the screen is set as the operating system (OS) primary screen or not.</para>
            <para>
            The OS hosting the browser will have one primary screen, and one or more secondary screens.
            The primary screen can usually be specified by the user via OS settings, and generally contains OS UI features such as the taskbar/icon dock.
            The primary screen may change for a number of reasons, such as a screen being unplugged.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetIsPrimary(System.Threading.CancellationToken)">
            <summary>
            <para>A boolean indicating whether the screen is set as the operating system (OS) primary screen or not.</para>
            <para>
            The OS hosting the browser will have one primary screen, and one or more secondary screens.
            The primary screen can usually be specified by the user via OS settings, and generally contains OS UI features such as the taskbar/icon dock.
            The primary screen may change for a number of reasons, such as a screen being unplugged.
            </para>
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.IsInternal">
            <summary>
            A boolean indicating whether the screen is internal to the device or external.
            External devices are generally manufactured separately from the device they are attached to and can be connected and disconnected as needed,
            whereas internal screens are part of the device and not intended to be disconnected.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetIsInternal(System.Threading.CancellationToken)">
            <summary>
            A boolean indicating whether the screen is internal to the device or external.
            External devices are generally manufactured separately from the device they are attached to and can be connected and disconnected as needed,
            whereas internal screens are part of the device and not intended to be disconnected.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.Width">
            <inheritdoc cref="!:Screen.Width" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.Width" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.Height">
            <inheritdoc cref="!:Screen.Height" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.Height" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.AvailWidth">
            <inheritdoc cref="!:Screen.AvailWidth" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetAvailWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.AvailWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.AvailHeight">
            <inheritdoc cref="!:Screen.AvailHeight" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetAvailHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.AvailHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.ColorDepth">
            <inheritdoc cref="!:Screen.ColorDepth" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetColorDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.ColorDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.PixelDepth">
            <inheritdoc cref="!:Screen.PixelDepth" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetPixelDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.PixelDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.IsExtended">
            <inheritdoc cref="!:Screen.IsExtended" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetIsExtended(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.IsExtended" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.OrientationType">
            <inheritdoc cref="!:Screen.OrientationType" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetOrientationType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.OrientationType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetailed.OrientationAngle">
            <inheritdoc cref="!:Screen.OrientationAngle" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.GetOrientationAngle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetailed.OrientationAngle" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.UnlockOrientation(System.Threading.CancellationToken)">
            <inheritdoc cref="!:Screen.UnlockOrientation" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IScreenDetailed.LockOrientation(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="!:ScreenBase.LockOrientation" />
            <param name="orientation"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IScreenDetailed.OnChange">
            <inheritdoc cref="!:ScreenBase.OnChange" />
        </member>
        <member name="E:BrowserAPI.IScreenDetailed.OnOrientationChange">
            <inheritdoc cref="!:ScreenBase.OnOrientationChange" />
        </member>
        <member name="T:BrowserAPI.IScreenDetailedInProcess">
            <summary>
            <para>The <i>ScreenDetailed</i> interface of the Window Management API represents detailed information about one specific screen available to the user's device.</para>
            <para><i>ScreenDetailed</i> objects can be accessed via the <see cref="P:BrowserAPI.IScreenDetailsInProcess.Screens">ScreenDetails.screens</see> and <see cref="P:BrowserAPI.IScreenDetailsInProcess.CurrentScreen">ScreenDetails.currentScreen</see> properties.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="M:BrowserAPI.IScreenDetailedInProcess.LockOrientation(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="!:ScreenBase.LockOrientation" />
            <param name="orientation"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IScreenDetailedInProcess.OnChange">
            <inheritdoc cref="!:ScreenBase.OnChange" />
        </member>
        <member name="E:BrowserAPI.IScreenDetailedInProcess.OnOrientationChange">
            <inheritdoc cref="!:ScreenBase.OnOrientationChange" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.Left">
            <summary>
            <para>A number representing the x-coordinate (left-hand edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true left-hand edge, ignoring any OS UI element drawn at the left of the screen.
            Windows cannot be placed in those areas; to get the left-hand coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.IScreenDetailedInProcess.AvailLeft"/>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.Top">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the true top edge, ignoring any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas; to get the top coordinate of the screen area that windows can be placed in, use <see cref="P:BrowserAPI.IScreenDetailedInProcess.AvailTop"/>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.AvailLeft">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the total screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.IScreenDetailedInProcess.Left"/> property, plus the width of any OS UI element drawn on the left of the screen.
            Windows cannot be placed in those areas, so availLeft is useful for giving you the left boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.AvailTop">
            <summary>
            <para>A number representing the y-coordinate (top edge) of the available screen area inside the OS virtual screen arrangement, relative to the multi-screen origin.</para>
            <para>
            This is equal to the <see cref="P:BrowserAPI.IScreenDetailedInProcess.Top"/> property, plus the height of any OS UI element drawn at the top of the screen.
            Windows cannot be placed in those areas, so availTop is useful for giving you the top boundary of the actual area available to open or place windows.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.Label">
            <summary>
            <para>A descriptive label for the screen, for example "Built-in Retina Display".</para>
            <para>This is useful for constructing a list of options to display to the user if you want them to choose a screen to display content on.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.DevicePixelRatio">
            <summary>
            <para>A number representing the screen's device pixel ratio.</para>
            <para>
            This is the same as the value returned by <i>Window.devicePixelRatio</i>, except that <i>Window.devicePixelRatio</i>:<br />
            - always returns the device pixel ratio for the current screen.<br />
            - also includes scaling of the window itself, i.e., page zoom (at least on some browser implementations).
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.IsPrimary">
            <summary>
            <para>A boolean indicating whether the screen is set as the operating system (OS) primary screen or not.</para>
            <para>
            The OS hosting the browser will have one primary screen, and one or more secondary screens.
            The primary screen can usually be specified by the user via OS settings, and generally contains OS UI features such as the taskbar/icon dock.
            The primary screen may change for a number of reasons, such as a screen being unplugged.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.IsInternal">
            <summary>
            A boolean indicating whether the screen is internal to the device or external.
            External devices are generally manufactured separately from the device they are attached to and can be connected and disconnected as needed,
            whereas internal screens are part of the device and not intended to be disconnected.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.Width">
            <inheritdoc cref="!:ScreenInProcess.Width" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.Height">
            <inheritdoc cref="!:ScreenInProcess.Height" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.AvailWidth">
            <inheritdoc cref="!:ScreenInProcess.AvailWidth" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.AvailHeight">
            <inheritdoc cref="!:ScreenInProcess.AvailHeight" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.ColorDepth">
            <inheritdoc cref="!:ScreenInProcess.ColorDepth" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.PixelDepth">
            <inheritdoc cref="!:ScreenInProcess.PixelDepth" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.IsExtended">
            <inheritdoc cref="!:ScreenInProcess.IsExtended" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.OrientationType">
            <inheritdoc cref="!:ScreenInProcess.OrientationType" />
        </member>
        <member name="P:BrowserAPI.IScreenDetailedInProcess.OrientationAngle">
            <inheritdoc cref="!:ScreenInProcess.OrientationAngle" />
        </member>
        <member name="M:BrowserAPI.IScreenDetailedInProcess.UnlockOrientation">
            <inheritdoc cref="!:ScreenInProcess.UnlockOrientation" />
        </member>
        <member name="T:BrowserAPI.IScreenDetails">
            <summary>
            <para>The <i>ScreenDetails</i> interface of the Window Management API represents the details of all the screens available to the user's device.</para>
            <para>This information is accessed via the <see cref="M:BrowserAPI.IWindowManagement.GetScreenDetails(System.Threading.CancellationToken)">Window.getScreenDetails()</see> method.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call DisposeAsync() when you are done with it.</remarks>
        </member>
        <member name="P:BrowserAPI.IScreenDetails.CurrentScreen">
            <summary>
            A single ScreenDetailed object representing detailed information about the screen that the current browser window is displayed in.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetails.GetCurrentScreen(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetails.CurrentScreen" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreenDetails.Screens">
            <summary>
            An array of ScreenDetailed objects, each one representing detailed information about one specific screen available to the user's device.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenDetails.GetScreens(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreenDetails.Screens" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IScreenDetails.OnCurrentScreenChange">
            <summary>
            Is fired when the ScreenDetails.currentScreen changes in one of the following ways:<br />
            - The current screen changes to a different screen, i.e., the current browser window is moved to a different screen.<br />
            - One or more of the following properties change on the current screen: width, height, availWidth, availHeight, colorDepth, orientation<br />
            - One or more properties of <see href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenDetailed">ScreenDetailed</see> changes.
            </summary>
        </member>
        <member name="E:BrowserAPI.IScreenDetails.OnScreensChange">
            <summary>
            Is fired when the set of screens available to the system has changed: that is, a new screen has become available or an existing screen has become unavailable.
            This will be reflected in a change in the screens array.
            </summary>
        </member>
        <member name="T:BrowserAPI.IScreenDetailsInProcess">
            <summary>
            <para>The <i>ScreenDetails</i> interface of the Window Management API represents the details of all the screens available to the user's device.</para>
            <para>This information is accessed via the <see cref="M:BrowserAPI.IWindowManagementInProcess.GetScreenDetails(System.Threading.CancellationToken)">Window.getScreenDetails()</see> method.</para>
            </summary>
            <remarks>Objects of this class must disposed manually, so do not forget to call Dispose() when you are done with it.</remarks>
        </member>
        <member name="E:BrowserAPI.IScreenDetailsInProcess.OnCurrentScreenChange">
            <summary>
            Is fired when the ScreenDetails.currentScreen changes in one of the following ways:<br />
            - The current screen changes to a different screen, i.e., the current browser window is moved to a different screen.<br />
            - One or more of the following properties change on the current screen: width, height, availWidth, availHeight, colorDepth, orientation<br />
            - One or more properties of <see href="https://developer.mozilla.org/en-US/docs/Web/API/ScreenDetailed">ScreenDetailed</see> changes.
            </summary>
        </member>
        <member name="E:BrowserAPI.IScreenDetailsInProcess.OnScreensChange">
            <summary>
            Is fired when the set of screens available to the system has changed: that is, a new screen has become available or an existing screen has become unavailable.
            This will be reflected in a change in the screens array.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailsInProcess.CurrentScreen">
            <summary>
            A single ScreenDetailed object representing detailed information about the screen that the current browser window is displayed in.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenDetailsInProcess.Screens">
            <summary>
            An array of ScreenDetailed objects, each one representing detailed information about one specific screen available to the user's device.
            </summary>
        </member>
        <member name="T:BrowserAPI.IScreen">
            <summary>
            <para>The <i>Screen</i> interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.</para>
            <para>Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreen.Width">
            <summary>
            Returns the width of the screen in CSS pixels.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.Width" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.Height">
            <summary>
            Returns the height of the screen in CSS pixels.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.Height" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.AvailWidth">
            <summary>
            Returns the amount of horizontal space (in CSS pixels) available to the window.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetAvailWidth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.AvailWidth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.AvailHeight">
            <summary>
            <para>
            Returns the height, in CSS pixels, of the space available for Web content on the screen.
            Since Screen is exposed on the Window interface's window.screen property, you access <i>availHeight</i> using <i>window.screen.availHeight</i>.
            </para>
            <para>You can similarly use <see cref="P:BrowserAPI.IScreen.AvailWidth">Screen.availWidth</see> to get the number of pixels which are horizontally available to the browser for its use.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetAvailHeight(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.AvailHeight" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.ColorDepth">
            <summary>
            Returns the color depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetColorDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.ColorDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.PixelDepth">
            <summary>
            Returns the bit depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetPixelDepth(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.PixelDepth" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.IsExtended">
            <summary>
            <para>Returns true if the user's device has multiple screens, and false if not.</para>
            <para>
            This property is typically accessed via window.screen.isExtended,
            and can be used to test whether multiple screens are available before attempting to create a multi-window, multi-screen layout using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API">Window Management API</see>.
            </para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetIsExtended(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.IsExtended" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.OrientationType">
            <summary>
            Returns the document's current orientation type, one of:<br />
            - "portrait-primary"<br />
            - "portrait-secondary"<br />
            - "landscape-primary"<br />
            - "landscape-secondary"
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetOrientationType(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.OrientationType" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:BrowserAPI.IScreen.OrientationAngle">
            <summary>
            Returns the document's current orientation angle.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.GetOrientationAngle(System.Threading.CancellationToken)">
            <inheritdoc cref="P:BrowserAPI.IScreen.OrientationAngle" />
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IScreen.UnlockOrientation(System.Threading.CancellationToken)">
            <summary>
            Unlocks the orientation of the containing document from its default orientation.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IScreen.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreen.LockOrientation(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Locks the orientation of the containing document to the specified orientation.</para>
            <para>
            Typically orientation locking is only enabled on mobile devices, and when the browser context is full screen. If locking is supported, then it must work for all the parameter values listed as follows:<br />
            - "any"<br />
            - "natural"<br />
            - "landscape"<br />
            - "landscape-primary"<br />
            - "landscape-secondary"<br />
            - "portrait"<br />
            - "portrait-primary"<br />
            - "portrait-secondary"
            </para>
            </summary>
            <param name="orientation">
            An orientation lock type. One of the following:<br />
            - "any": Any of "portrait-primary", "portrait-secondary", "landscape-primary" or "landscape-secondary".<br />
            - "natural": The natural orientation of the screen from the underlying operating system: either "portrait-primary" or "landscape-primary".<br />
            - "landscape": An orientation where screen width is greater than the screen height. Depending on the platform convention, this may be "landscape-primary", "landscape-secondary", or both.<br />
            - "landscape-primary": The "primary" landscape mode. If the natural orientation is a landscape mode (screen width is greater than height), this will be the same as the natural orientation, and correspond to an angle of 0 degrees. If the natural orientation is a portrait mode, then the user agent can choose either landscape orientation as the "landscape-primary" with an angle of either 90 or 270 degrees ("landscape-secondary" will be the other orientation and angle).<br />
            - "landscape-secondary": The secondary landscape mode. If the natural orientation is a landscape mode, this orientation is upside down relative to the natural orientation, and will have an angle of 180 degrees. If the natural orientation is a portrait mode, this can be either orientation as selected by the user agent: whichever was not selected for "landscape-primary".<br />
            - "portrait": An orientation where screen height is greater than the screen width. Depending on the platform convention, this may be "portrait-primary", "portrait-secondary", or both.<br />
            - "portrait-primary": The "primary" portrait mode. If the natural orientation is a portrait mode (screen height is greater than width), this will be the same as the natural orientation, and correspond to an angle of 0 degrees. If the natural orientation is a landscape mode, then the user agent can choose either portrait orientation as the "portrait-primary" and "portrait-secondary"; one of those will be assigned the angle of 90 degrees and the other will have an angle of 270 degrees.<br />
            - "portrait-secondary": The secondary portrait orientation. If the natural orientation is a portrait mode, this will have an angle of 180 degrees (in other words, the device is upside down relative to its natural orientation). If the natural orientation is a landscape mode, this can be either orientation as selected by the user agent: whichever was not selected for "portrait-primary".<br />
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IScreen.OnChange">
            <summary>
            Fired on a specific screen when one or more of the following properties change on it:<br />
            - width<br />
            - height<br />
            - availWidth<br />
            - availHeight<br />
            - colorDepth<br />
            - orientation
            </summary>
        </member>
        <member name="E:BrowserAPI.IScreen.OnOrientationChange">
            <summary>
            Fired whenever the screen changes orientation, for example when a user rotates their mobile phone.
            </summary>
        </member>
        <member name="T:BrowserAPI.IScreenInProcess">
            <summary>
            <para>The <i>Screen</i> interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.</para>
            <para>Note that browsers determine which screen to report as current by detecting which screen has the center of the browser window.</para>
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenInProcess.Dispose">
            <summary>
            Releases the <see cref="!:EventTrigger"/> object used to trigger the events.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenInProcess.LockOrientation(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Locks the orientation of the containing document to the specified orientation.</para>
            <para>
            Typically orientation locking is only enabled on mobile devices, and when the browser context is full screen. If locking is supported, then it must work for all the parameter values listed as follows:<br />
            - "any"<br />
            - "natural"<br />
            - "landscape"<br />
            - "landscape-primary"<br />
            - "landscape-secondary"<br />
            - "portrait"<br />
            - "portrait-primary"<br />
            - "portrait-secondary"
            </para>
            </summary>
            <param name="orientation">
            An orientation lock type. One of the following:<br />
            - "any": Any of "portrait-primary", "portrait-secondary", "landscape-primary" or "landscape-secondary".<br />
            - "natural": The natural orientation of the screen from the underlying operating system: either "portrait-primary" or "landscape-primary".<br />
            - "landscape": An orientation where screen width is greater than the screen height. Depending on the platform convention, this may be "landscape-primary", "landscape-secondary", or both.<br />
            - "landscape-primary": The "primary" landscape mode. If the natural orientation is a landscape mode (screen width is greater than height), this will be the same as the natural orientation, and correspond to an angle of 0 degrees. If the natural orientation is a portrait mode, then the user agent can choose either landscape orientation as the "landscape-primary" with an angle of either 90 or 270 degrees ("landscape-secondary" will be the other orientation and angle).<br />
            - "landscape-secondary": The secondary landscape mode. If the natural orientation is a landscape mode, this orientation is upside down relative to the natural orientation, and will have an angle of 180 degrees. If the natural orientation is a portrait mode, this can be either orientation as selected by the user agent: whichever was not selected for "landscape-primary".<br />
            - "portrait": An orientation where screen height is greater than the screen width. Depending on the platform convention, this may be "portrait-primary", "portrait-secondary", or both.<br />
            - "portrait-primary": The "primary" portrait mode. If the natural orientation is a portrait mode (screen height is greater than width), this will be the same as the natural orientation, and correspond to an angle of 0 degrees. If the natural orientation is a landscape mode, then the user agent can choose either portrait orientation as the "portrait-primary" and "portrait-secondary"; one of those will be assigned the angle of 90 degrees and the other will have an angle of 270 degrees.<br />
            - "portrait-secondary": The secondary portrait orientation. If the natural orientation is a portrait mode, this will have an angle of 180 degrees (in other words, the device is upside down relative to its natural orientation). If the natural orientation is a landscape mode, this can be either orientation as selected by the user agent: whichever was not selected for "portrait-primary".<br />
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:BrowserAPI.IScreenInProcess.OnChange">
            <summary>
            Fired on a specific screen when one or more of the following properties change on it:<br />
            - width<br />
            - height<br />
            - availWidth<br />
            - availHeight<br />
            - colorDepth<br />
            - orientation
            </summary>
        </member>
        <member name="E:BrowserAPI.IScreenInProcess.OnOrientationChange">
            <summary>
            Fired whenever the screen changes orientation, for example when a user rotates their mobile phone.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.Width">
            <summary>
            Returns the width of the screen in CSS pixels.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.Height">
            <summary>
            Returns the height of the screen in CSS pixels.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.AvailWidth">
            <summary>
            Returns the amount of horizontal space (in CSS pixels) available to the window.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.AvailHeight">
            <summary>
            <para>
            Returns the height, in CSS pixels, of the space available for Web content on the screen.
            Since Screen is exposed on the Window interface's window.screen property, you access <i>availHeight</i> using <i>window.screen.availHeight</i>.
            </para>
            <para>You can similarly use <see cref="P:BrowserAPI.IScreenInProcess.AvailWidth">Screen.availWidth</see> to get the number of pixels which are horizontally available to the browser for its use.</para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.ColorDepth">
            <summary>
            Returns the color depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.PixelDepth">
            <summary>
            Returns the bit depth of the screen.
            Per the CSSOM, some implementations return 24 for compatibility reasons.
            See the browser compatibility section for those that don't.
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.IsExtended">
            <summary>
            <para>Returns true if the user's device has multiple screens, and false if not.</para>
            <para>
            This property is typically accessed via window.screen.isExtended,
            and can be used to test whether multiple screens are available before attempting to create a multi-window, multi-screen layout using the <see href="https://developer.mozilla.org/en-US/docs/Web/API/Window_Management_API">Window Management API</see>.
            </para>
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.OrientationType">
            <summary>
            Returns the document's current orientation type, one of:<br />
            - "portrait-primary"<br />
            - "portrait-secondary"<br />
            - "landscape-primary"<br />
            - "landscape-secondary"
            </summary>
        </member>
        <member name="P:BrowserAPI.IScreenInProcess.OrientationAngle">
            <summary>
            Returns the document's current orientation angle.
            </summary>
        </member>
        <member name="M:BrowserAPI.IScreenInProcess.UnlockOrientation">
            <summary>
            Unlocks the orientation of the containing document from its default orientation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IWindowManagement">
            <summary>
            The <i>Window Management API</i> allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens,
            paving the way towards more effective multi-screen applications.
            </summary>
        </member>
        <member name="P:BrowserAPI.IWindowManagement.Screen">
            <summary>
            The Window property <i>screen</i> returns a reference to the screen object associated with the window.
            The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.
            </summary>
        </member>
        <member name="M:BrowserAPI.IWindowManagement.GetScreenDetails(System.Threading.CancellationToken)">
            <summary>
            The <i>getScreenDetails()</i> method of the Window interface returns a Promise that fulfills with a ScreenDetails object instance representing the details of all the screens available to the user's device.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWindowManagement.Open(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            The <i>open()</i> method of the Window interface loads a specified resource into a new or existing browsing context (that is, a tab, a window, or an iframe) under a specified name.
            </summary>
            <param name="url">
            A string indicating the URL or path of the resource to be loaded.
            If an empty string ("") is specified or this parameter is omitted, a blank page is opened into the targeted browsing context.
            </param>
            <param name="target">
            <para>
            A string, without whitespace, specifying the name of the browsing context the resource is being loaded into.<br />
            If the name doesn't identify an existing context, a new context is created and given the specified name.<br />
            The special target keywords, "<i>_self</i>", "<i>_blank</i>" (default), "<i>_parent</i>", "<i>_top</i>", and "<i>_unfencedTop</i>" can also be used.<br />
            "<i>_unfencedTop</i>" is only relevant to fenced frames.
            </para>
            <para>This name can be used as the target attribute of &lt;a&gt; or &lt;form&gt; elements.</para>
            </param>
            <param name="features">
            <para>
            A string containing a comma-separated list of window features in the form <i>name=value</i>.
            Boolean values can be set to true using one of: <i>name</i>, <i>name=yes</i>, <i>name=true</i>, or <i>name=n</i> where n is any non-zero integer.
            These features include options such as the window's default size and position, whether or not to open a minimal popup window, and so forth.
            The following options are supported:</para>
            <para>
            - "attributionsrc": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "popup": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "width" or "innerWidth": Specifies the width of the content area, including scrollbars. The minimum required value is 100.<br />
            - "height" or "innerHeight": Specifies the height of the content area, including scrollbars. The minimum required value is 100.<br />
            - "left" or "screenX": Specifies the distance in pixels from the left side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "top" or "screenY": Specifies the distance in pixels from the top side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "noopener": If this feature is set, the new window will not have access to the originating window via Window.opener and returns null. When noopener is used, non-empty target names, other than <i>_top</i>, <i>_self</i>, and <i>_parent</i>, are treated like <i>_blank</i> in terms of deciding whether to open a new browsing context.<br />
            - "noreferrer": If this feature is set, the browser will omit the Referer header, as well as set noopener to true. See rel="noreferrer" for more information.
            </para>
            <para>A null value is treated the same as the empty string ("").</para>
            </param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:BrowserAPI.IWindowManagementInProcess">
            <summary>
            The <i>Window Management API</i> allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens,
            paving the way towards more effective multi-screen applications.
            </summary>
        </member>
        <member name="P:BrowserAPI.IWindowManagementInProcess.Screen">
            <summary>
            The Window property <i>screen</i> returns a reference to the screen object associated with the window.
            The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.
            </summary>
        </member>
        <member name="M:BrowserAPI.IWindowManagementInProcess.GetScreenDetails(System.Threading.CancellationToken)">
            <summary>
            The <i>getScreenDetails()</i> method of the Window interface returns a Promise that fulfills with a ScreenDetails object instance representing the details of all the screens available to the user's device.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:BrowserAPI.IWindowManagementInProcess.Open(System.String,System.String,System.String)">
            <summary>
            The <i>open()</i> method of the Window interface loads a specified resource into a new or existing browsing context (that is, a tab, a window, or an iframe) under a specified name.
            </summary>
            <param name="url">
            A string indicating the URL or path of the resource to be loaded.
            If an empty string ("") is specified or this parameter is omitted, a blank page is opened into the targeted browsing context.
            </param>
            <param name="target">
            <para>
            A string, without whitespace, specifying the name of the browsing context the resource is being loaded into.<br />
            If the name doesn't identify an existing context, a new context is created and given the specified name.<br />
            The special target keywords, "<i>_self</i>", "<i>_blank</i>" (default), "<i>_parent</i>", "<i>_top</i>", and "<i>_unfencedTop</i>" can also be used.<br />
            "<i>_unfencedTop</i>" is only relevant to fenced frames.
            </para>
            <para>This name can be used as the target attribute of &lt;a&gt; or &lt;form&gt; elements.</para>
            </param>
            <param name="features">
            <para>
            A string containing a comma-separated list of window features in the form <i>name=value</i>.
            Boolean values can be set to true using one of: <i>name</i>, <i>name=yes</i>, <i>name=true</i>, or <i>name=n</i> where n is any non-zero integer.
            These features include options such as the window's default size and position, whether or not to open a minimal popup window, and so forth.
            The following options are supported:</para>
            <para>
            - "attributionsrc": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "popup": By default, window.open opens the page in a new tab. If popup is set to true, it requests that a minimal popup window be used. The UI features included in the popup window will be automatically decided by the browser, generally including an address bar only. If popup is present and set to false, a new tab is still opened.<br />
            - "width" or "innerWidth": Specifies the width of the content area, including scrollbars. The minimum required value is 100.<br />
            - "height" or "innerHeight": Specifies the height of the content area, including scrollbars. The minimum required value is 100.<br />
            - "left" or "screenX": Specifies the distance in pixels from the left side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "top" or "screenY": Specifies the distance in pixels from the top side of the work area as defined by the user's operating system where the new window will be generated.<br />
            - "noopener": If this feature is set, the new window will not have access to the originating window via Window.opener and returns null. When noopener is used, non-empty target names, other than <i>_top</i>, <i>_self</i>, and <i>_parent</i>, are treated like <i>_blank</i> in terms of deciding whether to open a new browsing context.<br />
            - "noreferrer": If this feature is set, the browser will omit the Referer header, as well as set noopener to true. See rel="noreferrer" for more information.
            </para>
            <para>A null value is treated the same as the empty string ("").</para>
            </param>
        </member>
        <member name="T:CircleDIAttributes.IBrowserAPIModule">
            <summary>
            <para>
            CircleDI service providers can import this module to register all services available in this library.<br />
            All services includes every BrowserAPI service and <see cref="T:BrowserAPI.IModuleManager"/>.
            </para>
            <para>All services will be registered as scoped, CreationTiming.Constructor, GetAccess.Property and default Name (name of the implementation class).</para>
            </summary>
        </member>
        <member name="T:CircleDIAttributes.ScopedAttribute`2">
            <summary>
            <para>The register attribute from CircleDI to register a scoped service to a CircleDI service provider.</para>
            <para>This attributes members are omitted, because only the attribute class and the type parameters are used here.</para>
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TImplementation">Type of the implementation.</typeparam>
        </member>
        <member name="T:Jab.IBrowserAPIModule">
            <summary>
            <para>
            Jab service providers can import this module to register all services available in this library.<br />
            All services includes every BrowserAPI service and <see cref="T:BrowserAPI.IModuleManager"/>.
            </para>
            <para>All services will be registered as scoped.</para>
            </summary>
        </member>
        <member name="T:Jab.ServiceProviderModuleAttribute">
            <summary>
            The attribute from Jab to mark an interface as module.
            </summary>
        </member>
        <member name="T:Jab.ScopedAttribute`2">
            <summary>
            <para>The register attribute from Jab to register a scoped service to a Jab service provider.</para>
            <para>This attributes members are omitted, because only the attribute class and the type parameters are used here.</para>
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <typeparam name="TImpl">Type of the implementation.</typeparam>
        </member>
        <member name="T:AutoInterfaceAttributes.AutoInterfaceAttribute">
            <summary>
            Generates an interface for the decorated class/struct.
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Name">
            <summary>
            <para>The name of the generated interface.</para>
            <para>Default is "I{ClassName}"</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Modifier">
            <summary>
            <para>The modifier(s) for the interface.</para>
            <para>Deault is "public partial"</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Namespace">
            <summary>
            <para>The namespace declaration for the interface.</para>
            <para>If empty string, no namespace directive will be used (global namespace).<br />
            Default (if not present) it will be mapped to the same namespace as the namespace of the class/struct.</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Inheritance">
            <summary>
            <para>interface inheritance: Name(s) of interfaces this interface will inherit.</para>
            <para>Default is Array.Empty</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.Nested">
            <summary>
            <para>
            The Classes, structs or interfaces containing the generated interface.<br />
            e.g. ["public sealed partial class Example"] will wrap the interface with that expression.
            </para>
            <para>Default is Array.Empty</para>
            </summary>
        </member>
        <member name="P:AutoInterfaceAttributes.AutoInterfaceAttribute.StaticMembers">
            <summary>
            <para>If enabled, static members get accepted and are generating "static abstract" members.</para>
            <para>Default is false</para>
            </summary>
        </member>
        <member name="T:AutoInterfaceAttributes.IgnoreAutoInterfaceAttribute">
            <summary>
            The decorated member will be Ignored by the generator.
            </summary>
        </member>
        <member name="T:AutoInterfaceAttributes.AutoInterfaceVisibilityPublic">
            <summary>
            Adds a "public" access modifier to the interface member.
            </summary>
        </member>
        <member name="T:AutoInterfaceAttributes.AutoInterfaceVisibilityInternal">
            <summary>
            Adds a "internal" access modifier to the interface member.
            </summary>
        </member>
        <member name="T:AutoInterfaceAttributes.AutoInterfaceVisibilityProtected">
            <summary>
            Adds a "protected" access modifier to the interface member.
            </summary>
        </member>
        <member name="T:AutoInterfaceAttributes.AutoInterfaceVisibilityProtectedInternal">
            <summary>
            Adds a "protected internal" access modifier to the interface member.
            </summary>
        </member>
        <member name="T:AutoInterfaceAttributes.AutoInterfaceVisibilityPrivateProtected">
            <summary>
            Adds a "private protected" access modifier to the interface member.
            </summary>
        </member>
    </members>
</doc>
